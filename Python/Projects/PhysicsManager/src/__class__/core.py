ATSDown:int = None
ATSNone:int = None
ATSPad:int = None
ATSUnspecified:int = None
ATSUp:int = None
ATS_down:int = None
ATS_none:int = None
ATS_pad:int = None
ATS_unspecified:int = None
ATS_up:int = None
class AdaptiveLru:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def beginEpoch(self, /): ...
    def begin_epoch(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerEvict(self, /): ...
    def consider_evict(self, /): ...
    def countActiveSize(self, /): ...
    def count_active_size(self, /): ...
    def evictTo(self, object, /): ...
    def evict_to(self, object, /): ...
    def getClassType(): ...
    def getMaxSize(self, /): ...
    def getMaxUpdatesPerFrame(self, /): ...
    def getName(self, /): ...
    def getTotalSize(self, /): ...
    def getWeight(self, /): ...
    def get_class_type(): ...
    def get_max_size(self, /): ...
    def get_max_updates_per_frame(self, /): ...
    def get_name(self, /): ...
    def get_total_size(self, /): ...
    def get_weight(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def setMaxSize(self, object, /): ...
    def setMaxUpdatesPerFrame(self, object, /): ...
    def setName(self, object, /): ...
    def setWeight(self, object, /): ...
    def set_max_size(self, object, /): ...
    def set_max_updates_per_frame(self, object, /): ...
    def set_name(self, object, /): ...
    def set_weight(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def validate(self, /): ...
    def write(): ...
class AdaptiveLruPage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getNumFrames(self, /): ...
    def getNumInactiveFrames(self, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_num_frames(self, /): ...
    def get_num_inactive_frames(self, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    def output(self, object, /): ...
    def setLruSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class AlphaTestAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getReferenceAlpha(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_reference_alpha(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    reference_alpha = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class AmbientLight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnalogNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearOutput(self, object, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_output(self, object, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getControlState(self, object, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumControls(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOutput(self, object, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_control_state(self, object, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_controls(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_output(self, object, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isControlKnown(self, object, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOutputFlipped(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_control_known(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_output_flipped(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOutput(): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_output(): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class AnimBundle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    base_frame_rate = None
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def copyBundle(self, /): ...
    def copy_bundle(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBaseFrameRate(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getNumFrames(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_base_frame_rate(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_num_frames(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    num_frames = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimBundleNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    bundle = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findAnimBundle(object, /): ...
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_anim_bundle(object, /): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getBundle(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_bundle(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelACMatrixSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(): ...
    def getValueNoScaleShear(): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(): ...
    def get_value_no_scale_shear(): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelACScalarSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelMatrix:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(): ...
    def getValueNoScaleShear(): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(): ...
    def get_value_no_scale_shear(): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelMatrixDynamic:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(): ...
    def getValueNoScaleShear(): ...
    def getValueNode(self, /): ...
    def getValueTransform(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(): ...
    def get_value_no_scale_shear(): ...
    def get_value_node(self, /): ...
    def get_value_transform(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def setValue(self, object, /): ...
    def setValueNode(self, object, /): ...
    def set_name(self, object, /): ...
    def set_value(self, object, /): ...
    def set_value_node(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    value_node = None
    def write(): ...
class AnimChannelMatrixXfmTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearAllTables(self, /): ...
    def clearName(self, /): ...
    def clearTable(self, object, /): ...
    def clear_all_tables(self, /): ...
    def clear_name(self, /): ...
    def clear_table(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getTable(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(): ...
    def getValueNoScaleShear(): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_table(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(): ...
    def get_value_no_scale_shear(): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def hasTable(self, object, /): ...
    def has_name(self, /): ...
    def has_table(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValidId(object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid_id(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def setTable(): ...
    def set_name(self, object, /): ...
    def set_table(): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    tables = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelScalar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannelScalarDynamic:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def setValue(self, object, /): ...
    def setValueNode(self, object, /): ...
    def set_name(self, object, /): ...
    def set_value(self, object, /): ...
    def set_value_node(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    value = None
    value_node = None
    def write(): ...
class AnimChannelScalarTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clearTable(self, /): ...
    def clear_name(self, /): ...
    def clear_table(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getTable(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_table(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def hasTable(self, /): ...
    def has_name(self, /): ...
    def has_table(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def setTable(self, object, /): ...
    def set_name(self, object, /): ...
    def set_table(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    table = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannel_ACMatrixSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(): ...
    def getValueNoScaleShear(): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(): ...
    def get_value_no_scale_shear(): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimChannel_ACScalarSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getHpr(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getPos(): ...
    def getQuat(): ...
    def getRefCount(self, /): ...
    def getScale(): ...
    def getShear(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_hpr(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_pos(): ...
    def get_quat(): ...
    def get_ref_count(self, /): ...
    def get_scale(): ...
    def get_shear(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimControl:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    frac = None
    frame = None
    frame_rate = None
    full_fframe = None
    full_frame = None
    def getAnim(self, /): ...
    def getAnimModel(self, /): ...
    def getBoundJoints(self, /): ...
    def getChannelIndex(self, /): ...
    def getClassType(): ...
    def getFrac(self, /): ...
    def getFrame(self, /): ...
    def getFrameRate(self, /): ...
    def getFullFframe(self, /): ...
    def getFullFrame(self, /): ...
    def getName(self, /): ...
    def getNextFrame(self, /): ...
    def getNumFrames(self, /): ...
    def getPart(self, /): ...
    def getPendingDoneEvent(self, /): ...
    def getPlayRate(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_anim(self, /): ...
    def get_anim_model(self, /): ...
    def get_bound_joints(self, /): ...
    def get_channel_index(self, /): ...
    def get_class_type(): ...
    def get_frac(self, /): ...
    def get_frame(self, /): ...
    def get_frame_rate(self, /): ...
    def get_full_fframe(self, /): ...
    def get_full_frame(self, /): ...
    def get_name(self, /): ...
    def get_next_frame(self, /): ...
    def get_num_frames(self, /): ...
    def get_part(self, /): ...
    def get_pending_done_event(self, /): ...
    def get_play_rate(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasAnim(self, /): ...
    def hasName(self, /): ...
    def has_anim(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPending(self, /): ...
    def isPlaying(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_pending(self, /): ...
    def is_playing(self, /): ...
    def loop(): ...
    name = None
    next_frame = None
    num_frames = None
    def output(self, object, /): ...
    def pingpong(): ...
    def play(): ...
    play_rate = None
    playing = None
    def pose(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAnimModel(self, object, /): ...
    def setName(self, object, /): ...
    def setPendingDoneEvent(self, object, /): ...
    def setPlayRate(self, object, /): ...
    def set_anim_model(self, object, /): ...
    def set_name(self, object, /): ...
    def set_pending_done_event(self, object, /): ...
    def set_play_rate(self, object, /): ...
    def stop(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAnimInterface(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_AnimInterface(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def waitPending(self, /): ...
    def wait_pending(self, /): ...
class AnimControlCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearAnims(self, /): ...
    def clear_anims(self, /): ...
    def findAnim(self, object, /): ...
    def find_anim(self, object, /): ...
    def getAnim(self, object, /): ...
    def getAnimName(self, object, /): ...
    def getAnimNames(self, /): ...
    def getAnims(self, /): ...
    def getFrame(): ...
    def getNumAnims(self, /): ...
    def getNumFrames(): ...
    def get_anim(self, object, /): ...
    def get_anim_name(self, object, /): ...
    def get_anim_names(self, /): ...
    def get_anims(self, /): ...
    def get_frame(): ...
    def get_num_anims(self, /): ...
    def get_num_frames(): ...
    def isPlaying(): ...
    def is_playing(): ...
    def loop(): ...
    def loopAll(): ...
    def loop_all(): ...
    def output(self, object, /): ...
    def play(): ...
    def playAll(): ...
    def play_all(): ...
    def pose(): ...
    def poseAll(self, object, /): ...
    def pose_all(self, object, /): ...
    def stop(self, object, /): ...
    def stopAll(self, /): ...
    def stop_all(self, /): ...
    def storeAnim(): ...
    def store_anim(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unbindAnim(self, object, /): ...
    def unbind_anim(self, object, /): ...
    def whichAnimPlaying(self, /): ...
    def which_anim_playing(self, /): ...
    def write(self, object, /): ...
class AnimGroup:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    children = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class AnimInterface:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    frac = None
    frame = None
    frame_rate = None
    full_fframe = None
    full_frame = None
    def getClassType(): ...
    def getFrac(self, /): ...
    def getFrame(self, /): ...
    def getFrameRate(self, /): ...
    def getFullFframe(self, /): ...
    def getFullFrame(self, /): ...
    def getNextFrame(self, /): ...
    def getNumFrames(self, /): ...
    def getPlayRate(self, /): ...
    def get_class_type(): ...
    def get_frac(self, /): ...
    def get_frame(self, /): ...
    def get_frame_rate(self, /): ...
    def get_full_fframe(self, /): ...
    def get_full_frame(self, /): ...
    def get_next_frame(self, /): ...
    def get_num_frames(self, /): ...
    def get_play_rate(self, /): ...
    def isPlaying(self, /): ...
    def is_playing(self, /): ...
    def loop(): ...
    next_frame = None
    num_frames = None
    def output(self, object, /): ...
    def pingpong(): ...
    def play(): ...
    play_rate = None
    playing = None
    def pose(self, object, /): ...
    def setPlayRate(self, object, /): ...
    def set_play_rate(self, object, /): ...
    def stop(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class AnimPreloadTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAnim(): ...
    def addAnimsFrom(self, object, /): ...
    def add_anim(): ...
    def add_anims_from(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearAnims(self, /): ...
    def clear_anims(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findAnim(self, object, /): ...
    def find_anim(self, object, /): ...
    def getBamModified(self, /): ...
    def getBaseFrameRate(self, object, /): ...
    def getBasename(self, object, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getNumAnims(self, /): ...
    def getNumFrames(self, object, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_base_frame_rate(self, object, /): ...
    def get_basename(self, object, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_num_anims(self, /): ...
    def get_num_frames(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAnim(self, object, /): ...
    def remove_anim(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class AnimateVerticesRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class AntialiasAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MAuto:int = None
    MBetter:int = None
    MConstant:int = None
    MDontCare:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MFaster:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MLine:int = None
    MMultisample:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPoint:int = None
    MPointSprite:int = None
    MPolygon:int = None
    MTypeMask:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_auto:int = None
    M_better:int = None
    M_constant:int = None
    M_dont_care:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_faster:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_line:int = None
    M_multisample:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point:int = None
    M_point_sprite:int = None
    M_polygon:int = None
    M_type_mask:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getModeQuality(self, /): ...
    def getModeType(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_mode_quality(self, /): ...
    def get_mode_type(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    mode_quality = None
    mode_type = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class AsyncFuture:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def done(self, /): ...
    done_event = None
    def gather(): ...
    def getClassType(): ...
    def getDoneEvent(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_done_event(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def result(): ...
    def setDoneEvent(self, object, /): ...
    def setResult(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_result(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class AsyncTask:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class AsyncTaskChain:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getActiveTasks(self, /): ...
    def getClassType(): ...
    def getFrameBudget(self, /): ...
    def getFrameSync(self, /): ...
    def getName(self, /): ...
    def getNextWakeTime(self, /): ...
    def getNumRunningThreads(self, /): ...
    def getNumTasks(self, /): ...
    def getNumThreads(self, /): ...
    def getRefCount(self, /): ...
    def getSleepingTasks(self, /): ...
    def getTasks(self, /): ...
    def getThreadPriority(self, /): ...
    def getTickClock(self, /): ...
    def getTimeslicePriority(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active_tasks(self, /): ...
    def get_class_type(): ...
    def get_frame_budget(self, /): ...
    def get_frame_sync(self, /): ...
    def get_name(self, /): ...
    def get_next_wake_time(self, /): ...
    def get_num_running_threads(self, /): ...
    def get_num_tasks(self, /): ...
    def get_num_threads(self, /): ...
    def get_ref_count(self, /): ...
    def get_sleeping_tasks(self, /): ...
    def get_tasks(self, /): ...
    def get_thread_priority(self, /): ...
    def get_tick_clock(self, /): ...
    def get_timeslice_priority(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def hasTask(self, object, /): ...
    def has_name(self, /): ...
    def has_task(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isStarted(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_started(self, /): ...
    name = None
    def output(self, object, /): ...
    def poll(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setFrameBudget(self, object, /): ...
    def setFrameSync(self, object, /): ...
    def setName(self, object, /): ...
    def setNumThreads(self, object, /): ...
    def setThreadPriority(self, object, /): ...
    def setTickClock(self, object, /): ...
    def setTimeslicePriority(self, object, /): ...
    def set_frame_budget(self, object, /): ...
    def set_frame_sync(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_threads(self, object, /): ...
    def set_thread_priority(self, object, /): ...
    def set_tick_clock(self, object, /): ...
    def set_timeslice_priority(self, object, /): ...
    def startThreads(self, /): ...
    def start_threads(self, /): ...
    def stopThreads(self, /): ...
    def stop_threads(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def waitForTasks(self, /): ...
    def wait_for_tasks(self, /): ...
    def write(): ...
class AsyncTaskCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTask(self, object, /): ...
    def addTasksFrom(self, object, /): ...
    def add_task(self, object, /): ...
    def add_tasks_from(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def findTask(self, object, /): ...
    def find_task(self, object, /): ...
    def getNumTasks(self, /): ...
    def getTask(self, object, /): ...
    def getTasks(self, /): ...
    def get_num_tasks(self, /): ...
    def get_task(self, object, /): ...
    def get_tasks(self, /): ...
    def hasTask(self, object, /): ...
    def has_task(self, object, /): ...
    def output(self, object, /): ...
    def removeDuplicateTasks(self, /): ...
    def removeTask(self, object, /): ...
    def removeTasksFrom(self, object, /): ...
    def remove_duplicate_tasks(self, /): ...
    def remove_task(self, object, /): ...
    def remove_tasks_from(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class AsyncTaskManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active_tasks = None
    def add(self, object, /): ...
    def cleanup(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    clock = None
    def findTask(self, object, /): ...
    def findTaskChain(self, object, /): ...
    def findTasks(self, object, /): ...
    def findTasksMatching(self, object, /): ...
    def find_task(self, object, /): ...
    def find_task_chain(self, object, /): ...
    def find_tasks(self, object, /): ...
    def find_tasks_matching(self, object, /): ...
    def getActiveTasks(self, /): ...
    def getClassType(): ...
    def getClock(self, /): ...
    def getGlobalPtr(): ...
    def getName(self, /): ...
    def getNextWakeTime(self, /): ...
    def getNumTaskChains(self, /): ...
    def getNumTasks(self, /): ...
    def getRefCount(self, /): ...
    def getSleepingTasks(self, /): ...
    def getTaskChain(self, object, /): ...
    def getTaskChains(self, /): ...
    def getTasks(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active_tasks(self, /): ...
    def get_class_type(): ...
    def get_clock(self, /): ...
    def get_global_ptr(): ...
    def get_name(self, /): ...
    def get_next_wake_time(self, /): ...
    def get_num_task_chains(self, /): ...
    def get_num_tasks(self, /): ...
    def get_ref_count(self, /): ...
    def get_sleeping_tasks(self, /): ...
    def get_task_chain(self, object, /): ...
    def get_task_chains(self, /): ...
    def get_tasks(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def hasTask(self, object, /): ...
    def has_name(self, /): ...
    def has_task(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeTaskChain(self, object, /): ...
    def make_task_chain(self, object, /): ...
    name = None
    next_wake_time = None
    def output(self, object, /): ...
    def poll(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, object, /): ...
    def removeTaskChain(self, object, /): ...
    def remove_task_chain(self, object, /): ...
    def setClock(self, object, /): ...
    def setName(self, object, /): ...
    def set_clock(self, object, /): ...
    def set_name(self, object, /): ...
    sleeping_tasks = None
    def startThreads(self, /): ...
    def start_threads(self, /): ...
    def stopThreads(self, /): ...
    def stop_threads(self, /): ...
    tasks = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def waitForTasks(self, /): ...
    def wait_for_tasks(self, /): ...
    def write(): ...
class AsyncTaskPause:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class AsyncTaskSequence:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def addTask(self, object, /): ...
    def addTasksFrom(self, object, /): ...
    def add_done_callback(self, object, /): ...
    def add_task(self, object, /): ...
    def add_tasks_from(self, object, /): ...
    alive = None
    def assign(self, object, /): ...
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clear(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def findTask(self, object, /): ...
    def find_task(self, object, /): ...
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getCurrentTaskIndex(self, /): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getNumTasks(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getRepeatCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTask(self, object, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getTasks(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_current_task_index(self, /): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_num_tasks(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_repeat_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task(self, object, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_tasks(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def hasTask(self, object, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    def has_task(self, object, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def removeDuplicateTasks(self, /): ...
    def removeTask(self, object, /): ...
    def removeTasksFrom(self, object, /): ...
    def remove_duplicate_tasks(self, /): ...
    def remove_task(self, object, /): ...
    def remove_tasks_from(self, object, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setRepeatCount(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_repeat_count(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToAsyncTask(self, /): ...
    def upcastToAsyncTaskCollection(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_AsyncTask(self, /): ...
    def upcast_to_AsyncTaskCollection(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
    def write(): ...
class AttribNodeRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addNode(self, object, /): ...
    def add_node(self, object, /): ...
    def clear(self, /): ...
    def findNode(): ...
    def find_node(): ...
    def getGlobalPtr(): ...
    def getNode(self, object, /): ...
    def getNodeName(self, object, /): ...
    def getNodeType(self, object, /): ...
    def getNodes(self, /): ...
    def getNumNodes(self, /): ...
    def get_global_ptr(): ...
    def get_node(self, object, /): ...
    def get_node_name(self, object, /): ...
    def get_node_type(self, object, /): ...
    def get_nodes(self, /): ...
    def get_num_nodes(self, /): ...
    def lookupNode(self, object, /): ...
    def lookup_node(self, object, /): ...
    def output(self, object, /): ...
    def removeNode(self, object, /): ...
    def remove_node(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class AudioLoadRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAudioManager(self, /): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getFilename(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getPositional(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getSound(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_audio_manager(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_filename(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_positional(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_sound(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class AudioManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SMHeuristic:int = None
    SMSample:int = None
    SMStream:int = None
    SM_heuristic:int = None
    SM_sample:int = None
    SM_stream:int = None
    SPEAKERMODE5point1:int = None
    SPEAKERMODE7point1:int = None
    SPEAKERMODECOUNT:int = None
    SPEAKERMODEMax:int = None
    SPEAKERMODEMono:int = None
    SPEAKERMODEQuad:int = None
    SPEAKERMODERaw:int = None
    SPEAKERMODEStereo:int = None
    SPEAKERMODESurround:int = None
    SPEAKERMODE_5point1:int = None
    SPEAKERMODE_7point1:int = None
    SPEAKERMODE_COUNT:int = None
    SPEAKERMODE_max:int = None
    SPEAKERMODE_mono:int = None
    SPEAKERMODE_quad:int = None
    SPEAKERMODE_raw:int = None
    SPEAKERMODE_stereo:int = None
    SPEAKERMODE_surround:int = None
    SPKBackleft:int = None
    SPKBackright:int = None
    SPKCOUNT:int = None
    SPKCenter:int = None
    SPKFrontleft:int = None
    SPKFrontright:int = None
    SPKNone:int = None
    SPKSideleft:int = None
    SPKSideright:int = None
    SPKSub:int = None
    SPK_COUNT:int = None
    SPK_backleft:int = None
    SPK_backright:int = None
    SPK_center:int = None
    SPK_frontleft:int = None
    SPK_frontright:int = None
    SPK_none:int = None
    SPK_sideleft:int = None
    SPK_sideright:int = None
    SPK_sub:int = None
    def audio3dGetDistanceFactor(self, /): ...
    def audio3dGetDopplerFactor(self, /): ...
    def audio3dGetDropOffFactor(self, /): ...
    def audio3dSetDistanceFactor(self, object, /): ...
    def audio3dSetDopplerFactor(self, object, /): ...
    def audio3dSetDropOffFactor(self, object, /): ...
    def audio3dSetListenerAttributes(): ...
    def audio_3d_get_distance_factor(self, /): ...
    def audio_3d_get_doppler_factor(self, /): ...
    def audio_3d_get_drop_off_factor(self, /): ...
    def audio_3d_set_distance_factor(self, object, /): ...
    def audio_3d_set_doppler_factor(self, object, /): ...
    def audio_3d_set_drop_off_factor(self, object, /): ...
    def audio_3d_set_listener_attributes(): ...
    def clearCache(self, /): ...
    def clear_cache(self, /): ...
    def configureFilters(self, object, /): ...
    def configure_filters(self, object, /): ...
    def createAudioManager(): ...
    def create_AudioManager(): ...
    dls_pathname = None
    def getActive(self, /): ...
    def getCacheLimit(self, /): ...
    def getClassType(): ...
    def getConcurrentSoundLimit(self, /): ...
    def getDlsPathname(): ...
    def getNullSound(self, /): ...
    def getRefCount(self, /): ...
    def getSound(): ...
    def getSpeakerSetup(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_active(self, /): ...
    def get_cache_limit(self, /): ...
    def get_class_type(): ...
    def get_concurrent_sound_limit(self, /): ...
    def get_dls_pathname(): ...
    def get_null_sound(self, /): ...
    def get_ref_count(self, /): ...
    def get_sound(): ...
    def get_speaker_setup(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    def output(self, object, /): ...
    def reduceSoundsPlayingTo(self, object, /): ...
    def reduce_sounds_playing_to(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setActive(self, object, /): ...
    def setCacheLimit(self, object, /): ...
    def setConcurrentSoundLimit(): ...
    def setSpeakerConfiguration(): ...
    def setSpeakerSetup(self, object, /): ...
    def setVolume(self, object, /): ...
    def set_active(self, object, /): ...
    def set_cache_limit(self, object, /): ...
    def set_concurrent_sound_limit(): ...
    def set_speaker_configuration(): ...
    def set_speaker_setup(self, object, /): ...
    def set_volume(self, object, /): ...
    def shutdown(self, /): ...
    def stopAllSounds(self, /): ...
    def stop_all_sounds(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def uncacheSound(self, object, /): ...
    def uncache_sound(self, object, /): ...
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def update(self, /): ...
    def write(self, object, /): ...
class AudioSound:
    ...
    BAD:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    PLAYING:int = None
    READY:int = None
    def configureFilters(self, object, /): ...
    def configure_filters(self, object, /): ...
    def get3dMaxDistance(self, /): ...
    def get3dMinDistance(self, /): ...
    def getActive(self, /): ...
    def getBalance(self, /): ...
    def getClassType(): ...
    def getFinishedEvent(self, /): ...
    def getLoop(self, /): ...
    def getLoopCount(self, /): ...
    def getName(self, /): ...
    def getPlayRate(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSpeakerLevel(self, object, /): ...
    def getSpeakerMix(self, object, /): ...
    def getTime(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_3d_max_distance(self, /): ...
    def get_3d_min_distance(self, /): ...
    def get_active(self, /): ...
    def get_balance(self, /): ...
    def get_class_type(): ...
    def get_finished_event(self, /): ...
    def get_loop(self, /): ...
    def get_loop_count(self, /): ...
    def get_name(self, /): ...
    def get_play_rate(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_speaker_level(self, object, /): ...
    def get_speaker_mix(self, object, /): ...
    def get_time(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def output(self, object, /): ...
    def play(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def set3dAttributes(): ...
    def set3dMaxDistance(self, object, /): ...
    def set3dMinDistance(self, object, /): ...
    def setActive(): ...
    def setBalance(): ...
    def setFinishedEvent(self, object, /): ...
    def setLoop(): ...
    def setLoopCount(): ...
    def setPlayRate(): ...
    def setPriority(self, object, /): ...
    def setSpeakerLevels(): ...
    def setSpeakerMix(): ...
    def setTime(): ...
    def setVolume(): ...
    def set_3d_attributes(): ...
    def set_3d_max_distance(self, object, /): ...
    def set_3d_min_distance(self, object, /): ...
    def set_active(): ...
    def set_balance(): ...
    def set_finished_event(self, object, /): ...
    def set_loop(): ...
    def set_loop_count(): ...
    def set_play_rate(): ...
    def set_priority(self, object, /): ...
    def set_speaker_levels(): ...
    def set_speaker_mix(): ...
    def set_time(): ...
    def set_volume(): ...
    def status(self, /): ...
    def stop(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class AudioVolumeAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def getVolume(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def get_volume(self, /): ...
    def hasVolume(self, /): ...
    def has_volume(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def makeIdentity(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_identity(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setVolume(self, object, /): ...
    def set_volume(self, object, /): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    volume = None
    def write(): ...
class AuxBitplaneAttrib:
    ...
    ABOAuxGlow:int = None
    ABOAuxNormal:int = None
    ABOGlow:int = None
    ABO_aux_glow:int = None
    ABO_aux_normal:int = None
    ABO_glow:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getOutputs(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_outputs(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    outputs = None
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class AuxSceneData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getDuration(self, /): ...
    def getExpirationTime(self, /): ...
    def getLastRenderTime(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_duration(self, /): ...
    def get_expiration_time(self, /): ...
    def get_last_render_time(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setDuration(self, object, /): ...
    def setLastRenderTime(self, object, /): ...
    def set_duration(self, object, /): ...
    def set_last_render_time(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
class BamCache:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active = None
    cache_compiled_shaders = None
    cache_compressed_textures = None
    cache_max_kbytes = None
    cache_models = None
    cache_textures = None
    def considerFlushGlobalIndex(): ...
    def considerFlushIndex(self, /): ...
    def consider_flush_global_index(): ...
    def consider_flush_index(self, /): ...
    def flushGlobalIndex(): ...
    def flushIndex(self, /): ...
    def flush_global_index(): ...
    def flush_index(self, /): ...
    flush_time = None
    def getActive(self, /): ...
    def getCacheCompiledShaders(self, /): ...
    def getCacheCompressedTextures(self, /): ...
    def getCacheMaxKbytes(self, /): ...
    def getCacheModels(self, /): ...
    def getCacheTextures(self, /): ...
    def getFlushTime(self, /): ...
    def getGlobalPtr(): ...
    def getReadOnly(self, /): ...
    def getRoot(self, /): ...
    def get_active(self, /): ...
    def get_cache_compiled_shaders(self, /): ...
    def get_cache_compressed_textures(self, /): ...
    def get_cache_max_kbytes(self, /): ...
    def get_cache_models(self, /): ...
    def get_cache_textures(self, /): ...
    def get_flush_time(self, /): ...
    def get_global_ptr(): ...
    def get_read_only(self, /): ...
    def get_root(self, /): ...
    def listIndex(): ...
    def list_index(): ...
    def lookup(): ...
    read_only = None
    root = None
    def setActive(self, object, /): ...
    def setCacheCompiledShaders(self, object, /): ...
    def setCacheCompressedTextures(self, object, /): ...
    def setCacheMaxKbytes(self, object, /): ...
    def setCacheModels(self, object, /): ...
    def setCacheTextures(self, object, /): ...
    def setFlushTime(self, object, /): ...
    def setReadOnly(self, object, /): ...
    def setRoot(self, object, /): ...
    def set_active(self, object, /): ...
    def set_cache_compiled_shaders(self, object, /): ...
    def set_cache_compressed_textures(self, object, /): ...
    def set_cache_max_kbytes(self, object, /): ...
    def set_cache_models(self, object, /): ...
    def set_cache_textures(self, object, /): ...
    def set_flush_time(self, object, /): ...
    def set_read_only(self, object, /): ...
    def set_root(self, object, /): ...
    def store(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class BamCacheRecord:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addDependentFile(self, object, /): ...
    def add_dependent_file(self, object, /): ...
    cache_filename = None
    def clearData(self, /): ...
    def clearDependentFiles(self, /): ...
    def clear_data(self, /): ...
    def clear_dependent_files(self, /): ...
    data = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def dependentsUnchanged(self, /): ...
    def dependents_unchanged(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCacheFilename(self, /): ...
    def getClassType(): ...
    def getData(self, /): ...
    def getDependentPathname(self, object, /): ...
    def getNumDependentFiles(self, /): ...
    def getRecordedTime(self, /): ...
    def getRefCount(self, /): ...
    def getSourcePathname(self, /): ...
    def getSourceTimestamp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_filename(self, /): ...
    def get_class_type(): ...
    def get_data(self, /): ...
    def get_dependent_pathname(self, object, /): ...
    def get_num_dependent_files(self, /): ...
    def get_recorded_time(self, /): ...
    def get_ref_count(self, /): ...
    def get_source_pathname(self, /): ...
    def get_source_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasData(self, /): ...
    def has_data(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    recorded_time = None
    def ref(self, /): ...
    ref_count = None
    def setData(): ...
    def set_data(): ...
    source_pathname = None
    source_timestamp = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class BamEnums:
    ...
    BEBigendian:int = None
    BELittleendian:int = None
    BENative:int = None
    BE_bigendian:int = None
    BE_littleendian:int = None
    BE_native:int = None
    BOCAdjunct:int = None
    BOCFileData:int = None
    BOCPop:int = None
    BOCPush:int = None
    BOCRemove:int = None
    BOC_adjunct:int = None
    BOC_file_data:int = None
    BOC_pop:int = None
    BOC_push:int = None
    BOC_remove:int = None
    BTMBasename:int = None
    BTMFullpath:int = None
    BTMRawdata:int = None
    BTMRelative:int = None
    BTMUnchanged:int = None
    BTM_basename:int = None
    BTM_fullpath:int = None
    BTM_rawdata:int = None
    BTM_relative:int = None
    BTM_unchanged:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class BamFile:
    ...
    BEBigendian:int = None
    BELittleendian:int = None
    BENative:int = None
    BE_bigendian:int = None
    BE_littleendian:int = None
    BE_native:int = None
    BOCAdjunct:int = None
    BOCFileData:int = None
    BOCPop:int = None
    BOCPush:int = None
    BOCRemove:int = None
    BOC_adjunct:int = None
    BOC_file_data:int = None
    BOC_pop:int = None
    BOC_push:int = None
    BOC_remove:int = None
    BTMBasename:int = None
    BTMFullpath:int = None
    BTMRawdata:int = None
    BTMRelative:int = None
    BTMUnchanged:int = None
    BTM_basename:int = None
    BTM_fullpath:int = None
    BTM_rawdata:int = None
    BTM_relative:int = None
    BTM_unchanged:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    file_endian = None
    file_stdfloat_double = None
    file_version = None
    def getCurrentMajorVer(self, /): ...
    def getCurrentMinorVer(self, /): ...
    def getFileEndian(self, /): ...
    def getFileMajorVer(self, /): ...
    def getFileMinorVer(self, /): ...
    def getFileStdfloatDouble(self, /): ...
    def getReader(self, /): ...
    def getWriter(self, /): ...
    def get_current_major_ver(self, /): ...
    def get_current_minor_ver(self, /): ...
    def get_file_endian(self, /): ...
    def get_file_major_ver(self, /): ...
    def get_file_minor_ver(self, /): ...
    def get_file_stdfloat_double(self, /): ...
    def get_reader(self, /): ...
    def get_writer(self, /): ...
    def isEof(self, /): ...
    def isValidRead(self, /): ...
    def isValidWrite(self, /): ...
    def is_eof(self, /): ...
    def is_valid_read(self, /): ...
    def is_valid_write(self, /): ...
    def openRead(): ...
    def openWrite(): ...
    def open_read(): ...
    def open_write(): ...
    def readNode(): ...
    def readObject(self, /): ...
    def read_node(): ...
    def read_object(self, /): ...
    reader = None
    def resolve(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeObject(self, object, /): ...
    def write_object(self, object, /): ...
    writer = None
class BamReader:
    ...
    BEBigendian:int = None
    BELittleendian:int = None
    BENative:int = None
    BE_bigendian:int = None
    BE_littleendian:int = None
    BE_native:int = None
    BOCAdjunct:int = None
    BOCFileData:int = None
    BOCPop:int = None
    BOCPush:int = None
    BOCRemove:int = None
    BOC_adjunct:int = None
    BOC_file_data:int = None
    BOC_pop:int = None
    BOC_push:int = None
    BOC_remove:int = None
    BTMBasename:int = None
    BTMFullpath:int = None
    BTMRawdata:int = None
    BTMRelative:int = None
    BTMUnchanged:int = None
    BTM_basename:int = None
    BTM_fullpath:int = None
    BTM_rawdata:int = None
    BTM_relative:int = None
    BTM_unchanged:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def changePointer(): ...
    def change_pointer(): ...
    file_endian = None
    file_stdfloat_double = None
    file_version = None
    filename = None
    def getCurrentMajorVer(self, /): ...
    def getCurrentMinorVer(self, /): ...
    def getFileEndian(self, /): ...
    def getFileMajorVer(self, /): ...
    def getFileMinorVer(self, /): ...
    def getFileStdfloatDouble(self, /): ...
    def getFileVersion(self, /): ...
    def getFilename(self, /): ...
    def getLoaderOptions(self, /): ...
    def getSource(self, /): ...
    def get_current_major_ver(self, /): ...
    def get_current_minor_ver(self, /): ...
    def get_file_endian(self, /): ...
    def get_file_major_ver(self, /): ...
    def get_file_minor_ver(self, /): ...
    def get_file_stdfloat_double(self, /): ...
    def get_file_version(self, /): ...
    def get_filename(self, /): ...
    def get_loader_options(self, /): ...
    def get_source(self, /): ...
    def init(self, /): ...
    def isEof(self, /): ...
    def is_eof(self, /): ...
    loader_options = None
    def readObject(self, /): ...
    def read_object(self, /): ...
    def registerFactory(): ...
    def register_factory(): ...
    def resolve(self, /): ...
    def setLoaderOptions(self, object, /): ...
    def setSource(self, object, /): ...
    def set_loader_options(self, object, /): ...
    def set_source(self, object, /): ...
    source = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class BamWriter:
    ...
    BEBigendian:int = None
    BELittleendian:int = None
    BENative:int = None
    BE_bigendian:int = None
    BE_littleendian:int = None
    BE_native:int = None
    BOCAdjunct:int = None
    BOCFileData:int = None
    BOCPop:int = None
    BOCPush:int = None
    BOCRemove:int = None
    BOC_adjunct:int = None
    BOC_file_data:int = None
    BOC_pop:int = None
    BOC_push:int = None
    BOC_remove:int = None
    BTMBasename:int = None
    BTMFullpath:int = None
    BTMRawdata:int = None
    BTMRelative:int = None
    BTMUnchanged:int = None
    BTM_basename:int = None
    BTM_fullpath:int = None
    BTM_rawdata:int = None
    BTM_relative:int = None
    BTM_unchanged:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    file_endian = None
    file_stdfloat_double = None
    file_texture_mode = None
    file_version = None
    filename = None
    def flush(self, /): ...
    def getFileEndian(self, /): ...
    def getFileMajorVer(self, /): ...
    def getFileMinorVer(self, /): ...
    def getFileStdfloatDouble(self, /): ...
    def getFileTextureMode(self, /): ...
    def getFilename(self, /): ...
    def getRootNode(self, /): ...
    def getTarget(self, /): ...
    def get_file_endian(self, /): ...
    def get_file_major_ver(self, /): ...
    def get_file_minor_ver(self, /): ...
    def get_file_stdfloat_double(self, /): ...
    def get_file_texture_mode(self, /): ...
    def get_filename(self, /): ...
    def get_root_node(self, /): ...
    def get_target(self, /): ...
    def hasObject(self, object, /): ...
    def has_object(self, object, /): ...
    def init(self, /): ...
    root_node = None
    def setFileMinorVer(self, object, /): ...
    def setFileTextureMode(self, object, /): ...
    def setRootNode(self, object, /): ...
    def setTarget(self, object, /): ...
    def set_file_minor_ver(self, object, /): ...
    def set_file_texture_mode(self, object, /): ...
    def set_root_node(self, object, /): ...
    def set_target(self, object, /): ...
    target = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeObject(self, object, /): ...
    def write_object(self, object, /): ...
class BasicIosChar:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def good(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class BillboardEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getAxialRotate(self, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getEyeRelative(self, /): ...
    def getFixedDepth(self, /): ...
    def getLookAt(self, /): ...
    def getLookAtPoint(self, /): ...
    def getNumEffects(): ...
    def getOffset(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUpVector(self, /): ...
    def get_axial_rotate(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_eye_relative(self, /): ...
    def get_fixed_depth(self, /): ...
    def get_look_at(self, /): ...
    def get_look_at_point(self, /): ...
    def get_num_effects(): ...
    def get_offset(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_up_vector(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def makeAxis(): ...
    def makePointEye(): ...
    def makePointWorld(): ...
    def make_axis(): ...
    def make_point_eye(): ...
    def make_point_world(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class BindAnimRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    filename = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getFilename(self, /): ...
    def getLoader(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getModel(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getOptions(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_filename(self, /): ...
    def get_loader(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_model(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_options(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    loader = None
    manager = None
    max_dt = None
    name = None
    options = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class BitArray:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestBits(self, /): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumBitsPerWord(): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getNumWords(self, /): ...
    def getWord(self, object, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_bits(self, /): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_bits_per_word(): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_num_words(self, /): ...
    def get_word(self, object, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    num_bits_per_word:int = None
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask16:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask32:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask64:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMaskUint16T16:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMaskUint32T32:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMaskUint64T64:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask_uint16_t_16:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask_uint32_t_32:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BitMask_uint64_t_64:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class BoundingBox:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getMax(self, /): ...
    def getMin(self, /): ...
    def getNumPlanes(self, /): ...
    def getNumPoints(self, /): ...
    def getPlane(self, object, /): ...
    def getPlanes(self, /): ...
    def getPoint(self, object, /): ...
    def getPoints(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_max(self, /): ...
    def get_min(self, /): ...
    def get_num_planes(self, /): ...
    def get_num_points(self, /): ...
    def get_plane(self, object, /): ...
    def get_planes(self, /): ...
    def get_point(self, object, /): ...
    def get_points(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    max = None
    min = None
    def output(self, object, /): ...
    planes = None
    points = None
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def setMinMax(): ...
    def set_infinite(self, /): ...
    def set_min_max(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    volume = None
    def write(): ...
    def xform(self, object, /): ...
class BoundingHexahedron:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getMax(self, /): ...
    def getMin(self, /): ...
    def getNumPlanes(self, /): ...
    def getNumPoints(self, /): ...
    def getPlane(self, object, /): ...
    def getPlanes(self, /): ...
    def getPoint(self, object, /): ...
    def getPoints(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_max(self, /): ...
    def get_min(self, /): ...
    def get_num_planes(self, /): ...
    def get_num_points(self, /): ...
    def get_plane(self, object, /): ...
    def get_planes(self, /): ...
    def get_point(self, object, /): ...
    def get_points(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    max = None
    min = None
    def output(self, object, /): ...
    planes = None
    points = None
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    volume = None
    def write(): ...
    def xform(self, object, /): ...
class BoundingLine:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getPointA(self, /): ...
    def getPointB(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_point_a(self, /): ...
    def get_point_b(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class BoundingPlane:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getPlane(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_plane(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    plane = None
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class BoundingSphere:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    center = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getMax(self, /): ...
    def getMin(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_approx_center(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_max(self, /): ...
    def get_min(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    max = None
    min = None
    def output(self, object, /): ...
    radius = None
    def ref(self, /): ...
    ref_count = None
    def setCenter(self, object, /): ...
    def setInfinite(self, /): ...
    def setRadius(self, object, /): ...
    def set_center(self, object, /): ...
    def set_infinite(self, /): ...
    def set_radius(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    volume = None
    def write(): ...
    def xform(self, object, /): ...
class BoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(self, object, /): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
class Buffer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getLength(self, /): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_length(self, /): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class BufferContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active = None
    data_size_bytes = None
    def getActive(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getModified(self, /): ...
    def getResident(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_modified(self, /): ...
    def get_resident(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    modified = None
    object = None
    resident = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcastToSavedContext(self, /): ...
    def upcast_to_SavedContext(self, /): ...
class BufferedDatagramConnection:
    ...
    def Active(self, /): ...
    def ActiveOpen(): ...
    def ActiveOpenNonBlocking(self, object, /): ...
    def AddAddress(self, object, /): ...
    def AddressQueueSize(self, /): ...
    def ClearAddresses(self, /): ...
    def Close(self, /): ...
    def DoConnect(self, /): ...
    def DontLinger(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def ErrorIsWouldBlocking(self, object, /): ...
    def ErrorIs_WouldBlocking(self, object, /): ...
    def Flush(self, /): ...
    def GetLastError(): ...
    def GetMessage(self, object, /): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def IsConnected(self, /): ...
    def RecvData(self, object, /): ...
    def Reset(self, /): ...
    def SendData(self, object, /): ...
    def SendMessage(self, object, /): ...
    def SetBlocking(self, /): ...
    def SetLinger(): ...
    def SetNoDelay(): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSendBufferSize(self, object, /): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def ShutdownSend(self, /): ...
    def WaitForNetworkReadEvent(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Buffered_DatagramConnection:
    ...
    def Active(self, /): ...
    def ActiveOpen(): ...
    def ActiveOpenNonBlocking(self, object, /): ...
    def AddAddress(self, object, /): ...
    def AddressQueueSize(self, /): ...
    def ClearAddresses(self, /): ...
    def Close(self, /): ...
    def DoConnect(self, /): ...
    def DontLinger(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def ErrorIsWouldBlocking(self, object, /): ...
    def ErrorIs_WouldBlocking(self, object, /): ...
    def Flush(self, /): ...
    def GetLastError(): ...
    def GetMessage(self, object, /): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def IsConnected(self, /): ...
    def RecvData(self, object, /): ...
    def Reset(self, /): ...
    def SendData(self, object, /): ...
    def SendMessage(self, object, /): ...
    def SetBlocking(self, /): ...
    def SetLinger(): ...
    def SetNoDelay(): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSendBufferSize(self, object, /): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def ShutdownSend(self, /): ...
    def WaitForNetworkReadEvent(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class ButtonEvent:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    TCandidate:int = None
    TDown:int = None
    TKeystroke:int = None
    TMove:int = None
    TRawDown:int = None
    TRawUp:int = None
    TRepeat:int = None
    TResumeDown:int = None
    TUp:int = None
    T_candidate:int = None
    T_down:int = None
    T_keystroke:int = None
    T_move:int = None
    T_raw_down:int = None
    T_raw_up:int = None
    T_repeat:int = None
    T_resume_down:int = None
    T_up:int = None
    button = None
    keycode = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    time = None
    type = None
class ButtonEventList:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addEvent(self, object, /): ...
    def addEvents(self, object, /): ...
    def add_event(self, object, /): ...
    def add_events(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    events = None
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getEvent(self, object, /): ...
    def getNumEvents(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_event(self, object, /): ...
    def get_num_events(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def updateMods(self, object, /): ...
    def update_mods(self, object, /): ...
    def write(): ...
class ButtonHandle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    alias = None
    ascii_equivalent = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getAlias(self, /): ...
    def getAsciiEquivalent(self, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getIndex(self, /): ...
    def getName(self, /): ...
    def get_alias(self, /): ...
    def get_ascii_equivalent(self, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_index(self, /): ...
    def get_name(self, /): ...
    def hasAsciiEquivalent(self, /): ...
    def has_ascii_equivalent(self, /): ...
    index = None
    def matches(self, object, /): ...
    name = None
    def none(): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ButtonMap:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getMappedButton(self, object, /): ...
    def getMappedButtonLabel(self, object, /): ...
    def getNumButtons(self, /): ...
    def getRawButton(self, object, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_mapped_button(self, object, /): ...
    def get_mapped_button_label(self, object, /): ...
    def get_num_buttons(self, /): ...
    def get_raw_button(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
class ButtonNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getButtonMap(self, object, /): ...
    def getButtonState(self, object, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumButtons(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_button_map(self, object, /): ...
    def get_button_state(self, object, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_buttons(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isButtonKnown(self, object, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_button_known(self, object, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setButtonMap(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_button_map(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class ButtonRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def findAsciiButton(self, object, /): ...
    def findButton(self, object, /): ...
    def find_ascii_button(self, object, /): ...
    def find_button(self, object, /): ...
    def getButton(self, object, /): ...
    def get_button(self, object, /): ...
    def ptr(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class ButtonThrower:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addParameter(self, object, /): ...
    def addStashed(): ...
    def addThrowButton(): ...
    def add_child(): ...
    def add_parameter(self, object, /): ...
    def add_stashed(): ...
    def add_throw_button(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    button_down_event = None
    button_repeat_event = None
    button_up_event = None
    candidate_event = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearThrowButtons(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_throw_buttons(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getButtonDownEvent(self, /): ...
    def getButtonRepeatEvent(self, /): ...
    def getButtonUpEvent(self, /): ...
    def getCandidateEvent(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getModifierButtons(self, /): ...
    def getMoveEvent(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParameters(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParameter(self, object, /): ...
    def getParameters(self, /): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrefix(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRawButtonDownEvent(self, /): ...
    def getRawButtonUpEvent(self, /): ...
    def getRefCount(self, /): ...
    def getSpecificFlag(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getThrowButtonsActive(self, /): ...
    def getTimeFlag(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_button_down_event(self, /): ...
    def get_button_repeat_event(self, /): ...
    def get_button_up_event(self, /): ...
    def get_candidate_event(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_modifier_buttons(self, /): ...
    def get_move_event(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parameters(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parameter(self, object, /): ...
    def get_parameters(self, /): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prefix(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_raw_button_down_event(self, /): ...
    def get_raw_button_up_event(self, /): ...
    def get_ref_count(self, /): ...
    def get_specific_flag(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_throw_buttons_active(self, /): ...
    def get_time_flag(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasThrowButton(): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_throw_button(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    keystroke_event = None
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    modifier_buttons = None
    move_event = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parameters = None
    parents = None
    prefix = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    raw_button_down_event = None
    raw_button_up_event = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def removeThrowButton(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def remove_throw_button(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setButtonDownEvent(self, object, /): ...
    def setButtonRepeatEvent(self, object, /): ...
    def setButtonUpEvent(self, object, /): ...
    def setCandidateEvent(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setKeystrokeEvent(self, object, /): ...
    def setModifierButtons(self, object, /): ...
    def setMoveEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrefix(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRawButtonDownEvent(self, object, /): ...
    def setRawButtonUpEvent(self, object, /): ...
    def setSpecificFlag(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setThrowButtonsActive(self, object, /): ...
    def setTimeFlag(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_button_down_event(self, object, /): ...
    def set_button_repeat_event(self, object, /): ...
    def set_button_up_event(self, object, /): ...
    def set_candidate_event(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_keystroke_event(self, object, /): ...
    def set_modifier_buttons(self, object, /): ...
    def set_move_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prefix(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_raw_button_down_event(self, object, /): ...
    def set_raw_button_up_event(self, object, /): ...
    def set_specific_flag(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_throw_buttons_active(self, object, /): ...
    def set_time_flag(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    specific_flag = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    throw_buttons_active = None
    time_flag = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class CPTADouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTALVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAMat3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAMat3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAMat4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAMat4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAStdfloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAUchar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTAVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_LVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_stdfloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CPTA_uchar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
CSDefault:int = None
CSInvalid:int = None
CSLinear:int = None
CSSRGB:int = None
CSScRGB:int = None
CSUnspecified:int = None
CSYupLeft:int = None
CSYupRight:int = None
CSZupLeft:int = None
CSZupRight:int = None
CS_default:int = None
CS_invalid:int = None
CS_linear:int = None
CS_sRGB:int = None
CS_scRGB:int = None
CS_unspecified:int = None
CS_yup_left:int = None
CS_yup_right:int = None
CS_zup_left:int = None
CS_zup_right:int = None
class CachedTypedWritableReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class CallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
class CallbackGraphicsWindow:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class EventsCallbackData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def getWindow(self, /): ...
        def get_class_type(): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def get_window(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def upcall(self, /): ...
        window = None
    FMParasite:int = None
    FMRefresh:int = None
    FMRender:int = None
    FM_parasite:int = None
    FM_refresh:int = None
    FM_render:int = None
    class PropertiesCallbackData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getProperties(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def getWindow(self, /): ...
        def get_class_type(): ...
        def get_properties(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def get_window(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def upcall(self, /): ...
        window = None
    RCTBeginFlip:int = None
    RCTBeginFrame:int = None
    RCTEndFlip:int = None
    RCTEndFrame:int = None
    RCT_begin_flip:int = None
    RCT_begin_frame:int = None
    RCT_end_flip:int = None
    RCT_end_frame:int = None
    RTMBindLayered:int = None
    RTMBindOrCopy:int = None
    RTMCopyRam:int = None
    RTMCopyTexture:int = None
    RTMNone:int = None
    RTMTriggeredCopyRam:int = None
    RTMTriggeredCopyTexture:int = None
    RTM_bind_layered:int = None
    RTM_bind_or_copy:int = None
    RTM_copy_ram:int = None
    RTM_copy_texture:int = None
    RTM_none:int = None
    RTM_triggered_copy_ram:int = None
    RTM_triggered_copy_texture:int = None
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    class RenderCallbackData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        callback_type = None
        frame_mode = None
        def getCallbackType(self, /): ...
        def getClassType(): ...
        def getFrameMode(self, /): ...
        def getRenderFlag(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def getWindow(self, /): ...
        def get_callback_type(self, /): ...
        def get_class_type(): ...
        def get_frame_mode(self, /): ...
        def get_render_flag(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def get_window(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        render_flag = None
        def setRenderFlag(self, object, /): ...
        def set_render_flag(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def upcall(self, /): ...
        window = None
    class WindowCallbackData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def getWindow(self, /): ...
        def get_class_type(): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def get_window(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def upcall(self, /): ...
        window = None
    active = None
    active_display_regions = None
    def addRenderTexture(): ...
    def add_render_texture(): ...
    child_sort = None
    def clearChildSort(self, /): ...
    def clearDeleteFlag(self, /): ...
    def clearEventsCallback(self, /): ...
    def clearPropertiesCallback(self, /): ...
    def clearRejectedProperties(self, /): ...
    def clearRenderCallback(self, /): ...
    def clearRenderTextures(self, /): ...
    def clear_child_sort(self, /): ...
    clear_color = None
    def clear_delete_flag(self, /): ...
    clear_depth = None
    def clear_events_callback(self, /): ...
    def clear_properties_callback(self, /): ...
    def clear_rejected_properties(self, /): ...
    def clear_render_callback(self, /): ...
    def clear_render_textures(self, /): ...
    clear_stencil = None
    def closeIme(self, /): ...
    def close_ime(self, /): ...
    close_request_event = None
    closed = None
    def countTextures(self, /): ...
    def count_textures(self, /): ...
    def createInputDevice(self, object, /): ...
    def create_input_device(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disableClears(self, /): ...
    def disablePointerEvents(self, object, /): ...
    def disable_clears(self, /): ...
    def disable_pointer_events(self, object, /): ...
    display_regions = None
    def enablePointerEvents(self, object, /): ...
    def enable_pointer_events(self, object, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    engine = None
    fb_size = None
    def fillin(): ...
    def flipReady(self, /): ...
    def flip_ready(self, /): ...
    def getActiveDisplayRegion(self, object, /): ...
    def getActiveDisplayRegions(self, /): ...
    def getBamModified(self, /): ...
    def getChildSort(self, /): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getCloseRequestEvent(self, /): ...
    def getDeleteFlag(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getEngine(self, /): ...
    def getEventsCallback(self, /): ...
    def getFbProperties(self, /): ...
    def getFbSize(self, /): ...
    def getFbXSize(self, /): ...
    def getFbYSize(self, /): ...
    def getGsg(self, /): ...
    def getHost(self, /): ...
    def getInputDevice(self, object, /): ...
    def getInputDeviceName(self, object, /): ...
    def getInputDeviceNames(self, /): ...
    def getInputDevices(self, /): ...
    def getInverted(self, /): ...
    def getKeyboardMap(self, /): ...
    def getLeftEyeColorMask(self, /): ...
    def getName(self, /): ...
    def getNumActiveDisplayRegions(self, /): ...
    def getNumDisplayRegions(self, /): ...
    def getNumInputDevices(self, /): ...
    def getOneShot(self, /): ...
    def getOverlayDisplayRegion(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getPointer(self, object, /): ...
    def getProperties(self, /): ...
    def getPropertiesCallback(self, /): ...
    def getRedBlueStereo(self, /): ...
    def getRefCount(self, /): ...
    def getRejectedProperties(self, /): ...
    def getRenderCallback(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRequestedProperties(self, /): ...
    def getRightEyeColorMask(self, /): ...
    def getRtmMode(): ...
    def getSbsLeftDimensions(self, /): ...
    def getSbsLeftSize(self, /): ...
    def getSbsLeftXSize(self, /): ...
    def getSbsLeftYSize(self, /): ...
    def getSbsRightDimensions(self, /): ...
    def getSbsRightSize(self, /): ...
    def getSbsRightXSize(self, /): ...
    def getSbsRightYSize(self, /): ...
    def getScreenshot(): ...
    def getSideBySideStereo(self, /): ...
    def getSize(self, /): ...
    def getSort(self, /): ...
    def getSupportsRenderTexture(self, /): ...
    def getSwapEyes(self, /): ...
    def getTexture(): ...
    def getTextureCard(self, /): ...
    def getTexturePlane(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexposedDraw(self, /): ...
    def getWindowEvent(self, /): ...
    def getWindowHandle(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_active_display_region(self, object, /): ...
    def get_active_display_regions(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child_sort(self, /): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_close_request_event(self, /): ...
    def get_delete_flag(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_engine(self, /): ...
    def get_events_callback(self, /): ...
    def get_fb_properties(self, /): ...
    def get_fb_size(self, /): ...
    def get_fb_x_size(self, /): ...
    def get_fb_y_size(self, /): ...
    def get_gsg(self, /): ...
    def get_host(self, /): ...
    def get_input_device(self, object, /): ...
    def get_input_device_name(self, object, /): ...
    def get_input_device_names(self, /): ...
    def get_input_devices(self, /): ...
    def get_inverted(self, /): ...
    def get_keyboard_map(self, /): ...
    def get_left_eye_color_mask(self, /): ...
    def get_name(self, /): ...
    def get_num_active_display_regions(self, /): ...
    def get_num_display_regions(self, /): ...
    def get_num_input_devices(self, /): ...
    def get_one_shot(self, /): ...
    def get_overlay_display_region(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_pointer(self, object, /): ...
    def get_properties(self, /): ...
    def get_properties_callback(self, /): ...
    def get_red_blue_stereo(self, /): ...
    def get_ref_count(self, /): ...
    def get_rejected_properties(self, /): ...
    def get_render_callback(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_requested_properties(self, /): ...
    def get_right_eye_color_mask(self, /): ...
    def get_rtm_mode(): ...
    def get_sbs_left_dimensions(self, /): ...
    def get_sbs_left_size(self, /): ...
    def get_sbs_left_x_size(self, /): ...
    def get_sbs_left_y_size(self, /): ...
    def get_sbs_right_dimensions(self, /): ...
    def get_sbs_right_size(self, /): ...
    def get_sbs_right_x_size(self, /): ...
    def get_sbs_right_y_size(self, /): ...
    def get_screenshot(): ...
    def get_side_by_side_stereo(self, /): ...
    def get_size(self, /): ...
    def get_sort(self, /): ...
    def get_supports_render_texture(self, /): ...
    def get_swap_eyes(self, /): ...
    def get_texture(): ...
    def get_texture_card(self, /): ...
    def get_texture_plane(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexposed_draw(self, /): ...
    def get_window_event(self, /): ...
    def get_window_handle(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    gsg = None
    def hasKeyboard(self, object, /): ...
    def hasPointer(self, object, /): ...
    def hasSize(self, /): ...
    def hasTexture(self, /): ...
    def has_keyboard(self, object, /): ...
    def has_pointer(self, object, /): ...
    def has_size(self, /): ...
    def has_texture(self, /): ...
    inverted = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isClosed(self, /): ...
    def isExactType(self, object, /): ...
    def isFullscreen(self, /): ...
    def isNonzeroSize(self, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_closed(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_fullscreen(self, /): ...
    def is_nonzero_size(self, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    def is_valid(self, /): ...
    def makeCubeMap(): ...
    def makeDisplayRegion(): ...
    def makeMonoDisplayRegion(): ...
    def makeScreenshotFilename(): ...
    def makeStereoDisplayRegion(): ...
    def makeTextureBuffer(): ...
    def make_cube_map(): ...
    def make_display_region(): ...
    def make_mono_display_region(): ...
    def make_screenshot_filename(): ...
    def make_stereo_display_region(): ...
    def make_texture_buffer(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def movePointer(): ...
    def move_pointer(): ...
    name = None
    one_shot = None
    pipe = None
    pixel_factor = None
    pixel_zoom = None
    properties = None
    def ref(self, /): ...
    ref_count = None
    rejected_properties = None
    def removeAllDisplayRegions(self, /): ...
    def removeDisplayRegion(self, object, /): ...
    def remove_all_display_regions(self, /): ...
    def remove_display_region(self, object, /): ...
    def requestProperties(self, object, /): ...
    def request_properties(self, object, /): ...
    requested_properties = None
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    sbs_left_size = None
    sbs_right_size = None
    def setActive(self, object, /): ...
    def setChildSort(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setCloseRequestEvent(self, object, /): ...
    def setEventsCallback(self, object, /): ...
    def setInverted(self, object, /): ...
    def setOneShot(self, object, /): ...
    def setOverlayDisplayRegion(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setPropertiesCallback(self, object, /): ...
    def setRedBlueStereo(): ...
    def setRenderCallback(self, object, /): ...
    def setSideBySideStereo(): ...
    def setSort(self, object, /): ...
    def setSwapEyes(self, object, /): ...
    def setUnexposedDraw(self, object, /): ...
    def setWindowEvent(self, object, /): ...
    def set_active(self, object, /): ...
    def set_child_sort(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_close_request_event(self, object, /): ...
    def set_events_callback(self, object, /): ...
    def set_inverted(self, object, /): ...
    def set_one_shot(self, object, /): ...
    def set_overlay_display_region(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_properties_callback(self, object, /): ...
    def set_red_blue_stereo(): ...
    def set_render_callback(self, object, /): ...
    def set_side_by_side_stereo(): ...
    def set_sort(self, object, /): ...
    def set_swap_eyes(self, object, /): ...
    def set_unexposed_draw(self, object, /): ...
    def set_window_event(self, object, /): ...
    def setupRenderTexture(): ...
    def setup_render_texture(): ...
    def shareDepthBuffer(self, object, /): ...
    def share_depth_buffer(self, object, /): ...
    size = None
    sort = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    supports_render_texture = None
    swap_eyes = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triggerCopy(self, /): ...
    def trigger_copy(self, /): ...
    type = None
    unexposed_draw = None
    def unref(self, /): ...
    def unshareDepthBuffer(self, /): ...
    def unshare_depth_buffer(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToGraphicsOutputBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_GraphicsOutputBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    window_event = None
    window_handle = None
class CallbackNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearCullCallback(self, /): ...
    def clearDrawCallback(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_cull_callback(self, /): ...
    def clear_draw_callback(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_callback = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_callback = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCullCallback(self, /): ...
    def getDrawCallback(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_cull_callback(self, /): ...
    def get_draw_callback(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCullCallback(self, object, /): ...
    def setDrawCallback(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_cull_callback(self, object, /): ...
    def set_draw_callback(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class CallbackObject:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class Camera:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class CardMaker:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearColor(self, /): ...
    def clearName(self, /): ...
    def clearSourceGeometry(self, /): ...
    def clear_color(self, /): ...
    def clear_name(self, /): ...
    def clear_source_geometry(self, /): ...
    def generate(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def reset(self, /): ...
    def setColor(): ...
    def setFrame(): ...
    def setFrameFullscreenQuad(self, /): ...
    def setHas3dUvs(self, object, /): ...
    def setHasNormals(self, object, /): ...
    def setHasUvs(self, object, /): ...
    def setName(self, object, /): ...
    def setSourceGeometry(): ...
    def setUvRange(): ...
    def setUvRangeCube(self, object, /): ...
    def set_color(): ...
    def set_frame(): ...
    def set_frame_fullscreen_quad(self, /): ...
    def set_has_3d_uvs(self, object, /): ...
    def set_has_normals(self, object, /): ...
    def set_has_uvs(self, object, /): ...
    def set_name(self, object, /): ...
    def set_source_geometry(): ...
    def set_uv_range(): ...
    def set_uv_range_cube(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Character:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    bundle_handles = None
    bundles = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearLodAnimation(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_lod_animation(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findJoint(self, object, /): ...
    def findParent(): ...
    def findSlider(self, object, /): ...
    def findStashed(): ...
    def find_child(): ...
    def find_joint(self, object, /): ...
    def find_parent(): ...
    def find_slider(self, object, /): ...
    def find_stashed(): ...
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getBundle(self, object, /): ...
    def getBundleHandle(self, object, /): ...
    def getBundleHandles(self, /): ...
    def getBundles(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumBundles(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_bundle(self, object, /): ...
    def get_bundle_handle(self, object, /): ...
    def get_bundle_handles(self, /): ...
    def get_bundles(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_bundles(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    def mergeBundles(): ...
    def merge_bundles(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLodAnimation(): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lod_animation(): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def updateToNow(self, /): ...
    def update_to_now(self, /): ...
    def write(): ...
    def writePartValues(self, object, /): ...
    def writeParts(self, object, /): ...
    def write_part_values(self, object, /): ...
    def write_parts(self, object, /): ...
class CharacterJoint:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def addLocalTransform(self, object, /): ...
    def addNetTransform(self, object, /): ...
    def add_local_transform(self, object, /): ...
    def add_net_transform(self, object, /): ...
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearLocalTransforms(self, /): ...
    def clearName(self, /): ...
    def clearNetTransforms(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_local_transforms(self, /): ...
    def clear_name(self, /): ...
    def clear_net_transforms(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getCharacter(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getLocalTransforms(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNetTransform(self, object, /): ...
    def getNetTransforms(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getTransform(): ...
    def getTransformState(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_character(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_local_transforms(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_net_transform(self, object, /): ...
    def get_net_transforms(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_transform(): ...
    def get_transform_state(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasLocalTransform(self, object, /): ...
    def hasName(self, /): ...
    def hasNetTransform(self, object, /): ...
    def has_local_transform(self, object, /): ...
    def has_name(self, /): ...
    def has_net_transform(self, object, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeLocalTransform(self, object, /): ...
    def removeNetTransform(self, object, /): ...
    def remove_local_transform(self, object, /): ...
    def remove_net_transform(self, object, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class CharacterJointBundle:
    ...
    BTComponentwise:int = None
    BTComponentwiseQuat:int = None
    BTLinear:int = None
    BTNormalizedLinear:int = None
    BT_componentwise:int = None
    BT_componentwise_quat:int = None
    BT_linear:int = None
    BT_normalized_linear:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    anim_blend_flag = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def applyTransform(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    def apply_transform(self, object, /): ...
    def bindAnim(): ...
    def bind_anim(): ...
    blend_type = None
    children = None
    def clearAnimPreload(self, /): ...
    def clearControlEffects(self, /): ...
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_anim_preload(self, /): ...
    def clear_control_effects(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def controlJoint(): ...
    def control_joint(): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    frame_blend_flag = None
    def freezeJoint(): ...
    def freeze_joint(): ...
    def getAnimBlendFlag(self, /): ...
    def getAnimPreload(self, /): ...
    def getBamModified(self, /): ...
    def getBlendType(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getControlEffect(self, object, /): ...
    def getForcedChannel(self, /): ...
    def getFrameBlendFlag(self, /): ...
    def getName(self, /): ...
    def getNode(self, object, /): ...
    def getNodes(self, /): ...
    def getNumChildren(self, /): ...
    def getNumNodes(self, /): ...
    def getRefCount(self, /): ...
    def getRootXform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_anim_blend_flag(self, /): ...
    def get_anim_preload(self, /): ...
    def get_bam_modified(self, /): ...
    def get_blend_type(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_control_effect(self, object, /): ...
    def get_forced_channel(self, /): ...
    def get_frame_blend_flag(self, /): ...
    def get_name(self, /): ...
    def get_node(self, object, /): ...
    def get_nodes(self, /): ...
    def get_num_children(self, /): ...
    def get_num_nodes(self, /): ...
    def get_ref_count(self, /): ...
    def get_root_xform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def loadBindAnim(): ...
    def load_bind_anim(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def mergeAnimPreloads(self, object, /): ...
    def merge_anim_preloads(self, object, /): ...
    def modifyAnimPreload(self, /): ...
    def modify_anim_preload(self, /): ...
    name = None
    nodes = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def releaseJoint(self, object, /): ...
    def release_joint(self, object, /): ...
    root_xform = None
    def setAnimBlendFlag(self, object, /): ...
    def setAnimPreload(self, object, /): ...
    def setBlendType(self, object, /): ...
    def setControlEffect(): ...
    def setFrameBlendFlag(self, object, /): ...
    def setName(self, object, /): ...
    def setRootXform(self, object, /): ...
    def set_anim_blend_flag(self, object, /): ...
    def set_anim_preload(self, object, /): ...
    def set_blend_type(self, object, /): ...
    def set_control_effect(): ...
    def set_frame_blend_flag(self, object, /): ...
    def set_name(self, object, /): ...
    def set_root_xform(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def waitPending(self, /): ...
    def wait_pending(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
    def xform(self, object, /): ...
class CharacterJointEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCharacter(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_character(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class CharacterSlider:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class CharacterVertexSlider:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCharSlider(self, /): ...
    def getClassType(): ...
    def getModified(): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSlider(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_char_slider(self, /): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_slider(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slider = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class ClientBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def forkAsynchronousThread(self, object, /): ...
    def fork_asynchronous_thread(self, object, /): ...
    def getClassType(): ...
    def getCoordinateSystem(self, /): ...
    def getLastPollTime(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_coordinate_system(self, /): ...
    def get_last_poll_time(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isForked(self, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_forked(self, /): ...
    def is_of_type(self, object, /): ...
    def poll(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setCoordinateSystem(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class ClipPlaneAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    OAdd:int = None
    ORemove:int = None
    OSet:int = None
    O_add:int = None
    O_remove:int = None
    O_set:int = None
    def addOffPlane(self, object, /): ...
    def addOnPlane(self, object, /): ...
    def addPlane(self, object, /): ...
    def add_off_plane(self, object, /): ...
    def add_on_plane(self, object, /): ...
    def add_plane(self, object, /): ...
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def filterToMax(self, object, /): ...
    def filter_to_max(self, object, /): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getNumOffPlanes(self, /): ...
    def getNumOnPlanes(self, /): ...
    def getNumPlanes(self, /): ...
    def getOffPlane(self, object, /): ...
    def getOffPlanes(self, /): ...
    def getOnPlane(self, object, /): ...
    def getOnPlanes(self, /): ...
    def getOperation(self, /): ...
    def getPlane(self, object, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_num_off_planes(self, /): ...
    def get_num_on_planes(self, /): ...
    def get_num_planes(self, /): ...
    def get_off_plane(self, object, /): ...
    def get_off_planes(self, /): ...
    def get_on_plane(self, object, /): ...
    def get_on_planes(self, /): ...
    def get_operation(self, /): ...
    def get_plane(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasAllOff(self, /): ...
    def hasOffPlane(self, object, /): ...
    def hasOnPlane(self, object, /): ...
    def hasPlane(self, object, /): ...
    def has_all_off(self, /): ...
    def has_off_plane(self, object, /): ...
    def has_on_plane(self, object, /): ...
    def has_plane(self, object, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeAllOff(): ...
    def makeDefault(): ...
    def make_all_off(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeOffPlane(self, object, /): ...
    def removeOnPlane(self, object, /): ...
    def removePlane(self, object, /): ...
    def remove_off_plane(self, object, /): ...
    def remove_on_plane(self, object, /): ...
    def remove_plane(self, object, /): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ClockObject:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MDegrade:int = None
    MForced:int = None
    MInteger:int = None
    MIntegerLimited:int = None
    MLimited:int = None
    MNonRealTime:int = None
    MNormal:int = None
    MSlave:int = None
    M_degrade:int = None
    M_forced:int = None
    M_integer:int = None
    M_integer_limited:int = None
    M_limited:int = None
    M_non_real_time:int = None
    M_normal:int = None
    M_slave:int = None
    average_frame_rate = None
    average_frame_rate_interval = None
    def calcFrameRateDeviation(): ...
    def calc_frame_rate_deviation(): ...
    def checkErrors(self, object, /): ...
    def check_errors(self, object, /): ...
    degrade_factor = None
    dt = None
    frame_count = None
    frame_time = None
    def getAverageFrameRate(): ...
    def getAverageFrameRateInterval(self, /): ...
    def getClassType(): ...
    def getDegradeFactor(self, /): ...
    def getDt(): ...
    def getFrameCount(): ...
    def getFrameTime(): ...
    def getGlobalClock(): ...
    def getLongTime(self, /): ...
    def getMaxDt(self, /): ...
    def getMaxFrameDuration(): ...
    def getMode(self, /): ...
    def getNetFrameRate(): ...
    def getRealTime(self, /): ...
    def getRefCount(self, /): ...
    def get_average_frame_rate(): ...
    def get_average_frame_rate_interval(self, /): ...
    def get_class_type(): ...
    def get_degrade_factor(self, /): ...
    def get_dt(): ...
    def get_frame_count(): ...
    def get_frame_time(): ...
    def get_global_clock(): ...
    def get_long_time(self, /): ...
    def get_max_dt(self, /): ...
    def get_max_frame_duration(): ...
    def get_mode(self, /): ...
    def get_net_frame_rate(): ...
    def get_real_time(self, /): ...
    def get_ref_count(self, /): ...
    long_time = None
    max_dt = None
    max_frame_duration = None
    mode = None
    real_time = None
    def ref(self, /): ...
    ref_count = None
    def reset(self, /): ...
    def setAverageFrameRateInterval(self, object, /): ...
    def setDegradeFactor(self, object, /): ...
    def setDt(self, object, /): ...
    def setFrameCount(): ...
    def setFrameRate(self, object, /): ...
    def setFrameTime(): ...
    def setMaxDt(self, object, /): ...
    def setMode(self, object, /): ...
    def setRealTime(self, object, /): ...
    def set_average_frame_rate_interval(self, object, /): ...
    def set_degrade_factor(self, object, /): ...
    def set_dt(self, object, /): ...
    def set_frame_count(): ...
    def set_frame_rate(self, object, /): ...
    def set_frame_time(): ...
    def set_max_dt(self, object, /): ...
    def set_mode(self, object, /): ...
    def set_real_time(self, object, /): ...
    def syncFrameTime(): ...
    def sync_frame_time(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tick(): ...
    def unref(self, /): ...
class CollideMask:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class CollisionBox:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    center = None
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    dimensions = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getDimensions(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getMax(self, /): ...
    def getMin(self, /): ...
    def getNumPlanes(self, /): ...
    def getNumPoints(self, /): ...
    def getPlane(self, object, /): ...
    def getPoint(self, object, /): ...
    def getPointAabb(self, object, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_dimensions(self, /): ...
    def get_effective_normal(self, /): ...
    def get_max(self, /): ...
    def get_min(self, /): ...
    def get_num_planes(self, /): ...
    def get_num_points(self, /): ...
    def get_plane(self, object, /): ...
    def get_point(self, object, /): ...
    def get_point_aabb(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    max = None
    min = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setCenter(): ...
    def setEffectiveNormal(self, object, /): ...
    def setPlane(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_center(): ...
    def set_effective_normal(self, object, /): ...
    def set_plane(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionCapsule:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getPointA(self, /): ...
    def getPointB(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_point_a(self, /): ...
    def get_point_b(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    point_a = None
    point_b = None
    radius = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setPointA(): ...
    def setPointB(): ...
    def setRadius(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_point_a(): ...
    def set_point_b(): ...
    def set_radius(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionEntry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def collided(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    from_node = None
    from_node_path = None
    from_solid = None
    def getAll(): ...
    def getAllContactInfo(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getContactNormal(self, object, /): ...
    def getContactPos(self, object, /): ...
    def getFrom(self, /): ...
    def getFromNode(self, /): ...
    def getFromNodePath(self, /): ...
    def getInteriorPoint(self, object, /): ...
    def getInto(self, /): ...
    def getIntoNode(self, /): ...
    def getIntoNodePath(self, /): ...
    def getRefCount(self, /): ...
    def getRespectPrevTransform(self, /): ...
    def getSurfaceNormal(self, object, /): ...
    def getSurfacePoint(self, object, /): ...
    def getT(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_all(): ...
    def get_all_contact_info(): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_contact_normal(self, object, /): ...
    def get_contact_pos(self, object, /): ...
    def get_from(self, /): ...
    def get_from_node(self, /): ...
    def get_from_node_path(self, /): ...
    def get_interior_point(self, object, /): ...
    def get_into(self, /): ...
    def get_into_node(self, /): ...
    def get_into_node_path(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_prev_transform(self, /): ...
    def get_surface_normal(self, object, /): ...
    def get_surface_point(self, object, /): ...
    def get_t(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasContactNormal(self, /): ...
    def hasContactPos(self, /): ...
    def hasInteriorPoint(self, /): ...
    def hasInto(self, /): ...
    def hasSurfaceNormal(self, /): ...
    def hasSurfacePoint(self, /): ...
    def has_contact_normal(self, /): ...
    def has_contact_pos(self, /): ...
    def has_interior_point(self, /): ...
    def has_into(self, /): ...
    def has_surface_normal(self, /): ...
    def has_surface_point(self, /): ...
    into_node = None
    into_node_path = None
    into_solid = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def resetCollided(self, /): ...
    def reset_collided(self, /): ...
    respect_prev_transform = None
    def setContactNormal(self, object, /): ...
    def setContactPos(self, object, /): ...
    def setInteriorPoint(self, object, /): ...
    def setSurfaceNormal(self, object, /): ...
    def setSurfacePoint(self, object, /): ...
    def setT(self, object, /): ...
    def set_contact_normal(self, object, /): ...
    def set_contact_pos(self, object, /): ...
    def set_interior_point(self, object, /): ...
    def set_surface_normal(self, object, /): ...
    def set_surface_point(self, object, /): ...
    def set_t(self, object, /): ...
    t = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionFloorMesh:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTriangle(): ...
    def addVertex(self, object, /): ...
    def add_triangle(): ...
    def add_vertex(self, object, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getNumTriangles(self, /): ...
    def getNumVertices(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getTriangle(self, object, /): ...
    def getTriangles(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVertex(self, object, /): ...
    def getVertices(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_num_triangles(self, /): ...
    def get_num_vertices(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_triangle(self, object, /): ...
    def get_triangles(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertices(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    triangles = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    vertices = None
    def write(): ...
class CollisionHandler:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class CollisionHandlerEvent:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getClassType(): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_class_type(): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    out_patterns = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAgainPattern(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerFloor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addCollider(): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_collider(): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    center = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearCenter(self, /): ...
    def clearColliders(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_center(self, /): ...
    def clear_colliders(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getMaxVelocity(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOffset(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getReach(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_max_velocity(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_offset(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_reach(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasCenter(self, /): ...
    def hasCollider(self, object, /): ...
    def hasContact(self, /): ...
    def has_center(self, /): ...
    def has_collider(self, object, /): ...
    def has_contact(self, /): ...
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    max_velocity = None
    offset = None
    out_patterns = None
    reach = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    def setAgainPattern(self, object, /): ...
    def setCenter(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setMaxVelocity(self, object, /): ...
    def setOffset(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def setReach(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_center(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_max_velocity(self, object, /): ...
    def set_offset(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def set_reach(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerFluidPusher:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addCollider(): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_collider(): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    center = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearCenter(self, /): ...
    def clearColliders(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_center(self, /): ...
    def clear_colliders(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getHorizontal(self, /): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_horizontal(self, /): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasCenter(self, /): ...
    def hasCollider(self, object, /): ...
    def hasContact(self, /): ...
    def has_center(self, /): ...
    def has_collider(self, object, /): ...
    def has_contact(self, /): ...
    horizontal = None
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    out_patterns = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    def setAgainPattern(self, object, /): ...
    def setCenter(self, object, /): ...
    def setHorizontal(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_center(self, object, /): ...
    def set_horizontal(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerGravity:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addCollider(): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def addVelocity(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_collider(): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    def add_velocity(self, object, /): ...
    again_patterns = None
    airborne_height = None
    center = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearCenter(self, /): ...
    def clearColliders(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_center(self, /): ...
    def clear_colliders(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    contact_normal = None
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getAirborneHeight(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getContactNormal(self, /): ...
    def getGravity(self, /): ...
    def getImpactVelocity(self, /): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getLegacyMode(self, /): ...
    def getMaxVelocity(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOffset(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getReach(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVelocity(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_airborne_height(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_contact_normal(self, /): ...
    def get_gravity(self, /): ...
    def get_impact_velocity(self, /): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_legacy_mode(self, /): ...
    def get_max_velocity(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_offset(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_reach(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_velocity(self, /): ...
    gravity = None
    def hasCenter(self, /): ...
    def hasCollider(self, object, /): ...
    def hasContact(self, /): ...
    def has_center(self, /): ...
    def has_collider(self, object, /): ...
    def has_contact(self, /): ...
    impact_velocity = None
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOnGround(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_on_ground(self, /): ...
    max_velocity = None
    offset = None
    on_ground = None
    out_patterns = None
    reach = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    def setAgainPattern(self, object, /): ...
    def setCenter(self, object, /): ...
    def setGravity(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setLegacyMode(self, object, /): ...
    def setMaxVelocity(self, object, /): ...
    def setOffset(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def setReach(self, object, /): ...
    def setVelocity(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_center(self, object, /): ...
    def set_gravity(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_legacy_mode(self, object, /): ...
    def set_max_velocity(self, object, /): ...
    def set_offset(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def set_reach(self, object, /): ...
    def set_velocity(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    velocity = None
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerHighestEvent:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getClassType(): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_class_type(): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    out_patterns = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAgainPattern(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerPhysical:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addCollider(): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_collider(): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    center = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearCenter(self, /): ...
    def clearColliders(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_center(self, /): ...
    def clear_colliders(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasCenter(self, /): ...
    def hasCollider(self, object, /): ...
    def hasContact(self, /): ...
    def has_center(self, /): ...
    def has_collider(self, object, /): ...
    def has_contact(self, /): ...
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    out_patterns = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    def setAgainPattern(self, object, /): ...
    def setCenter(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_center(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerPusher:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addAgainPattern(self, object, /): ...
    def addCollider(): ...
    def addInPattern(self, object, /): ...
    def addOutPattern(self, object, /): ...
    def add_again_pattern(self, object, /): ...
    def add_collider(): ...
    def add_in_pattern(self, object, /): ...
    def add_out_pattern(self, object, /): ...
    again_patterns = None
    center = None
    def clear(self, /): ...
    def clearAgainPatterns(self, /): ...
    def clearCenter(self, /): ...
    def clearColliders(self, /): ...
    def clearInPatterns(self, /): ...
    def clearOutPatterns(self, /): ...
    def clear_again_patterns(self, /): ...
    def clear_center(self, /): ...
    def clear_colliders(self, /): ...
    def clear_in_patterns(self, /): ...
    def clear_out_patterns(self, /): ...
    def flush(self, /): ...
    def getAgainPattern(self, object, /): ...
    def getAgainPatterns(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getHorizontal(self, /): ...
    def getInPattern(self, object, /): ...
    def getInPatterns(self, /): ...
    def getNumAgainPatterns(self, /): ...
    def getNumInPatterns(self, /): ...
    def getNumOutPatterns(self, /): ...
    def getOutPattern(self, object, /): ...
    def getOutPatterns(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_again_pattern(self, object, /): ...
    def get_again_patterns(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_horizontal(self, /): ...
    def get_in_pattern(self, object, /): ...
    def get_in_patterns(self, /): ...
    def get_num_again_patterns(self, /): ...
    def get_num_in_patterns(self, /): ...
    def get_num_out_patterns(self, /): ...
    def get_out_pattern(self, object, /): ...
    def get_out_patterns(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasCenter(self, /): ...
    def hasCollider(self, object, /): ...
    def hasContact(self, /): ...
    def has_center(self, /): ...
    def has_collider(self, object, /): ...
    def has_contact(self, /): ...
    horizontal = None
    in_patterns = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    out_patterns = None
    def readDatagram(self, object, /): ...
    def read_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    def setAgainPattern(self, object, /): ...
    def setCenter(self, object, /): ...
    def setHorizontal(self, object, /): ...
    def setInPattern(self, object, /): ...
    def setOutPattern(self, object, /): ...
    def set_again_pattern(self, object, /): ...
    def set_center(self, object, /): ...
    def set_horizontal(self, object, /): ...
    def set_in_pattern(self, object, /): ...
    def set_out_pattern(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def writeDatagram(self, object, /): ...
    def write_datagram(self, object, /): ...
class CollisionHandlerQueue:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearEntries(self, /): ...
    def clear_entries(self, /): ...
    entries = None
    def getClassType(): ...
    def getEntries(self, /): ...
    def getEntry(self, object, /): ...
    def getNumEntries(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_entries(self, /): ...
    def get_entry(self, object, /): ...
    def get_num_entries(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def sortEntries(self, /): ...
    def sort_entries(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
class CollisionInvSphere:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    center = None
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    radius = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setCenter(): ...
    def setEffectiveNormal(self, object, /): ...
    def setRadius(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_center(): ...
    def set_effective_normal(self, object, /): ...
    def set_radius(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionLine:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    direction = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getDirection(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getOrigin(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_direction(self, /): ...
    def get_effective_normal(self, /): ...
    def get_origin(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    origin = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setDirection(): ...
    def setEffectiveNormal(self, object, /): ...
    def setFromLens(): ...
    def setOrigin(): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_direction(): ...
    def set_effective_normal(self, object, /): ...
    def set_from_lens(): ...
    def set_origin(): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addSolid(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_solid(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSolids(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_solids(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    collider_sort = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default_collide_mask = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    from_collide_mask = None
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getColliderSort(self, /): ...
    def getDefaultCollideMask(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getFromCollideMask(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumSolids(self, /): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getSolid(self, object, /): ...
    def getSolids(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_collider_sort(self, /): ...
    def get_default_collide_mask(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_from_collide_mask(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_solids(self, /): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_solid(self, object, /): ...
    def get_solids(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def insertSolid(): ...
    def insert_solid(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    def modifySolid(self, object, /): ...
    def modify_solid(self, object, /): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeSolid(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_solid(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCollideMask(self, object, /): ...
    def setColliderSort(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFromCollideMask(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSolid(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_collide_mask(self, object, /): ...
    def set_collider_sort(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_from_collide_mask(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_solid(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    solids = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class CollisionParabola:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getParabola(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getT1(self, /): ...
    def getT2(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_parabola(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_t1(self, /): ...
    def get_t2(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    parabola = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setParabola(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setT1(self, object, /): ...
    def setT2(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_parabola(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_t1(self, object, /): ...
    def set_t2(self, object, /): ...
    def set_tangible(self, object, /): ...
    t1 = None
    t2 = None
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionPlane:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def flip(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getNormal(self, /): ...
    def getPlane(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_normal(self, /): ...
    def get_plane(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    normal = None
    def output(self, object, /): ...
    plane = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setPlane(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_plane(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionPolygon:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    concave = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def flip(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getNormal(self, /): ...
    def getNumPoints(self, /): ...
    def getPlane(self, /): ...
    def getPoint(self, object, /): ...
    def getPoints(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_normal(self, /): ...
    def get_num_points(self, /): ...
    def get_plane(self, /): ...
    def get_point(self, object, /): ...
    def get_points(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isConcave(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def isValid(self, /): ...
    def is_concave(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def is_valid(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    normal = None
    def output(self, object, /): ...
    plane = None
    points = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setPlane(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_plane(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    valid = None
    def verifyPoints(): ...
    def verify_points(): ...
    def write(): ...
class CollisionRay:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    direction = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getDirection(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getOrigin(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_direction(self, /): ...
    def get_effective_normal(self, /): ...
    def get_origin(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    origin = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setDirection(): ...
    def setEffectiveNormal(self, object, /): ...
    def setFromLens(): ...
    def setOrigin(): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_direction(): ...
    def set_effective_normal(self, object, /): ...
    def set_from_lens(): ...
    def set_origin(): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionRecorder:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class CollisionSegment:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getPointA(self, /): ...
    def getPointB(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_point_a(self, /): ...
    def get_point_b(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    point_a = None
    point_b = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setFromLens(): ...
    def setPointA(): ...
    def setPointB(): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_from_lens(): ...
    def set_point_a(): ...
    def set_point_b(): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionSolid:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionSphere:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    center = None
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getCenter(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_center(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    radius = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setCenter(): ...
    def setEffectiveNormal(self, object, /): ...
    def setRadius(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_center(): ...
    def set_effective_normal(self, object, /): ...
    def set_radius(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionTraverser:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addCollider(): ...
    def add_collider(): ...
    def clearColliders(self, /): ...
    def clearName(self, /): ...
    def clearRecorder(self, /): ...
    def clear_colliders(self, /): ...
    def clear_name(self, /): ...
    def clear_recorder(self, /): ...
    colliders = None
    def getClassType(): ...
    def getCollider(self, object, /): ...
    def getColliders(self, /): ...
    def getHandler(self, object, /): ...
    def getName(self, /): ...
    def getNumColliders(self, /): ...
    def getRecorder(self, /): ...
    def getRespectPrevTransform(self, /): ...
    def get_class_type(): ...
    def get_collider(self, object, /): ...
    def get_colliders(self, /): ...
    def get_handler(self, object, /): ...
    def get_name(self, /): ...
    def get_num_colliders(self, /): ...
    def get_recorder(self, /): ...
    def get_respect_prev_transform(self, /): ...
    def hasCollider(self, object, /): ...
    def hasName(self, /): ...
    def hasRecorder(self, /): ...
    def has_collider(self, object, /): ...
    def has_name(self, /): ...
    def has_recorder(self, /): ...
    def hideCollisions(self, /): ...
    def hide_collisions(self, /): ...
    name = None
    def output(self, object, /): ...
    recorder = None
    def removeCollider(self, object, /): ...
    def remove_collider(self, object, /): ...
    respect_preV_transform = None
    respect_prev_transform = None
    def setName(self, object, /): ...
    def setRecorder(self, object, /): ...
    def setRespectPrevTransform(self, object, /): ...
    def set_name(self, object, /): ...
    def set_recorder(self, object, /): ...
    def set_respect_prev_transform(self, object, /): ...
    def showCollisions(self, object, /): ...
    def show_collisions(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def traverse(self, object, /): ...
    def write(): ...
class CollisionTube:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bounds = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearEffectiveNormal(self, /): ...
    def clear_effective_normal(self, /): ...
    collision_origin = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBounds(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCollisionOrigin(self, /): ...
    def getEffectiveNormal(self, /): ...
    def getPointA(self, /): ...
    def getPointB(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getRespectEffectiveNormal(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_collision_origin(self, /): ...
    def get_effective_normal(self, /): ...
    def get_point_a(self, /): ...
    def get_point_b(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_respect_effective_normal(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasEffectiveNormal(self, /): ...
    def has_effective_normal(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTangible(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_tangible(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    point_a = None
    point_b = None
    radius = None
    def ref(self, /): ...
    ref_count = None
    respect_effective_normal = None
    def setBounds(self, object, /): ...
    def setEffectiveNormal(self, object, /): ...
    def setPointA(): ...
    def setPointB(): ...
    def setRadius(self, object, /): ...
    def setRespectEffectiveNormal(self, object, /): ...
    def setTangible(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_effective_normal(self, object, /): ...
    def set_point_a(): ...
    def set_point_b(): ...
    def set_radius(self, object, /): ...
    def set_respect_effective_normal(self, object, /): ...
    def set_tangible(self, object, /): ...
    tangible = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class CollisionVisualizer:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clear(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNormalScale(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPointScale(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_normal_scale(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point_scale(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    normal_scale = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    point_scale = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNormalScale(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPointScale(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_normal_scale(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_point_scale(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCollisionRecorder(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_CollisionRecorder(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ColorAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    TFlat:int = None
    TOff:int = None
    TVertex:int = None
    T_flat:int = None
    T_off:int = None
    T_vertex:int = None
    class_slot:int = None
    color = None
    color_type = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorType(self, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_type(self, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def makeDefault(): ...
    def makeFlat(object, /): ...
    def makeOff(): ...
    def makeVertex(): ...
    def make_default(): ...
    def make_flat(object, /): ...
    def make_off(): ...
    def make_vertex(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ColorBlendAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAdd:int = None
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MInvSubtract:int = None
    MLess:int = None
    MLessEqual:int = None
    MMax:int = None
    MMin:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MSubtract:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_add:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_inv_subtract:int = None
    M_less:int = None
    M_less_equal:int = None
    M_max:int = None
    M_min:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_subtract:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    OAlphaScale:int = None
    OColorScale:int = None
    OConstantAlpha:int = None
    OConstantColor:int = None
    OFbufferAlpha:int = None
    OFbufferColor:int = None
    OIncoming1Alpha:int = None
    OIncoming1Color:int = None
    OIncomingAlpha:int = None
    OIncomingColor:int = None
    OIncomingColorSaturate:int = None
    OOne:int = None
    OOneMinusAlphaScale:int = None
    OOneMinusColorScale:int = None
    OOneMinusConstantAlpha:int = None
    OOneMinusConstantColor:int = None
    OOneMinusFbufferAlpha:int = None
    OOneMinusFbufferColor:int = None
    OOneMinusIncoming1Alpha:int = None
    OOneMinusIncoming1Color:int = None
    OOneMinusIncomingAlpha:int = None
    OOneMinusIncomingColor:int = None
    OZero:int = None
    O_alpha_scale:int = None
    O_color_scale:int = None
    O_constant_alpha:int = None
    O_constant_color:int = None
    O_fbuffer_alpha:int = None
    O_fbuffer_color:int = None
    O_incoming1_alpha:int = None
    O_incoming1_color:int = None
    O_incoming_alpha:int = None
    O_incoming_color:int = None
    O_incoming_color_saturate:int = None
    O_one:int = None
    O_one_minus_alpha_scale:int = None
    O_one_minus_color_scale:int = None
    O_one_minus_constant_alpha:int = None
    O_one_minus_constant_color:int = None
    O_one_minus_fbuffer_alpha:int = None
    O_one_minus_fbuffer_color:int = None
    O_one_minus_incoming1_alpha:int = None
    O_one_minus_incoming1_color:int = None
    O_one_minus_incoming_alpha:int = None
    O_one_minus_incoming_color:int = None
    O_zero:int = None
    alpha_mode = None
    alpha_operand_a = None
    alpha_operand_b = None
    class_slot:int = None
    color = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getAlphaMode(self, /): ...
    def getAlphaOperandA(self, /): ...
    def getAlphaOperandB(self, /): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getOperandA(self, /): ...
    def getOperandB(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_alpha_mode(self, /): ...
    def get_alpha_operand_a(self, /): ...
    def get_alpha_operand_b(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_operand_a(self, /): ...
    def get_operand_b(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def involvesColorScale(): ...
    def involvesConstantColor(): ...
    def involves_color_scale(): ...
    def involves_constant_color(): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    rgb_mode = None
    rgb_operand_a = None
    rgb_operand_b = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ColorScaleAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getScale(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_scale(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasAlphaScale(self, /): ...
    def hasRgbScale(self, /): ...
    def hasScale(self, /): ...
    def has_alpha_scale(self, /): ...
    def has_rgb_scale(self, /): ...
    def has_scale(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def makeIdentity(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_identity(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    scale = None
    def setScale(self, object, /): ...
    def set_scale(self, object, /): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ColorWriteAttrib:
    ...
    CAll:int = None
    CAlpha:int = None
    CBlue:int = None
    CGreen:int = None
    COff:int = None
    CRed:int = None
    CRgb:int = None
    C_all:int = None
    C_alpha:int = None
    C_blue:int = None
    C_green:int = None
    C_off:int = None
    C_red:int = None
    C_rgb:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    channels = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getChannels(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_channels(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class CompassEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    PAll:int = None
    PPos:int = None
    PRot:int = None
    PScale:int = None
    PSx:int = None
    PSy:int = None
    PSz:int = None
    PX:int = None
    PY:int = None
    PZ:int = None
    P_all:int = None
    P_pos:int = None
    P_rot:int = None
    P_scale:int = None
    P_sx:int = None
    P_sy:int = None
    P_sz:int = None
    P_x:int = None
    P_y:int = None
    P_z:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getProperties(self, /): ...
    def getRefCount(self, /): ...
    def getReference(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_properties(self, /): ...
    def get_ref_count(self, /): ...
    def get_reference(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class ComputeNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addDispatch(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_dispatch(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearDispatches(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_dispatches(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    dispatches = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDispatch(self, object, /): ...
    def getDispatches(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDispatches(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_dispatch(self, object, /): ...
    def get_dispatches(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_dispatches(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def insertDispatch(): ...
    def insert_dispatch(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeDispatch(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_dispatch(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setDispatch(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_dispatch(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ConditionVar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getMutex(self, /): ...
    def get_mutex(self, /): ...
    def notify(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wait(): ...
class ConditionVarDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getMutex(self, /): ...
    def get_mutex(self, /): ...
    def notify(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wait(): ...
class ConditionVarFull:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getMutex(self, /): ...
    def get_mutex(self, /): ...
    def notify(self, /): ...
    def notifyAll(self, /): ...
    def notify_all(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wait(): ...
class ConditionVarFullDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getMutex(self, /): ...
    def get_mutex(self, /): ...
    def notify(self, /): ...
    def notifyAll(self, /): ...
    def notify_all(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wait(): ...
class ConfigDeclaration:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def getBoolWord(self, object, /): ...
    def getDeclSeq(self, /): ...
    def getDoubleWord(self, object, /): ...
    def getFilenameValue(self, /): ...
    def getInt64Word(self, object, /): ...
    def getIntWord(self, object, /): ...
    def getNumWords(self, /): ...
    def getPage(self, /): ...
    def getStringValue(self, /): ...
    def getStringWord(self, object, /): ...
    def getVariable(self, /): ...
    def get_bool_word(self, object, /): ...
    def get_decl_seq(self, /): ...
    def get_double_word(self, object, /): ...
    def get_filename_value(self, /): ...
    def get_int64_word(self, object, /): ...
    def get_int_word(self, object, /): ...
    def get_num_words(self, /): ...
    def get_page(self, /): ...
    def get_string_value(self, /): ...
    def get_string_word(self, object, /): ...
    def get_variable(self, /): ...
    def hasBoolWord(self, object, /): ...
    def hasDoubleWord(self, object, /): ...
    def hasInt64Word(self, object, /): ...
    def hasIntWord(self, object, /): ...
    def hasStringWord(self, object, /): ...
    def has_bool_word(self, object, /): ...
    def has_double_word(self, object, /): ...
    def has_int64_word(self, object, /): ...
    def has_int_word(self, object, /): ...
    def has_string_word(self, object, /): ...
    def output(self, object, /): ...
    page = None
    def setBoolWord(): ...
    def setDoubleWord(): ...
    def setInt64Word(): ...
    def setIntWord(): ...
    def setStringValue(self, object, /): ...
    def setStringWord(): ...
    def set_bool_word(): ...
    def set_double_word(): ...
    def set_int64_word(): ...
    def set_int_word(): ...
    def set_string_value(self, object, /): ...
    def set_string_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    variable = None
    def write(self, object, /): ...
class ConfigFlags:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConfigPage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    declarations = None
    def deleteDeclaration(self, object, /): ...
    def delete_declaration(self, object, /): ...
    def getDeclaration(self, object, /): ...
    def getDefaultPage(): ...
    def getLocalPage(): ...
    def getName(self, /): ...
    def getNumDeclarations(self, /): ...
    def getPageSeq(self, /): ...
    def getSignature(self, /): ...
    def getSort(self, /): ...
    def getStringValue(self, object, /): ...
    def getTrustLevel(self, /): ...
    def getVariableName(self, object, /): ...
    def get_declaration(self, object, /): ...
    def get_default_page(): ...
    def get_local_page(): ...
    def get_name(self, /): ...
    def get_num_declarations(self, /): ...
    def get_page_seq(self, /): ...
    def get_signature(self, /): ...
    def get_sort(self, /): ...
    def get_string_value(self, object, /): ...
    def get_trust_level(self, /): ...
    def get_variable_name(self, object, /): ...
    implicit = None
    def isImplicit(self, /): ...
    def isSpecial(self, /): ...
    def isVariableUsed(self, object, /): ...
    def is_implicit(self, /): ...
    def is_special(self, /): ...
    def is_variable_used(self, object, /): ...
    def makeDeclaration(): ...
    def make_declaration(): ...
    def modifyDeclaration(self, object, /): ...
    def modify_declaration(self, object, /): ...
    name = None
    def output(self, object, /): ...
    def outputBriefSignature(self, object, /): ...
    def output_brief_signature(self, object, /): ...
    page_seq = None
    def readEncryptedPrc(): ...
    def readPrc(self, object, /): ...
    def read_encrypted_prc(): ...
    def read_prc(self, object, /): ...
    def setSort(self, object, /): ...
    def setTrustLevel(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_trust_level(self, object, /): ...
    signature = None
    sort = None
    special = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    def write(self, object, /): ...
class ConfigPageManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def deleteExplicitPage(self, object, /): ...
    def delete_explicit_page(self, object, /): ...
    explicit_pages = None
    def getExplicitPage(self, object, /): ...
    def getGlobalPtr(): ...
    def getImplicitPage(self, object, /): ...
    def getNumExplicitPages(self, /): ...
    def getNumImplicitPages(self, /): ...
    def getNumPrcEncryptedPatterns(self, /): ...
    def getNumPrcExecutablePatterns(self, /): ...
    def getNumPrcPatterns(self, /): ...
    def getPrcEncryptedPattern(self, object, /): ...
    def getPrcExecutablePattern(self, object, /): ...
    def getPrcPattern(self, object, /): ...
    def getSearchPath(self, /): ...
    def get_explicit_page(self, object, /): ...
    def get_global_ptr(): ...
    def get_implicit_page(self, object, /): ...
    def get_num_explicit_pages(self, /): ...
    def get_num_implicit_pages(self, /): ...
    def get_num_prc_encrypted_patterns(self, /): ...
    def get_num_prc_executable_patterns(self, /): ...
    def get_num_prc_patterns(self, /): ...
    def get_prc_encrypted_pattern(self, object, /): ...
    def get_prc_executable_pattern(self, object, /): ...
    def get_prc_pattern(self, object, /): ...
    def get_search_path(self, /): ...
    implicit_pages = None
    def loadImplicitPages(self, /): ...
    def load_implicit_pages(self, /): ...
    def loadedImplicitPages(self, /): ...
    def loaded_implicit_pages(self, /): ...
    def makeExplicitPage(self, object, /): ...
    def make_explicit_page(self, object, /): ...
    def output(self, object, /): ...
    prc_encrypted_patterns = None
    prc_executable_patterns = None
    prc_patterns = None
    def reloadImplicitPages(self, /): ...
    def reload_implicit_pages(self, /): ...
    search_path = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class ConfigVariable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    description = None
    dynamic = None
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValueType(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def set_string_value(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def clearLocalValue(self, /): ...
    def clear_local_value(self, /): ...
    closed = None
    description = None
    dynamic = None
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getTrustLevel(self, /): ...
    def getValueType(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_trust_level(self, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableBool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableColor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    description = None
    dynamic = None
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def operatorTypecast(self, /): ...
    def operator_typecast(self, /): ...
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableCore:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def clearLocalValue(self, /): ...
    def clear_local_value(self, /): ...
    closed = None
    declarations = None
    default_value = None
    description = None
    dynamic = None
    def getDeclaration(self, object, /): ...
    def getDeclarations(self, /): ...
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumDeclarations(self, /): ...
    def getNumReferences(self, /): ...
    def getNumTrustedReferences(self, /): ...
    def getNumUniqueReferences(self, /): ...
    def getReference(self, object, /): ...
    def getReferences(self, /): ...
    def getTrustLevel(self, /): ...
    def getTrustedReference(self, object, /): ...
    def getTrustedReferences(self, /): ...
    def getUniqueReference(self, object, /): ...
    def getUniqueReferences(self, /): ...
    def getValueType(self, /): ...
    def get_declaration(self, object, /): ...
    def get_declarations(self, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_declarations(self, /): ...
    def get_num_references(self, /): ...
    def get_num_trusted_references(self, /): ...
    def get_num_unique_references(self, /): ...
    def get_reference(self, object, /): ...
    def get_references(self, /): ...
    def get_trust_level(self, /): ...
    def get_trusted_reference(self, object, /): ...
    def get_trusted_references(self, /): ...
    def get_unique_reference(self, object, /): ...
    def get_unique_references(self, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def isUsed(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    def is_used(self, /): ...
    def makeLocalValue(self, /): ...
    def make_local_value(self, /): ...
    name = None
    def output(self, object, /): ...
    references = None
    def setDefaultValue(self, object, /): ...
    def setDescription(self, object, /): ...
    def setFlags(self, object, /): ...
    def setUsed(self, /): ...
    def setValueType(self, object, /): ...
    def set_default_value(self, object, /): ...
    def set_description(self, object, /): ...
    def set_flags(self, object, /): ...
    def set_used(self, /): ...
    def set_value_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    trusted_references = None
    unique_references = None
    used = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableDouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableFilename:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    def Fspath(self, /): ...
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def cStr(self, /): ...
    def c_str(self, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def empty(self, /): ...
    def getBasename(self, /): ...
    def getBasenameWoExtension(self, /): ...
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getDirname(self, /): ...
    def getExtension(self, /): ...
    def getFlags(self, /): ...
    def getFullpath(self, /): ...
    def getFullpathWoExtension(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_basename(self, /): ...
    def get_basename_wo_extension(self, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_dirname(self, /): ...
    def get_extension(self, /): ...
    def get_flags(self, /): ...
    def get_fullpath(self, /): ...
    def get_fullpath_wo_extension(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    def length(self, /): ...
    name = None
    def operatorTypecast(self, /): ...
    def operator_typecast(self, /): ...
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableInt64:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableList:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def clearLocalValue(self, /): ...
    def clear_local_value(self, /): ...
    closed = None
    description = None
    dynamic = None
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumUniqueValues(self, /): ...
    def getNumValues(self, /): ...
    def getStringValue(self, object, /): ...
    def getTrustLevel(self, /): ...
    def getUniqueValue(self, object, /): ...
    def getValueType(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_unique_values(self, /): ...
    def get_num_values(self, /): ...
    def get_string_value(self, object, /): ...
    def get_trust_level(self, /): ...
    def get_unique_value(self, object, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    name = None
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getGlobalPtr(): ...
    def getNumVariables(self, /): ...
    def getVariable(self, object, /): ...
    def getVariableName(self, object, /): ...
    def getVariables(self, /): ...
    def get_global_ptr(): ...
    def get_num_variables(self, /): ...
    def get_variable(self, object, /): ...
    def get_variable_name(self, object, /): ...
    def get_variables(self, /): ...
    def isVariableUsed(self, object, /): ...
    def is_variable_used(self, object, /): ...
    def listDynamicVariables(self, /): ...
    def listUnusedVariables(self, /): ...
    def listVariables(self, /): ...
    def list_dynamic_variables(self, /): ...
    def list_unused_variables(self, /): ...
    def list_variables(self, /): ...
    def makeVariable(self, object, /): ...
    def makeVariableTemplate(): ...
    def make_variable(self, object, /): ...
    def make_variable_template(): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    variables = None
    def write(self, object, /): ...
    def writePrcVariables(self, object, /): ...
    def write_prc_variables(self, object, /): ...
class ConfigVariableSearchPath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def appendDirectory(self, object, /): ...
    def appendPath(): ...
    def append_directory(self, object, /): ...
    def append_path(): ...
    def clear(self, /): ...
    def clearLocalValue(self, /): ...
    def clear_local_value(self, /): ...
    closed = None
    default_value = None
    description = None
    directories = None
    dynamic = None
    def findAllFiles(): ...
    def findFile(self, object, /): ...
    def find_all_files(): ...
    def find_file(self, object, /): ...
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getDirectories(self, /): ...
    def getDirectory(self, object, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumDirectories(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_directories(self, /): ...
    def get_directory(self, object, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_directories(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def isEmpty(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    def is_empty(self, /): ...
    name = None
    def operatorTypecastDSearchPath(self, /): ...
    def operator_typecast_DSearchPath(self, /): ...
    def output(self, object, /): ...
    def prependDirectory(self, object, /): ...
    def prependPath(self, object, /): ...
    def prepend_directory(self, object, /): ...
    def prepend_path(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class ConfigVariableString:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    def assign(self, object, /): ...
    def cStr(self, /): ...
    def c_str(self, /): ...
    def clearLocalValue(self, /): ...
    def clearValue(self, /): ...
    def clear_local_value(self, /): ...
    def clear_value(self, /): ...
    closed = None
    default_value = None
    description = None
    dynamic = None
    def empty(self, /): ...
    def getDefaultValue(self, /): ...
    def getDescription(self, /): ...
    def getFlags(self, /): ...
    def getName(self, /): ...
    def getNumWords(self, /): ...
    def getStringValue(self, /): ...
    def getTrustLevel(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def getWord(self, object, /): ...
    def get_default_value(self, /): ...
    def get_description(self, /): ...
    def get_flags(self, /): ...
    def get_name(self, /): ...
    def get_num_words(self, /): ...
    def get_string_value(self, /): ...
    def get_trust_level(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def get_word(self, object, /): ...
    def hasLocalValue(self, /): ...
    def hasValue(self, /): ...
    def has_local_value(self, /): ...
    def has_value(self, /): ...
    def isClosed(self, /): ...
    def isDynamic(self, /): ...
    def is_closed(self, /): ...
    def is_dynamic(self, /): ...
    def length(self, /): ...
    name = None
    def output(self, object, /): ...
    def setStringValue(self, object, /): ...
    def setValue(self, object, /): ...
    def setWord(): ...
    def set_string_value(self, object, /): ...
    def set_value(self, object, /): ...
    def set_word(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    trust_level = None
    value = None
    value_type = None
    def write(self, object, /): ...
class Connection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def considerFlush(self, /): ...
    def consider_flush(self, /): ...
    def flush(self, /): ...
    def getAddress(self, /): ...
    def getClassType(): ...
    def getCollectTcp(self, /): ...
    def getCollectTcpInterval(self, /): ...
    def getManager(self, /): ...
    def getRefCount(self, /): ...
    def getSocket(self, /): ...
    def get_address(self, /): ...
    def get_class_type(): ...
    def get_collect_tcp(self, /): ...
    def get_collect_tcp_interval(self, /): ...
    def get_manager(self, /): ...
    def get_ref_count(self, /): ...
    def get_socket(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setCollectTcp(self, object, /): ...
    def setCollectTcpInterval(self, object, /): ...
    def setIpTimeToLive(self, object, /): ...
    def setIpTypeOfService(self, object, /): ...
    def setKeepAlive(self, object, /): ...
    def setLinger(): ...
    def setMaxSegment(self, object, /): ...
    def setNoDelay(self, object, /): ...
    def setRecvBufferSize(self, object, /): ...
    def setReuseAddr(self, object, /): ...
    def setSendBufferSize(self, object, /): ...
    def set_collect_tcp(self, object, /): ...
    def set_collect_tcp_interval(self, object, /): ...
    def set_ip_time_to_live(self, object, /): ...
    def set_ip_type_of_service(self, object, /): ...
    def set_keep_alive(self, object, /): ...
    def set_linger(): ...
    def set_max_segment(self, object, /): ...
    def set_no_delay(self, object, /): ...
    def set_recv_buffer_size(self, object, /): ...
    def set_reuse_addr(self, object, /): ...
    def set_send_buffer_size(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class ConnectionListener:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def getManager(self, /): ...
    def getNumThreads(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_manager(self, /): ...
    def get_num_threads(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_polling(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConnectionManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Interface:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getBroadcast(self, /): ...
        def getIp(self, /): ...
        def getMacAddress(self, /): ...
        def getName(self, /): ...
        def getNetmask(self, /): ...
        def getP2p(self, /): ...
        def get_broadcast(self, /): ...
        def get_ip(self, /): ...
        def get_mac_address(self, /): ...
        def get_name(self, /): ...
        def get_netmask(self, /): ...
        def get_p2p(self, /): ...
        def hasBroadcast(self, /): ...
        def hasIp(self, /): ...
        def hasNetmask(self, /): ...
        def hasP2p(self, /): ...
        def has_broadcast(self, /): ...
        def has_ip(self, /): ...
        def has_netmask(self, /): ...
        def has_p2p(self, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def closeConnection(self, object, /): ...
    def close_connection(self, object, /): ...
    def getHostName(): ...
    def getInterface(self, object, /): ...
    def getInterfaces(self, /): ...
    def getNumInterfaces(self, /): ...
    def get_host_name(): ...
    def get_interface(self, object, /): ...
    def get_interfaces(self, /): ...
    def get_num_interfaces(self, /): ...
    host_name:str = None
    interfaces = None
    def openTCPClientConnection(): ...
    def openTCPServerRendezvous(): ...
    def openUDPConnection(): ...
    def open_TCP_client_connection(): ...
    def open_TCP_server_rendezvous(): ...
    def open_UDP_connection(): ...
    def scanInterfaces(self, /): ...
    def scan_interfaces(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def waitForReaders(self, object, /): ...
    def wait_for_readers(self, object, /): ...
class ConnectionReader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def getManager(self, /): ...
    def getNumThreads(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_manager(self, /): ...
    def get_num_threads(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_polling(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConnectionWriter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getManager(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNumThreads(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_manager(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_num_threads(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isImmediate(self, /): ...
    def isValidForUdp(self, object, /): ...
    def is_immediate(self, /): ...
    def is_valid_for_udp(self, object, /): ...
    def send(): ...
    def setMaxQueueSize(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayDouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayLVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUnsignedChar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArrayUshort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_UnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_UnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_UnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_UnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_UnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_unsigned_char:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ConstPointerToArray_ushort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CopyOnWriteObject:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class CubicCurveseg:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjustPoint(): ...
    def adjustPt(): ...
    def adjustTangent(): ...
    def adjust_draw_mask(): ...
    def adjust_point(): ...
    def adjust_pt(): ...
    def adjust_tangent(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def calcLength(): ...
    def calc_length(): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findLength(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_length(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def get2ndtangent(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurveType(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxT(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDimensions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(): ...
    def getPrevTransform(): ...
    def getPt(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTangent(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_2ndtangent(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve_type(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_t(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_dimensions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(): ...
    def get_prev_transform(): ...
    def get_pt(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tangent(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurveType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNumDimensions(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_dimensions(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stitch(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeEgg(): ...
    def write_egg(): ...
class CullBinAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    bin_name = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_order = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getBinName(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getDrawOrder(self, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bin_name(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_draw_order(self, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class CullBinEnums:
    ...
    BTBackToFront:int = None
    BTFixed:int = None
    BTFrontToBack:int = None
    BTInvalid:int = None
    BTStateSorted:int = None
    BTUnsorted:int = None
    BT_back_to_front:int = None
    BT_fixed:int = None
    BT_front_to_back:int = None
    BT_invalid:int = None
    BT_state_sorted:int = None
    BT_unsorted:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CullBinManager:
    ...
    BTBackToFront:int = None
    BTFixed:int = None
    BTFrontToBack:int = None
    BTInvalid:int = None
    BTStateSorted:int = None
    BTUnsorted:int = None
    BT_back_to_front:int = None
    BT_fixed:int = None
    BT_front_to_back:int = None
    BT_invalid:int = None
    BT_state_sorted:int = None
    BT_unsorted:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addBin(): ...
    def add_bin(): ...
    def findBin(self, object, /): ...
    def find_bin(self, object, /): ...
    def getBin(self, object, /): ...
    def getBinActive(self, object, /): ...
    def getBinFlashActive(self, object, /): ...
    def getBinFlashColor(self, object, /): ...
    def getBinName(self, object, /): ...
    def getBinSort(self, object, /): ...
    def getBinType(self, object, /): ...
    def getBins(self, /): ...
    def getGlobalPtr(): ...
    def getNumBins(self, /): ...
    def get_bin(self, object, /): ...
    def get_bin_active(self, object, /): ...
    def get_bin_flash_active(self, object, /): ...
    def get_bin_flash_color(self, object, /): ...
    def get_bin_name(self, object, /): ...
    def get_bin_sort(self, object, /): ...
    def get_bin_type(self, object, /): ...
    def get_bins(self, /): ...
    def get_global_ptr(): ...
    def get_num_bins(self, /): ...
    def removeBin(self, object, /): ...
    def remove_bin(self, object, /): ...
    def setBinActive(): ...
    def setBinFlashActive(): ...
    def setBinFlashColor(): ...
    def setBinSort(): ...
    def setBinType(): ...
    def set_bin_active(): ...
    def set_bin_flash_active(): ...
    def set_bin_flash_color(): ...
    def set_bin_sort(): ...
    def set_bin_type(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class CullFaceAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MCullClockwise:int = None
    MCullCounterClockwise:int = None
    MCullNone:int = None
    MCullUnchanged:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_cull_clockwise:int = None
    M_cull_counter_clockwise:int = None
    M_cull_none:int = None
    M_cull_unchanged:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    effective_mode = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getActualMode(self, /): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getEffectiveMode(self, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getReverse(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_actual_mode(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_effective_mode(self, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_reverse(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def makeReverse(): ...
    def make_default(): ...
    def make_reverse(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    reverse = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class CullResult:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def draw(self, object, /): ...
    def finishCull(): ...
    def finish_cull(): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def makeNext(self, /): ...
    def makeResultGraph(self, /): ...
    def make_next(self, /): ...
    def make_result_graph(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class CullTraverser:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def drawBoundingVolume(): ...
    def draw_bounding_volume(): ...
    def endTraverse(self, /): ...
    def end_traverse(self, /): ...
    def flushLevel(): ...
    def flush_level(): ...
    def getCameraMask(self, /): ...
    def getCameraTransform(self, /): ...
    def getClassType(): ...
    def getCurrentThread(self, /): ...
    def getDepthOffsetDecals(self, /): ...
    def getEffectiveIncompleteRender(self, /): ...
    def getGsg(self, /): ...
    def getInitialState(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getTagStateKey(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getViewFrustum(self, /): ...
    def getWorldTransform(self, /): ...
    def get_camera_mask(self, /): ...
    def get_camera_transform(self, /): ...
    def get_class_type(): ...
    def get_current_thread(self, /): ...
    def get_depth_offset_decals(self, /): ...
    def get_effective_incomplete_render(self, /): ...
    def get_gsg(self, /): ...
    def get_initial_state(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_tag_state_key(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_view_frustum(self, /): ...
    def get_world_transform(self, /): ...
    def hasTagStateKey(self, /): ...
    def has_tag_state_key(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setCameraMask(self, object, /): ...
    def setScene(): ...
    def setViewFrustum(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_scene(): ...
    def set_view_frustum(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def traverse(self, object, /): ...
    def traverseBelow(self, object, /): ...
    def traverse_below(self, object, /): ...
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class CullTraverserData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def applyTransform(self, object, /): ...
    def applyTransformAndState(self, object, /): ...
    def apply_transform(self, object, /): ...
    def apply_transform_and_state(self, object, /): ...
    def getInternalTransform(self, object, /): ...
    def getModelviewTransform(self, object, /): ...
    def getNetTransform(self, object, /): ...
    def get_internal_transform(self, object, /): ...
    def get_modelview_transform(self, object, /): ...
    def get_net_transform(self, object, /): ...
    def isInView(self, object, /): ...
    def isThisNodeHidden(self, object, /): ...
    def is_in_view(self, object, /): ...
    def is_this_node_hidden(self, object, /): ...
    def node(self, /): ...
    node_path = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class CurveFitter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addHpr(): ...
    def addXyz(): ...
    def addXyzHpr(): ...
    def add_hpr(): ...
    def add_xyz(): ...
    def add_xyz_hpr(): ...
    def computeTangents(self, object, /): ...
    def compute_tangents(self, object, /): ...
    def desample(self, object, /): ...
    def getClassType(): ...
    def getNumSamples(self, /): ...
    def getSampleHpr(self, object, /): ...
    def getSampleT(self, object, /): ...
    def getSampleTangent(self, object, /): ...
    def getSampleXyz(self, object, /): ...
    def get_class_type(): ...
    def get_num_samples(self, /): ...
    def get_sample_hpr(self, object, /): ...
    def get_sample_t(self, object, /): ...
    def get_sample_tangent(self, object, /): ...
    def get_sample_xyz(self, object, /): ...
    def makeHermite(self, /): ...
    def makeNurbs(self, /): ...
    def make_hermite(self, /): ...
    def make_nurbs(self, /): ...
    def output(self, object, /): ...
    def removeSamples(): ...
    def remove_samples(): ...
    def reset(self, /): ...
    def sample(): ...
    def sortPoints(self, /): ...
    def sort_points(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wrapHpr(self, /): ...
    def wrap_hpr(self, /): ...
    def write(self, object, /): ...
class DSearchPath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Results:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def assign(self, object, /): ...
        def clear(self, /): ...
        def getFile(self, object, /): ...
        def getNumFiles(self, /): ...
        def get_file(self, object, /): ...
        def get_num_files(self, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        def write(): ...
    def appendDirectory(self, object, /): ...
    def appendPath(): ...
    def append_directory(self, object, /): ...
    def append_path(): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    directories = None
    def findAllFiles(): ...
    def findFile(self, object, /): ...
    def find_all_files(): ...
    def find_file(self, object, /): ...
    def getDirectories(self, /): ...
    def getDirectory(self, object, /): ...
    def getNumDirectories(self, /): ...
    def get_directories(self, /): ...
    def get_directory(self, object, /): ...
    def get_num_directories(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def output(): ...
    def prependDirectory(self, object, /): ...
    def prependPath(self, object, /): ...
    def prepend_directory(self, object, /): ...
    def prepend_path(self, object, /): ...
    def searchPath(): ...
    def search_path(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DataGraphTraverser:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def collectLeftovers(self, /): ...
    def collect_leftovers(self, /): ...
    def getCurrentThread(self, /): ...
    def get_current_thread(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def traverse(self, object, /): ...
class DataNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class Datagram:
    ...
    def Bytes(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addBeFloat32(self, object, /): ...
    def addBeFloat64(self, object, /): ...
    def addBeInt16(self, object, /): ...
    def addBeInt32(self, object, /): ...
    def addBeInt64(self, object, /): ...
    def addBeUint16(self, object, /): ...
    def addBeUint32(self, object, /): ...
    def addBeUint64(self, object, /): ...
    def addBlob(self, object, /): ...
    def addBlob32(self, object, /): ...
    def addBool(self, object, /): ...
    def addFixedString(): ...
    def addFloat32(self, object, /): ...
    def addFloat64(self, object, /): ...
    def addInt16(self, object, /): ...
    def addInt32(self, object, /): ...
    def addInt64(self, object, /): ...
    def addInt8(self, object, /): ...
    def addStdfloat(self, object, /): ...
    def addString(self, object, /): ...
    def addString32(self, object, /): ...
    def addUint16(self, object, /): ...
    def addUint32(self, object, /): ...
    def addUint64(self, object, /): ...
    def addUint8(self, object, /): ...
    def addWstring(self, object, /): ...
    def addZString(self, object, /): ...
    def add_be_float32(self, object, /): ...
    def add_be_float64(self, object, /): ...
    def add_be_int16(self, object, /): ...
    def add_be_int32(self, object, /): ...
    def add_be_int64(self, object, /): ...
    def add_be_uint16(self, object, /): ...
    def add_be_uint32(self, object, /): ...
    def add_be_uint64(self, object, /): ...
    def add_blob(self, object, /): ...
    def add_blob32(self, object, /): ...
    def add_bool(self, object, /): ...
    def add_fixed_string(): ...
    def add_float32(self, object, /): ...
    def add_float64(self, object, /): ...
    def add_int16(self, object, /): ...
    def add_int32(self, object, /): ...
    def add_int64(self, object, /): ...
    def add_int8(self, object, /): ...
    def add_stdfloat(self, object, /): ...
    def add_string(self, object, /): ...
    def add_string32(self, object, /): ...
    def add_uint16(self, object, /): ...
    def add_uint32(self, object, /): ...
    def add_uint64(self, object, /): ...
    def add_uint8(self, object, /): ...
    def add_wstring(self, object, /): ...
    def add_z_string(self, object, /): ...
    def appendData(self, object, /): ...
    def append_data(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def copyArray(self, object, /): ...
    def copy_array(self, object, /): ...
    def dumpHex(): ...
    def dump_hex(): ...
    def getArray(self, /): ...
    def getClassType(): ...
    def getLength(self, /): ...
    def getMessage(self, /): ...
    def getStdfloatDouble(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_array(self, /): ...
    def get_class_type(): ...
    def get_length(self, /): ...
    def get_message(self, /): ...
    def get_stdfloat_double(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def modifyArray(self, /): ...
    def modify_array(self, /): ...
    def output(self, object, /): ...
    def padBytes(self, object, /): ...
    def pad_bytes(self, object, /): ...
    def setArray(self, object, /): ...
    def setStdfloatDouble(self, object, /): ...
    def set_array(self, object, /): ...
    def set_stdfloat_double(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def write(): ...
class DatagramBuffer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def copyDatagram(): ...
    def copy_datagram(): ...
    data = None
    file = None
    file_pos = None
    filename = None
    def flush(self, /): ...
    def getDatagram(self, object, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def getTimestamp(self, /): ...
    def getVfile(self, /): ...
    def get_datagram(self, object, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def get_timestamp(self, /): ...
    def get_vfile(self, /): ...
    def isEof(self, /): ...
    def isError(self, /): ...
    def is_eof(self, /): ...
    def is_error(self, /): ...
    def putDatagram(self, object, /): ...
    def put_datagram(self, object, /): ...
    def saveDatagram(self, object, /): ...
    def save_datagram(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToDatagramGenerator(self, /): ...
    def upcastToDatagramSink(self, /): ...
    def upcast_to_DatagramGenerator(self, /): ...
    def upcast_to_DatagramSink(self, /): ...
class DatagramGenerator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getDatagram(self, object, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def getTimestamp(self, /): ...
    def getVfile(self, /): ...
    def get_datagram(self, object, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def get_timestamp(self, /): ...
    def get_vfile(self, /): ...
    def isEof(self, /): ...
    def isError(self, /): ...
    def is_eof(self, /): ...
    def is_error(self, /): ...
    def saveDatagram(self, object, /): ...
    def save_datagram(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DatagramGeneratorNet:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def getCurrentQueueSize(self, /): ...
    def getDatagram(self, object, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def getManager(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNumThreads(self, /): ...
    def getOverflowFlag(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def getTimestamp(self, /): ...
    def getVfile(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_datagram(self, object, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def get_manager(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_num_threads(self, /): ...
    def get_overflow_flag(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def get_timestamp(self, /): ...
    def get_vfile(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isEof(self, /): ...
    def isError(self, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_eof(self, /): ...
    def is_error(self, /): ...
    def is_polling(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def saveDatagram(self, object, /): ...
    def save_datagram(self, object, /): ...
    def setMaxQueueSize(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConnectionReader(self, /): ...
    def upcastToDatagramGenerator(self, /): ...
    def upcastToQueuedReturnDatagram(self, /): ...
    def upcast_to_ConnectionReader(self, /): ...
    def upcast_to_DatagramGenerator(self, /): ...
    def upcast_to_QueuedReturn_Datagram(self, /): ...
class DatagramInputFile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    def getDatagram(self, object, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def getStream(self, /): ...
    def getTimestamp(self, /): ...
    def getVfile(self, /): ...
    def get_datagram(self, object, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def get_stream(self, /): ...
    def get_timestamp(self, /): ...
    def get_vfile(self, /): ...
    def isEof(self, /): ...
    def isError(self, /): ...
    def is_eof(self, /): ...
    def is_error(self, /): ...
    def open(): ...
    def saveDatagram(self, object, /): ...
    def save_datagram(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DatagramIterator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def extractBytes(self, object, /): ...
    def extract_bytes(self, object, /): ...
    def getBeFloat32(self, /): ...
    def getBeFloat64(self, /): ...
    def getBeInt16(self, /): ...
    def getBeInt32(self, /): ...
    def getBeInt64(self, /): ...
    def getBeUint16(self, /): ...
    def getBeUint32(self, /): ...
    def getBeUint64(self, /): ...
    def getBlob(self, /): ...
    def getBlob32(self, /): ...
    def getBool(self, /): ...
    def getClassType(): ...
    def getCurrentIndex(self, /): ...
    def getDatagram(self, /): ...
    def getFixedString(self, object, /): ...
    def getFloat32(self, /): ...
    def getFloat64(self, /): ...
    def getInt16(self, /): ...
    def getInt32(self, /): ...
    def getInt64(self, /): ...
    def getInt8(self, /): ...
    def getRemainingBytes(self, /): ...
    def getRemainingSize(self, /): ...
    def getStdfloat(self, /): ...
    def getString(self, /): ...
    def getString32(self, /): ...
    def getUint16(self, /): ...
    def getUint32(self, /): ...
    def getUint64(self, /): ...
    def getUint8(self, /): ...
    def getWstring(self, /): ...
    def getZString(self, /): ...
    def get_be_float32(self, /): ...
    def get_be_float64(self, /): ...
    def get_be_int16(self, /): ...
    def get_be_int32(self, /): ...
    def get_be_int64(self, /): ...
    def get_be_uint16(self, /): ...
    def get_be_uint32(self, /): ...
    def get_be_uint64(self, /): ...
    def get_blob(self, /): ...
    def get_blob32(self, /): ...
    def get_bool(self, /): ...
    def get_class_type(): ...
    def get_current_index(self, /): ...
    def get_datagram(self, /): ...
    def get_fixed_string(self, object, /): ...
    def get_float32(self, /): ...
    def get_float64(self, /): ...
    def get_int16(self, /): ...
    def get_int32(self, /): ...
    def get_int64(self, /): ...
    def get_int8(self, /): ...
    def get_remaining_bytes(self, /): ...
    def get_remaining_size(self, /): ...
    def get_stdfloat(self, /): ...
    def get_string(self, /): ...
    def get_string32(self, /): ...
    def get_uint16(self, /): ...
    def get_uint32(self, /): ...
    def get_uint64(self, /): ...
    def get_uint8(self, /): ...
    def get_wstring(self, /): ...
    def get_z_string(self, /): ...
    def output(self, object, /): ...
    def skipBytes(self, object, /): ...
    def skip_bytes(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DatagramOutputFile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    def copyDatagram(): ...
    def copy_datagram(): ...
    file = None
    file_pos = None
    filename = None
    def flush(self, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def isError(self, /): ...
    def is_error(self, /): ...
    def open(): ...
    def putDatagram(self, object, /): ...
    def put_datagram(self, object, /): ...
    stream = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeHeader(self, object, /): ...
    def write_header(self, object, /): ...
class DatagramSink:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def copyDatagram(): ...
    def copy_datagram(): ...
    file = None
    file_pos = None
    filename = None
    def flush(self, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def isError(self, /): ...
    def is_error(self, /): ...
    def putDatagram(self, object, /): ...
    def put_datagram(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DatagramSinkNet:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def copyDatagram(): ...
    def copy_datagram(): ...
    file = None
    file_pos = None
    filename = None
    def flush(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getFile(self, /): ...
    def getFilePos(self, /): ...
    def getFilename(self, /): ...
    def getManager(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNumThreads(self, /): ...
    def getRawMode(self, /): ...
    def getTarget(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_file(self, /): ...
    def get_file_pos(self, /): ...
    def get_filename(self, /): ...
    def get_manager(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_num_threads(self, /): ...
    def get_raw_mode(self, /): ...
    def get_target(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isError(self, /): ...
    def isImmediate(self, /): ...
    def isValidForUdp(self, object, /): ...
    def is_error(self, /): ...
    def is_immediate(self, /): ...
    def is_valid_for_udp(self, object, /): ...
    def putDatagram(self, object, /): ...
    def put_datagram(self, object, /): ...
    def send(): ...
    def setMaxQueueSize(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTarget(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_target(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConnectionWriter(self, /): ...
    def upcastToDatagramSink(self, /): ...
    def upcast_to_ConnectionWriter(self, /): ...
    def upcast_to_DatagramSink(self, /): ...
class DecalEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class Decompressor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decompress(self, object, /): ...
    def getProgress(self, /): ...
    def get_progress(self, /): ...
    def initiate(): ...
    progress = None
    def run(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DepthOffsetAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMaxValue(self, /): ...
    def getMinValue(self, /): ...
    def getNumAttribs(): ...
    def getOffset(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_max_value(self, /): ...
    def get_min_value(self, /): ...
    def get_num_attribs(): ...
    def get_offset(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    max_value = None
    min_value = None
    offset = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class DepthTestAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class DepthWriteAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MOn:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_on:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class DialNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDials(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_dials(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isDialKnown(self, object, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_dial_known(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def readDial(self, object, /): ...
    def read_dial(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class DirectionalLight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSpecularColor(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_specular_color(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    direction = None
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDirection(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_direction(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    point = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setDirection(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPoint(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setSpecularColor(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_direction(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_point(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_specular_color(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    specular_color = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class DisplayInformation:
    ...
    DSCreateDeviceError:int = None
    DSCreateWindowError:int = None
    DSDirect3dCreateError:int = None
    DSSuccess:int = None
    DSUnknown:int = None
    DS_create_device_error:int = None
    DS_create_window_error:int = None
    DS_direct_3d_create_error:int = None
    DS_success:int = None
    DS_unknown:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getAvailablePageFileSize(self, /): ...
    def getAvailablePhysicalMemory(self, /): ...
    def getAvailableProcessVirtualMemory(self, /): ...
    def getCpuBrandIndex(self, /): ...
    def getCpuBrandString(self, /): ...
    def getCpuFrequency(self, /): ...
    def getCpuTime(): ...
    def getCpuVendorString(self, /): ...
    def getCpuVersionInformation(self, /): ...
    def getCurrentCpuFrequency(self, /): ...
    def getCurrentDisplayModeIndex(self, /): ...
    def getDeviceId(self, /): ...
    def getDisplayMode(self, object, /): ...
    def getDisplayModeBitsPerPixel(self, object, /): ...
    def getDisplayModeFullscreenOnly(self, object, /): ...
    def getDisplayModeHeight(self, object, /): ...
    def getDisplayModeRefreshRate(self, object, /): ...
    def getDisplayModeWidth(self, object, /): ...
    def getDisplayModes(self, /): ...
    def getDisplayState(self, /): ...
    def getDriverBuild(self, /): ...
    def getDriverDateDay(self, /): ...
    def getDriverDateMonth(self, /): ...
    def getDriverDateYear(self, /): ...
    def getDriverProduct(self, /): ...
    def getDriverSubVersion(self, /): ...
    def getDriverVersion(self, /): ...
    def getMaximumCpuFrequency(self, /): ...
    def getMaximumWindowHeight(self, /): ...
    def getMaximumWindowWidth(self, /): ...
    def getMemoryLoad(self, /): ...
    def getNumCpuCores(self, /): ...
    def getNumLogicalCpus(self, /): ...
    def getOsPlatformId(self, /): ...
    def getOsVersionBuild(self, /): ...
    def getOsVersionMajor(self, /): ...
    def getOsVersionMinor(self, /): ...
    def getPageFaultCount(self, /): ...
    def getPageFileSize(self, /): ...
    def getPageFileUsage(self, /): ...
    def getPeakPageFileUsage(self, /): ...
    def getPeakProcessMemory(self, /): ...
    def getPhysicalMemory(self, /): ...
    def getProcessMemory(self, /): ...
    def getProcessVirtualMemory(self, /): ...
    def getShaderModel(self, /): ...
    def getTextureMemory(self, /): ...
    def getTotalDisplayModes(self, /): ...
    def getVendorId(self, /): ...
    def getVideoMemory(self, /): ...
    def getWindowBitsPerPixel(self, /): ...
    def get_available_page_file_size(self, /): ...
    def get_available_physical_memory(self, /): ...
    def get_available_process_virtual_memory(self, /): ...
    def get_cpu_brand_index(self, /): ...
    def get_cpu_brand_string(self, /): ...
    def get_cpu_frequency(self, /): ...
    def get_cpu_time(): ...
    def get_cpu_vendor_string(self, /): ...
    def get_cpu_version_information(self, /): ...
    def get_current_cpu_frequency(self, /): ...
    def get_current_display_mode_index(self, /): ...
    def get_device_id(self, /): ...
    def get_display_mode(self, object, /): ...
    def get_display_mode_bits_per_pixel(self, object, /): ...
    def get_display_mode_fullscreen_only(self, object, /): ...
    def get_display_mode_height(self, object, /): ...
    def get_display_mode_refresh_rate(self, object, /): ...
    def get_display_mode_width(self, object, /): ...
    def get_display_modes(self, /): ...
    def get_display_state(self, /): ...
    def get_driver_build(self, /): ...
    def get_driver_date_day(self, /): ...
    def get_driver_date_month(self, /): ...
    def get_driver_date_year(self, /): ...
    def get_driver_product(self, /): ...
    def get_driver_sub_version(self, /): ...
    def get_driver_version(self, /): ...
    def get_maximum_cpu_frequency(self, /): ...
    def get_maximum_window_height(self, /): ...
    def get_maximum_window_width(self, /): ...
    def get_memory_load(self, /): ...
    def get_num_cpu_cores(self, /): ...
    def get_num_logical_cpus(self, /): ...
    def get_os_platform_id(self, /): ...
    def get_os_version_build(self, /): ...
    def get_os_version_major(self, /): ...
    def get_os_version_minor(self, /): ...
    def get_page_fault_count(self, /): ...
    def get_page_file_size(self, /): ...
    def get_page_file_usage(self, /): ...
    def get_peak_page_file_usage(self, /): ...
    def get_peak_process_memory(self, /): ...
    def get_physical_memory(self, /): ...
    def get_process_memory(self, /): ...
    def get_process_virtual_memory(self, /): ...
    def get_shader_model(self, /): ...
    def get_texture_memory(self, /): ...
    def get_total_display_modes(self, /): ...
    def get_vendor_id(self, /): ...
    def get_video_memory(self, /): ...
    def get_window_bits_per_pixel(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def updateCpuFrequency(self, object, /): ...
    def updateMemoryInformation(self, /): ...
    def update_cpu_frequency(self, object, /): ...
    def update_memory_information(self, /): ...
class DisplayMode:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bits_per_pixel = None
    fullscreen_only = None
    height = None
    def output(self, object, /): ...
    refresh_rate = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    width = None
class DisplayRegion:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    camera = None
    def clearCullCallback(self, /): ...
    def clearCullResult(self, /): ...
    def clearDrawCallback(self, /): ...
    clear_color = None
    def clear_cull_callback(self, /): ...
    def clear_cull_result(self, /): ...
    clear_depth = None
    def clear_draw_callback(self, /): ...
    clear_stencil = None
    cull_callback = None
    cull_traverser = None
    dimensions = None
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    draw_callback = None
    def getBottom(): ...
    def getCamera(): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getCullCallback(self, /): ...
    def getCullTraverser(self, /): ...
    def getDimensions(): ...
    def getDrawCallback(self, /): ...
    def getIncompleteRender(self, /): ...
    def getLeft(): ...
    def getLensIndex(self, /): ...
    def getNumRegions(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelHeight(): ...
    def getPixelSize(): ...
    def getPixelWidth(): ...
    def getPixelZoom(self, /): ...
    def getRefCount(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRight(): ...
    def getScissorEnabled(self, /): ...
    def getScreenshot(): ...
    def getSort(self, /): ...
    def getStereoChannel(self, /): ...
    def getTargetTexPage(self, /): ...
    def getTexViewOffset(self, /): ...
    def getTextureReloadPriority(self, /): ...
    def getTop(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWindow(self, /): ...
    def get_bottom(): ...
    def get_camera(): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_cull_callback(self, /): ...
    def get_cull_traverser(self, /): ...
    def get_dimensions(): ...
    def get_draw_callback(self, /): ...
    def get_incomplete_render(self, /): ...
    def get_left(): ...
    def get_lens_index(self, /): ...
    def get_num_regions(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_height(): ...
    def get_pixel_size(): ...
    def get_pixel_width(): ...
    def get_pixel_zoom(self, /): ...
    def get_ref_count(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_right(): ...
    def get_scissor_enabled(self, /): ...
    def get_screenshot(): ...
    def get_sort(self, /): ...
    def get_stereo_channel(self, /): ...
    def get_target_tex_page(self, /): ...
    def get_tex_view_offset(self, /): ...
    def get_texture_reload_priority(self, /): ...
    def get_top(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_window(self, /): ...
    incomplete_render = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    lens_index = None
    def makeCullResultGraph(self, /): ...
    def makeScreenshotFilename(): ...
    def make_cull_result_graph(self, /): ...
    def make_screenshot_filename(): ...
    def output(self, object, /): ...
    pipe = None
    pixel_factor = None
    pixel_size = None
    pixel_zoom = None
    def ref(self, /): ...
    ref_count = None
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    scissor_enabled = None
    def setActive(self, object, /): ...
    def setCamera(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setCubeMapIndex(self, object, /): ...
    def setCullCallback(self, object, /): ...
    def setCullTraverser(self, object, /): ...
    def setDimensions(): ...
    def setDrawCallback(self, object, /): ...
    def setIncompleteRender(self, object, /): ...
    def setLensIndex(self, object, /): ...
    def setNumRegions(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setScissorEnabled(self, object, /): ...
    def setSort(self, object, /): ...
    def setStereoChannel(self, object, /): ...
    def setTargetTexPage(self, object, /): ...
    def setTexViewOffset(self, object, /): ...
    def setTextureReloadPriority(self, object, /): ...
    def set_active(self, object, /): ...
    def set_camera(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_cube_map_index(self, object, /): ...
    def set_cull_callback(self, object, /): ...
    def set_cull_traverser(self, object, /): ...
    def set_dimensions(): ...
    def set_draw_callback(self, object, /): ...
    def set_incomplete_render(self, object, /): ...
    def set_lens_index(self, object, /): ...
    def set_num_regions(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_scissor_enabled(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_stereo_channel(self, object, /): ...
    def set_target_tex_page(self, object, /): ...
    def set_tex_view_offset(self, object, /): ...
    def set_texture_reload_priority(self, object, /): ...
    sort = None
    stereo = None
    stereo_channel = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    target_tex_page = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    tex_view_offset = None
    texture_reload_priority = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    window = None
class DisplayRegionCullCallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getSceneSetup(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_scene_setup(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
class DisplayRegionDrawCallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getCullResult(self, /): ...
    def getSceneSetup(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_cull_result(self, /): ...
    def get_scene_setup(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
class DisplaySearchParameters:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def setMaximumBitsPerPixel(self, object, /): ...
    def setMaximumHeight(self, object, /): ...
    def setMaximumWidth(self, object, /): ...
    def setMinimumBitsPerPixel(self, object, /): ...
    def setMinimumHeight(self, object, /): ...
    def setMinimumWidth(self, object, /): ...
    def set_maximum_bits_per_pixel(self, object, /): ...
    def set_maximum_height(self, object, /): ...
    def set_maximum_width(self, object, /): ...
    def set_minimum_bits_per_pixel(self, object, /): ...
    def set_minimum_height(self, object, /): ...
    def set_minimum_width(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DocumentSpec:
    ...
    CCAllowCache:int = None
    CCNoCache:int = None
    CCRevalidate:int = None
    CC_allow_cache:int = None
    CC_no_cache:int = None
    CC_revalidate:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RMAny:int = None
    RMEqual:int = None
    RMEqualOrNewer:int = None
    RMNewer:int = None
    RM_any:int = None
    RM_equal:int = None
    RM_equal_or_newer:int = None
    RM_newer:int = None
    def assign(self, object, /): ...
    cache_control = None
    def clearDate(self, /): ...
    def clearTag(self, /): ...
    def clear_date(self, /): ...
    def clear_tag(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    date = None
    def getCacheControl(self, /): ...
    def getDate(self, /): ...
    def getRequestMode(self, /): ...
    def getTag(self, /): ...
    def getUrl(self, /): ...
    def get_cache_control(self, /): ...
    def get_date(self, /): ...
    def get_request_mode(self, /): ...
    def get_tag(self, /): ...
    def get_url(self, /): ...
    def hasDate(self, /): ...
    def hasTag(self, /): ...
    def has_date(self, /): ...
    def has_tag(self, /): ...
    def input(self, object, /): ...
    def output(self, object, /): ...
    request_mode = None
    def setCacheControl(self, object, /): ...
    def setDate(self, object, /): ...
    def setRequestMode(self, object, /): ...
    def setTag(self, object, /): ...
    def setUrl(self, object, /): ...
    def set_cache_control(self, object, /): ...
    def set_date(self, object, /): ...
    def set_request_mode(self, object, /): ...
    def set_tag(self, object, /): ...
    def set_url(self, object, /): ...
    tag = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    url = None
    def write(): ...
class DoubleBitMaskBitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DoubleBitMaskDoubleBitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DoubleBitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DoubleBitMask_BitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DoubleBitMask_DoubleBitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DownloadDb:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    StatusComplete:int = None
    StatusDecompressed:int = None
    StatusExtracted:int = None
    StatusIncomplete:int = None
    Status_complete:int = None
    Status_decompressed:int = None
    Status_extracted:int = None
    Status_incomplete:int = None
    def addClientMultifile(self, object, /): ...
    def addVersion(): ...
    def add_client_multifile(self, object, /): ...
    def add_version(): ...
    def clientMultifileComplete(self, object, /): ...
    def clientMultifileDecompressed(self, object, /): ...
    def clientMultifileExists(self, object, /): ...
    def clientMultifileExtracted(self, object, /): ...
    def client_multifile_complete(self, object, /): ...
    def client_multifile_decompressed(self, object, /): ...
    def client_multifile_exists(self, object, /): ...
    def client_multifile_extracted(self, object, /): ...
    def createNewServerDb(self, /): ...
    def create_new_server_db(self, /): ...
    def deleteClientMultifile(self, object, /): ...
    def delete_client_multifile(self, object, /): ...
    def expandClientMultifile(self, object, /): ...
    def expand_client_multifile(self, object, /): ...
    def getClientMultifileHash(self, object, /): ...
    def getClientMultifileName(self, object, /): ...
    def getClientMultifilePhase(self, object, /): ...
    def getClientMultifileSize(self, object, /): ...
    def getClientNumMultifiles(self, /): ...
    def getHash(): ...
    def getNumVersions(self, object, /): ...
    def getServerFileName(): ...
    def getServerMultifileHash(self, object, /): ...
    def getServerMultifileName(self, object, /): ...
    def getServerMultifilePhase(self, object, /): ...
    def getServerMultifileSize(self, object, /): ...
    def getServerNumFiles(self, object, /): ...
    def getServerNumMultifiles(self, /): ...
    def getVersion(): ...
    def get_client_multifile_hash(self, object, /): ...
    def get_client_multifile_name(self, object, /): ...
    def get_client_multifile_phase(self, object, /): ...
    def get_client_multifile_size(self, object, /): ...
    def get_client_num_multifiles(self, /): ...
    def get_hash(): ...
    def get_num_versions(self, object, /): ...
    def get_server_file_name(): ...
    def get_server_multifile_hash(self, object, /): ...
    def get_server_multifile_name(self, object, /): ...
    def get_server_multifile_phase(self, object, /): ...
    def get_server_multifile_size(self, object, /): ...
    def get_server_num_files(self, object, /): ...
    def get_server_num_multifiles(self, /): ...
    def get_version(): ...
    def hasVersion(self, object, /): ...
    def has_version(self, object, /): ...
    def insertNewVersion(): ...
    def insert_new_version(): ...
    def output(self, object, /): ...
    def serverAddFile(): ...
    def serverAddMultifile(): ...
    def server_add_file(): ...
    def server_add_multifile(): ...
    def setClientMultifileComplete(self, object, /): ...
    def setClientMultifileDecompressed(self, object, /): ...
    def setClientMultifileDeltaSize(): ...
    def setClientMultifileExtracted(self, object, /): ...
    def setClientMultifileHash(): ...
    def setClientMultifileIncomplete(self, object, /): ...
    def setClientMultifileSize(): ...
    def setNumVersions(): ...
    def setServerMultifileHash(): ...
    def setServerMultifileSize(): ...
    def set_client_multifile_complete(self, object, /): ...
    def set_client_multifile_decompressed(self, object, /): ...
    def set_client_multifile_delta_size(): ...
    def set_client_multifile_extracted(self, object, /): ...
    def set_client_multifile_hash(): ...
    def set_client_multifile_incomplete(self, object, /): ...
    def set_client_multifile_size(): ...
    def set_num_versions(): ...
    def set_server_multifile_hash(): ...
    def set_server_multifile_size(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
    def writeClientDb(self, object, /): ...
    def writeServerDb(self, object, /): ...
    def writeVersionMap(self, object, /): ...
    def write_client_db(self, object, /): ...
    def write_server_db(self, object, /): ...
    def write_version_map(self, object, /): ...
class DrawMask:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class DrawableRegion:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    clear_color = None
    clear_depth = None
    clear_stencil = None
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getRenderbufferType(object, /): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def isAnyClearActive(self, /): ...
    def is_any_clear_active(self, /): ...
    pixel_factor = None
    pixel_zoom = None
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setPixelZoom(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_pixel_zoom(self, object, /): ...
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class DriveInterface:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAllButtons(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearButton(self, object, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_all_buttons(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_button(self, object, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def forceDgraph(self, /): ...
    def force_dgraph(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getForceMouse(self, /): ...
    def getForwardSpeed(self, /): ...
    def getH(self, /): ...
    def getHorizontalDeadZone(self, /): ...
    def getHorizontalRampDownTime(self, /): ...
    def getHorizontalRampUpTime(self, /): ...
    def getHpr(self, /): ...
    def getIgnoreMouse(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMat(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getP(self, /): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPos(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getR(self, /): ...
    def getRefCount(self, /): ...
    def getReverseSpeed(self, /): ...
    def getRotSpeed(self, /): ...
    def getRotateSpeed(self, /): ...
    def getSpeed(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getStopThisFrame(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVerticalDeadZone(self, /): ...
    def getVerticalRampDownTime(self, /): ...
    def getVerticalRampUpTime(self, /): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_force_mouse(self, /): ...
    def get_forward_speed(self, /): ...
    def get_h(self, /): ...
    def get_horizontal_dead_zone(self, /): ...
    def get_horizontal_ramp_down_time(self, /): ...
    def get_horizontal_ramp_up_time(self, /): ...
    def get_hpr(self, /): ...
    def get_ignore_mouse(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_mat(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_p(self, /): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_pos(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_r(self, /): ...
    def get_ref_count(self, /): ...
    def get_reverse_speed(self, /): ...
    def get_rot_speed(self, /): ...
    def get_rotate_speed(self, /): ...
    def get_speed(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_stop_this_frame(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_vertical_dead_zone(self, /): ...
    def get_vertical_ramp_down_time(self, /): ...
    def get_vertical_ramp_up_time(self, /): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def requireButton(): ...
    def require_button(): ...
    def reset(self, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setForceMouse(self, object, /): ...
    def setForceRoll(self, object, /): ...
    def setForwardSpeed(self, object, /): ...
    def setH(self, object, /): ...
    def setHorizontalDeadZone(self, object, /): ...
    def setHorizontalRampDownTime(self, object, /): ...
    def setHorizontalRampUpTime(self, object, /): ...
    def setHpr(): ...
    def setIgnoreMouse(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMat(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setP(self, object, /): ...
    def setPos(): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setR(self, object, /): ...
    def setReverseSpeed(self, object, /): ...
    def setRotateSpeed(self, object, /): ...
    def setState(): ...
    def setStopThisFrame(self, object, /): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVerticalDeadZone(self, object, /): ...
    def setVerticalRampDownTime(self, object, /): ...
    def setVerticalRampUpTime(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_force_mouse(self, object, /): ...
    def set_force_roll(self, object, /): ...
    def set_forward_speed(self, object, /): ...
    def set_h(self, object, /): ...
    def set_horizontal_dead_zone(self, object, /): ...
    def set_horizontal_ramp_down_time(self, object, /): ...
    def set_horizontal_ramp_up_time(self, object, /): ...
    def set_hpr(): ...
    def set_ignore_mouse(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_mat(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_p(self, object, /): ...
    def set_pos(): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_r(self, object, /): ...
    def set_reverse_speed(self, object, /): ...
    def set_rotate_speed(self, object, /): ...
    def set_state(): ...
    def set_stop_this_frame(self, object, /): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_vertical_dead_zone(self, object, /): ...
    def set_vertical_ramp_down_time(self, object, /): ...
    def set_vertical_ramp_up_time(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
def Dtool_BorrowThisReference(): ...
Dtool_PyNativeInterface:int = None
class DynamicTextFont:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RMDistanceField:int = None
    RMExtruded:int = None
    RMInvalid:int = None
    RMPolygon:int = None
    RMSolid:int = None
    RMTexture:int = None
    RMWireframe:int = None
    RM_distance_field:int = None
    RM_extruded:int = None
    RM_invalid:int = None
    RM_polygon:int = None
    RM_solid:int = None
    RM_texture:int = None
    RM_wireframe:int = None
    WODefault:int = None
    WOInvalid:int = None
    WOLeft:int = None
    WORight:int = None
    WO_default:int = None
    WO_invalid:int = None
    WO_left:int = None
    WO_right:int = None
    anisotropic_degree = None
    bg = None
    def clear(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    fg = None
    font_pixel_size = None
    def garbageCollect(self, /): ...
    def garbage_collect(self, /): ...
    def getAnisotropicDegree(self, /): ...
    def getBg(self, /): ...
    def getClassType(): ...
    def getFg(self, /): ...
    def getFontPixelSize(self, /): ...
    def getGlyph(self, object, /): ...
    def getKerning(): ...
    def getLineHeight(self, /): ...
    def getMagfilter(self, /): ...
    def getMinfilter(self, /): ...
    def getName(self, /): ...
    def getNativeAntialias(self, /): ...
    def getNumPages(self, /): ...
    def getOutlineColor(self, /): ...
    def getOutlineFeather(self, /): ...
    def getOutlineWidth(self, /): ...
    def getPage(self, object, /): ...
    def getPageSize(self, /): ...
    def getPageXSize(self, /): ...
    def getPageYSize(self, /): ...
    def getPages(self, /): ...
    def getPixelSize(self, /): ...
    def getPixelsPerUnit(self, /): ...
    def getPointSize(self, /): ...
    def getPointsPerInch(): ...
    def getPointsPerUnit(): ...
    def getPolyMargin(self, /): ...
    def getRefCount(self, /): ...
    def getRenderMode(self, /): ...
    def getScaleFactor(self, /): ...
    def getSpaceAdvance(self, /): ...
    def getTexFormat(self, /): ...
    def getTextureMargin(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWindingOrder(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_bg(self, /): ...
    def get_class_type(): ...
    def get_fg(self, /): ...
    def get_font_pixel_size(self, /): ...
    def get_glyph(self, object, /): ...
    def get_kerning(): ...
    def get_line_height(self, /): ...
    def get_magfilter(self, /): ...
    def get_minfilter(self, /): ...
    def get_name(self, /): ...
    def get_native_antialias(self, /): ...
    def get_num_pages(self, /): ...
    def get_outline_color(self, /): ...
    def get_outline_feather(self, /): ...
    def get_outline_width(self, /): ...
    def get_page(self, object, /): ...
    def get_page_size(self, /): ...
    def get_page_x_size(self, /): ...
    def get_page_y_size(self, /): ...
    def get_pages(self, /): ...
    def get_pixel_size(self, /): ...
    def get_pixels_per_unit(self, /): ...
    def get_point_size(self, /): ...
    def get_points_per_inch(): ...
    def get_points_per_unit(): ...
    def get_poly_margin(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_mode(self, /): ...
    def get_scale_factor(self, /): ...
    def get_space_advance(self, /): ...
    def get_tex_format(self, /): ...
    def get_texture_margin(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_winding_order(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    line_height = None
    magfilter = None
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    minfilter = None
    name = None
    native_antialias = None
    def output(self, object, /): ...
    page_size = None
    pages = None
    pixels_per_unit = None
    point_size = None
    poly_margin = None
    def ref(self, /): ...
    ref_count = None
    render_mode = None
    scale_factor = None
    def setAnisotropicDegree(self, object, /): ...
    def setBg(self, object, /): ...
    def setFg(self, object, /): ...
    def setLineHeight(self, object, /): ...
    def setMagfilter(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setName(self, object, /): ...
    def setNativeAntialias(self, object, /): ...
    def setOutline(): ...
    def setPageSize(): ...
    def setPixelSize(self, object, /): ...
    def setPixelsPerUnit(self, object, /): ...
    def setPointSize(self, object, /): ...
    def setPolyMargin(self, object, /): ...
    def setRenderMode(self, object, /): ...
    def setScaleFactor(self, object, /): ...
    def setSpaceAdvance(self, object, /): ...
    def setTextureMargin(self, object, /): ...
    def setWindingOrder(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_bg(self, object, /): ...
    def set_fg(self, object, /): ...
    def set_line_height(self, object, /): ...
    def set_magfilter(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_name(self, object, /): ...
    def set_native_antialias(self, object, /): ...
    def set_outline(): ...
    def set_page_size(): ...
    def set_pixel_size(self, object, /): ...
    def set_pixels_per_unit(self, object, /): ...
    def set_point_size(self, object, /): ...
    def set_poly_margin(self, object, /): ...
    def set_render_mode(self, object, /): ...
    def set_scale_factor(self, object, /): ...
    def set_space_advance(self, object, /): ...
    def set_texture_margin(self, object, /): ...
    def set_winding_order(self, object, /): ...
    space_advance = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    tex_format = None
    texture_margin = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToFreetypeFont(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTextFont(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_FreetypeFont(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TextFont(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    valid = None
    winding_order = None
    def write(): ...
class DynamicTextGlyph:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    advance = None
    character = None
    def getAdvance(self, /): ...
    def getBottom(self, /): ...
    def getCharacter(self, /): ...
    def getClassType(): ...
    def getGeom(self, object, /): ...
    def getLeft(self, /): ...
    def getPage(self, /): ...
    def getQuad(): ...
    def getRefCount(self, /): ...
    def getRight(self, /): ...
    def getState(self, /): ...
    def getTop(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUvBottom(self, /): ...
    def getUvLeft(self, /): ...
    def getUvRight(self, /): ...
    def getUvTop(self, /): ...
    def get_advance(self, /): ...
    def get_bottom(self, /): ...
    def get_character(self, /): ...
    def get_class_type(): ...
    def get_geom(self, object, /): ...
    def get_left(self, /): ...
    def get_page(self, /): ...
    def get_quad(): ...
    def get_ref_count(self, /): ...
    def get_right(self, /): ...
    def get_state(self, /): ...
    def get_top(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uv_bottom(self, /): ...
    def get_uv_left(self, /): ...
    def get_uv_right(self, /): ...
    def get_uv_top(self, /): ...
    def hasQuad(self, /): ...
    def has_quad(self, /): ...
    def intersects(): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isWhitespace(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_whitespace(self, /): ...
    page = None
    def ref(self, /): ...
    ref_count = None
    state = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class DynamicTextPage:
    ...
    CMDefault:int = None
    CMDxt1:int = None
    CMDxt2:int = None
    CMDxt3:int = None
    CMDxt4:int = None
    CMDxt5:int = None
    CMEac:int = None
    CMEtc1:int = None
    CMEtc2:int = None
    CMFxt1:int = None
    CMOff:int = None
    CMOn:int = None
    CMPvr12bpp:int = None
    CMPvr14bpp:int = None
    CMRgtc:int = None
    CM_default:int = None
    CM_dxt1:int = None
    CM_dxt2:int = None
    CM_dxt3:int = None
    CM_dxt4:int = None
    CM_dxt5:int = None
    CM_eac:int = None
    CM_etc1:int = None
    CM_etc2:int = None
    CM_fxt1:int = None
    CM_off:int = None
    CM_on:int = None
    CM_pvr1_2bpp:int = None
    CM_pvr1_4bpp:int = None
    CM_rgtc:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FAlpha:int = None
    FBlue:int = None
    FColorIndex:int = None
    FDepthComponent:int = None
    FDepthComponent16:int = None
    FDepthComponent24:int = None
    FDepthComponent32:int = None
    FDepthStencil:int = None
    FGreen:int = None
    FLuminance:int = None
    FLuminanceAlpha:int = None
    FLuminanceAlphamask:int = None
    FR11G11B10:int = None
    FR16:int = None
    FR16i:int = None
    FR32:int = None
    FR32i:int = None
    FR8i:int = None
    FRed:int = None
    FRg:int = None
    FRg16:int = None
    FRg16i:int = None
    FRg32:int = None
    FRg32i:int = None
    FRg8i:int = None
    FRgb:int = None
    FRgb10A2:int = None
    FRgb12:int = None
    FRgb16:int = None
    FRgb16i:int = None
    FRgb32:int = None
    FRgb32i:int = None
    FRgb332:int = None
    FRgb5:int = None
    FRgb8:int = None
    FRgb8i:int = None
    FRgb9E5:int = None
    FRgba:int = None
    FRgba12:int = None
    FRgba16:int = None
    FRgba16i:int = None
    FRgba32:int = None
    FRgba32i:int = None
    FRgba4:int = None
    FRgba5:int = None
    FRgba8:int = None
    FRgba8i:int = None
    FRgbm:int = None
    FSluminance:int = None
    FSluminanceAlpha:int = None
    FSrgb:int = None
    FSrgbAlpha:int = None
    FTDefault:int = None
    FTInvalid:int = None
    FTLinear:int = None
    FTLinearMipmapLinear:int = None
    FTLinearMipmapNearest:int = None
    FTNearest:int = None
    FTNearestMipmapLinear:int = None
    FTNearestMipmapNearest:int = None
    FTShadow:int = None
    FT_default:int = None
    FT_invalid:int = None
    FT_linear:int = None
    FT_linear_mipmap_linear:int = None
    FT_linear_mipmap_nearest:int = None
    FT_nearest:int = None
    FT_nearest_mipmap_linear:int = None
    FT_nearest_mipmap_nearest:int = None
    FT_shadow:int = None
    F_alpha:int = None
    F_blue:int = None
    F_color_index:int = None
    F_depth_component:int = None
    F_depth_component16:int = None
    F_depth_component24:int = None
    F_depth_component32:int = None
    F_depth_stencil:int = None
    F_green:int = None
    F_luminance:int = None
    F_luminance_alpha:int = None
    F_luminance_alphamask:int = None
    F_r11_g11_b10:int = None
    F_r16:int = None
    F_r16i:int = None
    F_r32:int = None
    F_r32i:int = None
    F_r8i:int = None
    F_red:int = None
    F_rg:int = None
    F_rg16:int = None
    F_rg16i:int = None
    F_rg32:int = None
    F_rg32i:int = None
    F_rg8i:int = None
    F_rgb:int = None
    F_rgb10_a2:int = None
    F_rgb12:int = None
    F_rgb16:int = None
    F_rgb16i:int = None
    F_rgb32:int = None
    F_rgb32i:int = None
    F_rgb332:int = None
    F_rgb5:int = None
    F_rgb8:int = None
    F_rgb8i:int = None
    F_rgb9_e5:int = None
    F_rgba:int = None
    F_rgba12:int = None
    F_rgba16:int = None
    F_rgba16i:int = None
    F_rgba32:int = None
    F_rgba32i:int = None
    F_rgba4:int = None
    F_rgba5:int = None
    F_rgba8:int = None
    F_rgba8i:int = None
    F_rgbm:int = None
    F_sluminance:int = None
    F_sluminance_alpha:int = None
    F_srgb:int = None
    F_srgb_alpha:int = None
    QLBest:int = None
    QLDefault:int = None
    QLFastest:int = None
    QLNormal:int = None
    QL_best:int = None
    QL_default:int = None
    QL_fastest:int = None
    QL_normal:int = None
    TByte:int = None
    TFloat:int = None
    THalfFloat:int = None
    TInt:int = None
    TShort:int = None
    TT1dTexture:int = None
    TT1dTextureArray:int = None
    TT2dTexture:int = None
    TT2dTextureArray:int = None
    TT3dTexture:int = None
    TTBufferTexture:int = None
    TTCubeMap:int = None
    TTCubeMapArray:int = None
    TT_1d_texture:int = None
    TT_1d_texture_array:int = None
    TT_2d_texture:int = None
    TT_2d_texture_array:int = None
    TT_3d_texture:int = None
    TT_buffer_texture:int = None
    TT_cube_map:int = None
    TT_cube_map_array:int = None
    TUnsignedByte:int = None
    TUnsignedInt:int = None
    TUnsignedInt248:int = None
    TUnsignedShort:int = None
    T_byte:int = None
    T_float:int = None
    T_half_float:int = None
    T_int:int = None
    T_short:int = None
    T_unsigned_byte:int = None
    T_unsigned_int:int = None
    T_unsigned_int_24_8:int = None
    T_unsigned_short:int = None
    WMBorderColor:int = None
    WMClamp:int = None
    WMInvalid:int = None
    WMMirror:int = None
    WMMirrorOnce:int = None
    WMRepeat:int = None
    WM_border_color:int = None
    WM_clamp:int = None
    WM_invalid:int = None
    WM_mirror:int = None
    WM_mirror_once:int = None
    WM_repeat:int = None
    alpha_filename = None
    alpha_fullpath = None
    anisotropic_degree = None
    auto_texture_scale = None
    aux_data = None
    border_color = None
    cacheable = None
    def clear(self, /): ...
    def clearAlphaFilename(self, /): ...
    def clearAlphaFullpath(self, /): ...
    def clearAuxData(self, object, /): ...
    def clearClearColor(self, /): ...
    def clearFilename(self, /): ...
    def clearFullpath(self, /): ...
    def clearImage(self, /): ...
    def clearName(self, /): ...
    def clearRamImage(self, /): ...
    def clearRamMipmapImage(self, object, /): ...
    def clearRamMipmapImages(self, /): ...
    def clearSimpleRamImage(self, /): ...
    def clear_alpha_filename(self, /): ...
    def clear_alpha_fullpath(self, /): ...
    def clear_aux_data(self, object, /): ...
    def clear_clear_color(self, /): ...
    clear_color = None
    def clear_filename(self, /): ...
    def clear_fullpath(self, /): ...
    def clear_image(self, /): ...
    def clear_name(self, /): ...
    def clear_ram_image(self, /): ...
    def clear_ram_mipmap_image(self, object, /): ...
    def clear_ram_mipmap_images(self, /): ...
    def clear_simple_ram_image(self, /): ...
    component_type = None
    component_width = None
    def compressRamImage(): ...
    def compress_ram_image(): ...
    compression = None
    def considerRescale(): ...
    def consider_rescale(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default_sampler = None
    def downToPower2(object, /): ...
    def down_to_power_2(object, /): ...
    effective_anisotropic_degree = None
    effective_magfilter = None
    effective_minfilter = None
    effective_quality_level = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def estimateTextureMemory(self, /): ...
    def estimate_texture_memory(self, /): ...
    expected_num_mipmap_levels = None
    expected_ram_image_size = None
    expected_ram_page_size = None
    filename = None
    def fillin(): ...
    format = None
    def formatComponentType(object, /): ...
    def formatCompressionMode(object, /): ...
    def formatFormat(object, /): ...
    def formatQualityLevel(object, /): ...
    def formatTextureType(object, /): ...
    def format_component_type(object, /): ...
    def format_compression_mode(object, /): ...
    def format_format(object, /): ...
    def format_quality_level(object, /): ...
    def format_texture_type(object, /): ...
    fullpath = None
    def generateAlphaScaleMap(self, /): ...
    def generateNormalizationCubeMap(self, object, /): ...
    def generateRamMipmapImages(self, /): ...
    def generateSimpleRamImage(self, /): ...
    def generate_alpha_scale_map(self, /): ...
    def generate_normalization_cube_map(self, object, /): ...
    def generate_ram_mipmap_images(self, /): ...
    def generate_simple_ram_image(self, /): ...
    def getActive(self, object, /): ...
    def getAlphaFilename(self, /): ...
    def getAlphaFullpath(self, /): ...
    def getAnisotropicDegree(self, /): ...
    def getAutoTextureScale(self, /): ...
    def getAuxData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBorderColor(self, /): ...
    def getClassType(): ...
    def getClearColor(self, /): ...
    def getClearData(self, /): ...
    def getComponentType(self, /): ...
    def getComponentWidth(self, /): ...
    def getCompression(self, /): ...
    def getDataSizeBytes(self, object, /): ...
    def getDefaultSampler(self, /): ...
    def getEffectiveAnisotropicDegree(self, /): ...
    def getEffectiveMagfilter(self, /): ...
    def getEffectiveMinfilter(self, /): ...
    def getEffectiveQualityLevel(self, /): ...
    def getExpectedMipmapNumPages(self, object, /): ...
    def getExpectedMipmapXSize(self, object, /): ...
    def getExpectedMipmapYSize(self, object, /): ...
    def getExpectedMipmapZSize(self, object, /): ...
    def getExpectedNumMipmapLevels(self, /): ...
    def getExpectedRamImageSize(self, /): ...
    def getExpectedRamMipmapImageSize(self, object, /): ...
    def getExpectedRamMipmapPageSize(self, object, /): ...
    def getExpectedRamMipmapViewSize(self, object, /): ...
    def getExpectedRamPageSize(self, /): ...
    def getFilename(self, /): ...
    def getFormat(self, /): ...
    def getFullpath(self, /): ...
    def getImageModified(self, /): ...
    def getKeepRamImage(self, /): ...
    def getLoadedFromImage(self, /): ...
    def getLoadedFromTxo(self, /): ...
    def getMagfilter(self, /): ...
    def getMatchFramebufferFormat(self, /): ...
    def getMinfilter(self, /): ...
    def getName(self, /): ...
    def getNumComponents(self, /): ...
    def getNumLoadableRamMipmapImages(self, /): ...
    def getNumPages(self, /): ...
    def getNumRamMipmapImages(self, /): ...
    def getNumViews(self, /): ...
    def getOrigFileXSize(self, /): ...
    def getOrigFileYSize(self, /): ...
    def getOrigFileZSize(self, /): ...
    def getPadXSize(self, /): ...
    def getPadYSize(self, /): ...
    def getPadZSize(self, /): ...
    def getPostLoadStoreCache(self, /): ...
    def getPropertiesModified(self, /): ...
    def getQualityLevel(self, /): ...
    def getRamImage(self, /): ...
    def getRamImageAs(self, object, /): ...
    def getRamImageCompression(self, /): ...
    def getRamImageSize(self, /): ...
    def getRamMipmapImage(self, object, /): ...
    def getRamMipmapImageSize(self, object, /): ...
    def getRamMipmapPageSize(self, object, /): ...
    def getRamMipmapViewSize(self, object, /): ...
    def getRamPageSize(self, /): ...
    def getRamViewSize(self, /): ...
    def getRefCount(self, /): ...
    def getRenderToTexture(self, /): ...
    def getResident(self, object, /): ...
    def getSimpleImageModified(self, /): ...
    def getSimpleRamImage(self, /): ...
    def getSimpleRamImageSize(self, /): ...
    def getSimpleXSize(self, /): ...
    def getSimpleYSize(self, /): ...
    def getSize(self, /): ...
    def getTexScale(self, /): ...
    def getTextureType(self, /): ...
    def getTexturesPower2(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUncompressedRamImage(self, /): ...
    def getUsageHint(self, /): ...
    def getWrapU(self, /): ...
    def getWrapV(self, /): ...
    def getWrapW(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def getZSize(self, /): ...
    def get_active(self, object, /): ...
    def get_alpha_filename(self, /): ...
    def get_alpha_fullpath(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_auto_texture_scale(self, /): ...
    def get_aux_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_border_color(self, /): ...
    def get_class_type(): ...
    def get_clear_color(self, /): ...
    def get_clear_data(self, /): ...
    def get_component_type(self, /): ...
    def get_component_width(self, /): ...
    def get_compression(self, /): ...
    def get_data_size_bytes(self, object, /): ...
    def get_default_sampler(self, /): ...
    def get_effective_anisotropic_degree(self, /): ...
    def get_effective_magfilter(self, /): ...
    def get_effective_minfilter(self, /): ...
    def get_effective_quality_level(self, /): ...
    def get_expected_mipmap_num_pages(self, object, /): ...
    def get_expected_mipmap_x_size(self, object, /): ...
    def get_expected_mipmap_y_size(self, object, /): ...
    def get_expected_mipmap_z_size(self, object, /): ...
    def get_expected_num_mipmap_levels(self, /): ...
    def get_expected_ram_image_size(self, /): ...
    def get_expected_ram_mipmap_image_size(self, object, /): ...
    def get_expected_ram_mipmap_page_size(self, object, /): ...
    def get_expected_ram_mipmap_view_size(self, object, /): ...
    def get_expected_ram_page_size(self, /): ...
    def get_filename(self, /): ...
    def get_format(self, /): ...
    def get_fullpath(self, /): ...
    def get_image_modified(self, /): ...
    def get_keep_ram_image(self, /): ...
    def get_loaded_from_image(self, /): ...
    def get_loaded_from_txo(self, /): ...
    def get_magfilter(self, /): ...
    def get_match_framebuffer_format(self, /): ...
    def get_minfilter(self, /): ...
    def get_name(self, /): ...
    def get_num_components(self, /): ...
    def get_num_loadable_ram_mipmap_images(self, /): ...
    def get_num_pages(self, /): ...
    def get_num_ram_mipmap_images(self, /): ...
    def get_num_views(self, /): ...
    def get_orig_file_x_size(self, /): ...
    def get_orig_file_y_size(self, /): ...
    def get_orig_file_z_size(self, /): ...
    def get_pad_x_size(self, /): ...
    def get_pad_y_size(self, /): ...
    def get_pad_z_size(self, /): ...
    def get_post_load_store_cache(self, /): ...
    def get_properties_modified(self, /): ...
    def get_quality_level(self, /): ...
    def get_ram_image(self, /): ...
    def get_ram_image_as(self, object, /): ...
    def get_ram_image_compression(self, /): ...
    def get_ram_image_size(self, /): ...
    def get_ram_mipmap_image(self, object, /): ...
    def get_ram_mipmap_image_size(self, object, /): ...
    def get_ram_mipmap_page_size(self, object, /): ...
    def get_ram_mipmap_view_size(self, object, /): ...
    def get_ram_page_size(self, /): ...
    def get_ram_view_size(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_to_texture(self, /): ...
    def get_resident(self, object, /): ...
    def get_simple_image_modified(self, /): ...
    def get_simple_ram_image(self, /): ...
    def get_simple_ram_image_size(self, /): ...
    def get_simple_x_size(self, /): ...
    def get_simple_y_size(self, /): ...
    def get_size(self, /): ...
    def get_tex_scale(self, /): ...
    def get_texture_type(self, /): ...
    def get_textures_power_2(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uncompressed_ram_image(self, /): ...
    def get_usage_hint(self, /): ...
    def get_wrap_u(self, /): ...
    def get_wrap_v(self, /): ...
    def get_wrap_w(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def get_z_size(self, /): ...
    def hasAllRamMipmapImages(self, /): ...
    def hasAlphaFilename(self, /): ...
    def hasAlphaFullpath(self, /): ...
    def hasAutoTextureScale(self, /): ...
    def hasClearColor(self, /): ...
    def hasCompression(self, /): ...
    def hasFilename(self, /): ...
    def hasFullpath(self, /): ...
    def hasName(self, /): ...
    def hasRamImage(self, /): ...
    def hasRamMipmapImage(self, object, /): ...
    def hasSimpleRamImage(self, /): ...
    def hasTexturesPower2(): ...
    def hasUncompressedRamImage(self, /): ...
    def has_all_ram_mipmap_images(self, /): ...
    def has_alpha_filename(self, /): ...
    def has_alpha_fullpath(self, /): ...
    def has_auto_texture_scale(self, /): ...
    def has_clear_color(self, /): ...
    def has_compression(self, /): ...
    def has_filename(self, /): ...
    def has_fullpath(self, /): ...
    def has_name(self, /): ...
    def has_ram_image(self, /): ...
    def has_ram_mipmap_image(self, object, /): ...
    def has_simple_ram_image(self, /): ...
    def has_textures_power_2(): ...
    def has_uncompressed_ram_image(self, /): ...
    image_modified = None
    def isCacheable(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_cacheable(self, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    keep_ram_image = None
    def load(): ...
    def loadRelated(self, object, /): ...
    def loadSubImage(): ...
    def load_related(self, object, /): ...
    def load_sub_image(): ...
    loaded_from_image = None
    loaded_from_txo = None
    magfilter = None
    def makeCopy(self, /): ...
    def makeFromTxo(): ...
    def makeRamImage(self, /): ...
    def makeRamMipmapImage(self, object, /): ...
    def make_copy(self, /): ...
    def make_from_txo(): ...
    def make_ram_image(self, /): ...
    def make_ram_mipmap_image(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    match_framebuffer_format = None
    def mightHaveRamImage(self, /): ...
    def might_have_ram_image(self, /): ...
    minfilter = None
    def modifyRamImage(self, /): ...
    def modifyRamMipmapImage(self, object, /): ...
    def modifySimpleRamImage(self, /): ...
    def modify_ram_image(self, /): ...
    def modify_ram_mipmap_image(self, object, /): ...
    def modify_simple_ram_image(self, /): ...
    name = None
    def newSimpleRamImage(): ...
    def new_simple_ram_image(): ...
    num_components = None
    num_loadable_ram_mipmap_images = None
    num_pages = None
    num_ram_mipmap_images = None
    num_views = None
    orig_file_x_size = None
    orig_file_y_size = None
    orig_file_z_size = None
    def output(self, object, /): ...
    def peek(self, /): ...
    post_load_store_cache = None
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    properties_modified = None
    quality_level = None
    ram_image_compression = None
    ram_image_size = None
    ram_page_size = None
    ram_view_size = None
    def read(): ...
    def readDds(): ...
    def readKtx(): ...
    def readTxo(): ...
    def read_dds(): ...
    def read_ktx(): ...
    def read_txo(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def reload(self, /): ...
    render_to_texture = None
    def rescaleTexture(self, /): ...
    def rescale_texture(self, /): ...
    def setAlphaFilename(self, object, /): ...
    def setAlphaFullpath(self, object, /): ...
    def setAnisotropicDegree(self, object, /): ...
    def setAutoTextureScale(self, object, /): ...
    def setAuxData(): ...
    def setBorderColor(self, object, /): ...
    def setClearColor(self, object, /): ...
    def setComponentType(self, object, /): ...
    def setCompression(self, object, /): ...
    def setDefaultSampler(self, object, /): ...
    def setFilename(self, object, /): ...
    def setFormat(self, object, /): ...
    def setFullpath(self, object, /): ...
    def setKeepRamImage(self, object, /): ...
    def setLoadedFromImage(): ...
    def setLoadedFromTxo(): ...
    def setMagfilter(self, object, /): ...
    def setMatchFramebufferFormat(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setName(self, object, /): ...
    def setNumViews(self, object, /): ...
    def setOrigFileSize(): ...
    def setPadSize(): ...
    def setPostLoadStoreCache(self, object, /): ...
    def setQualityLevel(self, object, /): ...
    def setRamImage(): ...
    def setRamImageAs(): ...
    def setRamMipmapImage(): ...
    def setRamMipmapPointerFromInt(): ...
    def setRenderToTexture(self, object, /): ...
    def setSimpleRamImage(): ...
    def setSizePadded(): ...
    def setTexturesPower2(object, /): ...
    def setWrapU(self, object, /): ...
    def setWrapV(self, object, /): ...
    def setWrapW(self, object, /): ...
    def setXSize(self, object, /): ...
    def setYSize(self, object, /): ...
    def setZSize(self, object, /): ...
    def set_alpha_filename(self, object, /): ...
    def set_alpha_fullpath(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_auto_texture_scale(self, object, /): ...
    def set_aux_data(): ...
    def set_border_color(self, object, /): ...
    def set_clear_color(self, object, /): ...
    def set_component_type(self, object, /): ...
    def set_compression(self, object, /): ...
    def set_default_sampler(self, object, /): ...
    def set_filename(self, object, /): ...
    def set_format(self, object, /): ...
    def set_fullpath(self, object, /): ...
    def set_keep_ram_image(self, object, /): ...
    def set_loaded_from_image(): ...
    def set_loaded_from_txo(): ...
    def set_magfilter(self, object, /): ...
    def set_match_framebuffer_format(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_views(self, object, /): ...
    def set_orig_file_size(): ...
    def set_pad_size(): ...
    def set_post_load_store_cache(self, object, /): ...
    def set_quality_level(self, object, /): ...
    def set_ram_image(): ...
    def set_ram_image_as(): ...
    def set_ram_mipmap_image(): ...
    def set_ram_mipmap_pointer_from_int(): ...
    def set_render_to_texture(self, object, /): ...
    def set_simple_ram_image(): ...
    def set_size_padded(): ...
    def set_textures_power_2(object, /): ...
    def set_wrap_u(self, object, /): ...
    def set_wrap_v(self, object, /): ...
    def set_wrap_w(self, object, /): ...
    def set_x_size(self, object, /): ...
    def set_y_size(self, object, /): ...
    def set_z_size(self, object, /): ...
    def setup1dTexture(): ...
    def setup2dTexture(): ...
    def setup2dTextureArray(): ...
    def setup3dTexture(): ...
    def setupBufferTexture(): ...
    def setupCubeMap(): ...
    def setupCubeMapArray(): ...
    def setupTexture(): ...
    def setup_1d_texture(): ...
    def setup_2d_texture(): ...
    def setup_2d_texture_array(): ...
    def setup_3d_texture(): ...
    def setup_buffer_texture(): ...
    def setup_cube_map(): ...
    def setup_cube_map_array(): ...
    def setup_texture(): ...
    simple_image_modified = None
    simple_ram_image = None
    simple_x_size = None
    simple_y_size = None
    def store(): ...
    def stringComponentType(object, /): ...
    def stringCompressionMode(object, /): ...
    def stringFormat(object, /): ...
    def stringQualityLevel(object, /): ...
    def stringTextureType(object, /): ...
    def string_component_type(object, /): ...
    def string_compression_mode(object, /): ...
    def string_format(object, /): ...
    def string_quality_level(object, /): ...
    def string_texture_type(object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture_type = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def uncompressRamImage(self, /): ...
    def uncompress_ram_image(self, /): ...
    def unref(self, /): ...
    def upToPower2(object, /): ...
    def up_to_power_2(object, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    usage_hint = None
    def usesMipmaps(self, /): ...
    def uses_mipmaps(self, /): ...
    def wasImageModified(self, object, /): ...
    def was_image_modified(self, object, /): ...
    wrap_u = None
    wrap_v = None
    wrap_w = None
    def write(): ...
    def writeTxo(): ...
    def write_txo(): ...
    x_size = None
    y_size = None
    z_size = None
ENDPUBLISH:str = None
END_PUBLISH:str = None
EUEof:int = None
EUErrorAbort:int = None
EUErrorFileEmpty:int = None
EUErrorFileInvalid:int = None
EUErrorHttpGatewayTimeout:int = None
EUErrorHttpProxyAuthentication:int = None
EUErrorHttpServerTimeout:int = None
EUErrorHttpServiceUnavailable:int = None
EUErrorInvalidChecksum:int = None
EUErrorNetworkBufferOverflow:int = None
EUErrorNetworkDead:int = None
EUErrorNetworkDisconnected:int = None
EUErrorNetworkDisconnectedLocally:int = None
EUErrorNetworkDiskQuotaExceeded:int = None
EUErrorNetworkNoData:int = None
EUErrorNetworkRemoteHostDisconnected:int = None
EUErrorNetworkRemoteHostDown:int = None
EUErrorNetworkRemoteHostNoResponse:int = None
EUErrorNetworkRemoteHostNotFound:int = None
EUErrorNetworkRemoteHostUnreachable:int = None
EUErrorNetworkTimeout:int = None
EUErrorNetworkUnreachable:int = None
EUErrorWriteDiskFault:int = None
EUErrorWriteDiskFull:int = None
EUErrorWriteDiskNotFound:int = None
EUErrorWriteDiskSectorNotFound:int = None
EUErrorWriteFileRename:int = None
EUErrorWriteOutOfFiles:int = None
EUErrorWriteOutOfMemory:int = None
EUErrorWriteSharingViolation:int = None
EUErrorZlib:int = None
EUHttpRedirect:int = None
EUNetworkNoData:int = None
EUOk:int = None
EUSuccess:int = None
EUWrite:int = None
EUWriteRam:int = None
EU_eof:int = None
EU_error_abort:int = None
EU_error_file_empty:int = None
EU_error_file_invalid:int = None
EU_error_http_gateway_timeout:int = None
EU_error_http_proxy_authentication:int = None
EU_error_http_server_timeout:int = None
EU_error_http_service_unavailable:int = None
EU_error_invalid_checksum:int = None
EU_error_network_buffer_overflow:int = None
EU_error_network_dead:int = None
EU_error_network_disconnected:int = None
EU_error_network_disconnected_locally:int = None
EU_error_network_disk_quota_exceeded:int = None
EU_error_network_no_data:int = None
EU_error_network_remote_host_disconnected:int = None
EU_error_network_remote_host_down:int = None
EU_error_network_remote_host_no_response:int = None
EU_error_network_remote_host_not_found:int = None
EU_error_network_remote_host_unreachable:int = None
EU_error_network_timeout:int = None
EU_error_network_unreachable:int = None
EU_error_write_disk_fault:int = None
EU_error_write_disk_full:int = None
EU_error_write_disk_not_found:int = None
EU_error_write_disk_sector_not_found:int = None
EU_error_write_file_rename:int = None
EU_error_write_out_of_files:int = None
EU_error_write_out_of_memory:int = None
EU_error_write_sharing_violation:int = None
EU_error_zlib:int = None
EU_http_redirect:int = None
EU_network_no_data:int = None
EU_ok:int = None
EU_success:int = None
EU_write:int = None
EU_write_ram:int = None
class Event:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addParameter(self, object, /): ...
    def add_parameter(self, object, /): ...
    def assign(self, object, /): ...
    def clearName(self, /): ...
    def clearReceiver(self, /): ...
    def clear_name(self, /): ...
    def clear_receiver(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def getNumParameters(self, /): ...
    def getParameter(self, object, /): ...
    def getParameters(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def get_num_parameters(self, /): ...
    def get_parameter(self, object, /): ...
    def get_parameters(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def hasReceiver(self, /): ...
    def has_name(self, /): ...
    def has_receiver(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    name = None
    def output(self, object, /): ...
    parameters = None
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class EventHandler:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def dispatchEvent(self, object, /): ...
    def dispatch_event(self, object, /): ...
    def getClassType(): ...
    def getFuture(self, object, /): ...
    def getGlobalEventHandler(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_future(self, object, /): ...
    def get_global_event_handler(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def processEvents(self, /): ...
    def process_events(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def write(self, object, /): ...
class EventParameter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getDoubleValue(self, /): ...
    def getIntValue(self, /): ...
    def getPtr(self, /): ...
    def getStringValue(self, /): ...
    def getTypedRefCountValue(self, /): ...
    def getWstringValue(self, /): ...
    def get_double_value(self, /): ...
    def get_int_value(self, /): ...
    def get_ptr(self, /): ...
    def get_string_value(self, /): ...
    def get_typed_ref_count_value(self, /): ...
    def get_wstring_value(self, /): ...
    def isDouble(self, /): ...
    def isEmpty(self, /): ...
    def isInt(self, /): ...
    def isString(self, /): ...
    def isTypedRefCount(self, /): ...
    def isWstring(self, /): ...
    def is_double(self, /): ...
    def is_empty(self, /): ...
    def is_int(self, /): ...
    def is_string(self, /): ...
    def is_typed_ref_count(self, /): ...
    def is_wstring(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class EventQueue:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def dequeueEvent(self, /): ...
    def dequeue_event(self, /): ...
    def getGlobalEventQueue(): ...
    def get_global_event_queue(): ...
    def isQueueEmpty(self, /): ...
    def isQueueFull(self, /): ...
    def is_queue_empty(self, /): ...
    def is_queue_full(self, /): ...
    def queueEvent(self, object, /): ...
    def queue_event(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ExecutionEnvironment:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    args = None
    binary_name:str = None
    def clearShadow(object, /): ...
    def clear_shadow(object, /): ...
    cwd = None
    dtool_name:str = None
    environment_variables = None
    def expandString(object, /): ...
    def expand_string(object, /): ...
    def getArg(object, /): ...
    def getBinaryName(): ...
    def getCwd(): ...
    def getDtoolName(): ...
    def getEnvironmentVariable(object, /): ...
    def getNumArgs(): ...
    def get_arg(object, /): ...
    def get_binary_name(): ...
    def get_cwd(): ...
    def get_dtool_name(): ...
    def get_environment_variable(object, /): ...
    def get_num_args(): ...
    def hasEnvironmentVariable(object, /): ...
    def has_environment_variable(object, /): ...
    def setBinaryName(object, /): ...
    def setDtoolName(object, /): ...
    def setEnvironmentVariable(): ...
    def set_binary_name(object, /): ...
    def set_dtool_name(object, /): ...
    def set_environment_variable(): ...
    def shadowEnvironmentVariable(): ...
    def shadow_environment_variable(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ExternalThread:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def bindThread(): ...
    def bind_thread(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerYield(): ...
    def consider_yield(): ...
    current_pipeline_stage:int = None
    current_task = None
    current_thread = None
    external_thread = None
    def forceYield(): ...
    def force_yield(): ...
    def getClassType(): ...
    def getCurrentPipelineStage(): ...
    def getCurrentTask(self, /): ...
    def getCurrentThread(): ...
    def getExternalThread(): ...
    def getMainThread(): ...
    def getName(self, /): ...
    def getPipelineStage(self, /): ...
    def getPstatsIndex(self, /): ...
    def getPythonIndex(self, /): ...
    def getRefCount(self, /): ...
    def getSyncName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUniqueId(self, /): ...
    def get_class_type(): ...
    def get_current_pipeline_stage(): ...
    def get_current_task(self, /): ...
    def get_current_thread(): ...
    def get_external_thread(): ...
    def get_main_thread(): ...
    def get_name(self, /): ...
    def get_pipeline_stage(self, /): ...
    def get_pstats_index(self, /): ...
    def get_python_index(self, /): ...
    def get_ref_count(self, /): ...
    def get_sync_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique_id(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isJoinable(self, /): ...
    def isOfType(self, object, /): ...
    def isSimpleThreads(): ...
    def isStarted(self, /): ...
    def isThreadingSupported(): ...
    def isTrueThreads(): ...
    def is_exact_type(self, object, /): ...
    def is_joinable(self, /): ...
    def is_of_type(self, object, /): ...
    def is_simple_threads(): ...
    def is_started(self, /): ...
    def is_threading_supported(): ...
    def is_true_threads(): ...
    def join(self, /): ...
    joinable = None
    main_thread = None
    name = None
    def output(self, object, /): ...
    def outputBlocker(self, object, /): ...
    def output_blocker(self, object, /): ...
    pipeline_stage = None
    def preempt(self, /): ...
    def prepareForExit(): ...
    def prepare_for_exit(): ...
    pstats_index = None
    python_index = None
    def ref(self, /): ...
    ref_count = None
    def setMinPipelineStage(self, object, /): ...
    def setName(self, object, /): ...
    def setPipelineStage(self, object, /): ...
    def setPythonIndex(self, object, /): ...
    def set_min_pipeline_stage(self, object, /): ...
    def set_name(self, object, /): ...
    def set_pipeline_stage(self, object, /): ...
    def set_python_index(self, object, /): ...
    simple_threads = None
    def sleep(object, /): ...
    def start(): ...
    started = None
    sync_name = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    threading_supported = None
    true_threads = None
    type = None
    unique_id = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def writeStatus(object, /): ...
    def write_status(object, /): ...
class Extractor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getProgress(self, /): ...
    def get_progress(self, /): ...
    progress = None
    def requestAllSubfiles(self, /): ...
    def requestSubfile(self, object, /): ...
    def request_all_subfiles(self, /): ...
    def request_subfile(self, object, /): ...
    def reset(self, /): ...
    def run(self, /): ...
    def setExtractDir(self, object, /): ...
    def setMultifile(self, object, /): ...
    def set_extract_dir(self, object, /): ...
    def set_multifile(self, object, /): ...
    def step(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class FadeLODNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def addSwitch(): ...
    def add_child(): ...
    def add_stashed(): ...
    def add_switch(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    center = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearForceSwitch(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearSwitches(self, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_force_switch(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_switches(self, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    fade_bin_draw_order = None
    fade_bin_name = None
    fade_state_override = None
    fade_time = None
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def forceSwitch(self, object, /): ...
    def force_switch(self, object, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCenter(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFadeBinDrawOrder(self, /): ...
    def getFadeBinName(self, /): ...
    def getFadeStateOverride(self, /): ...
    def getFadeTime(self, /): ...
    def getFancyBits(): ...
    def getHighestSwitch(self, /): ...
    def getIn(self, object, /): ...
    def getIns(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLodScale(self, /): ...
    def getLowestSwitch(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumSwitches(self, /): ...
    def getOffClipPlanes(): ...
    def getOut(self, object, /): ...
    def getOuts(self, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_center(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fade_bin_draw_order(self, /): ...
    def get_fade_bin_name(self, /): ...
    def get_fade_state_override(self, /): ...
    def get_fade_time(self, /): ...
    def get_fancy_bits(): ...
    def get_highest_switch(self, /): ...
    def get_in(self, object, /): ...
    def get_ins(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lod_scale(self, /): ...
    def get_lowest_switch(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_switches(self, /): ...
    def get_off_clip_planes(): ...
    def get_out(self, object, /): ...
    def get_outs(self, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def hideAllSwitches(self, /): ...
    def hideSwitch(self, object, /): ...
    def hide_all_switches(self, /): ...
    def hide_switch(self, object, /): ...
    highest_switch = None
    ins = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isAnyShown(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_any_shown(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    lod_scale = None
    lowest_switch = None
    def ls(): ...
    def makeCopy(self, /): ...
    def makeDefaultLod(object, /): ...
    def make_copy(self, /): ...
    def make_default_lod(object, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    outs = None
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFadeBin(): ...
    def setFadeStateOverride(self, object, /): ...
    def setFadeTime(self, object, /): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setSwitch(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_fade_bin(): ...
    def set_fade_state_override(self, object, /): ...
    def set_fade_time(self, object, /): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_switch(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def showAllSwitches(self, /): ...
    def showSwitch(): ...
    def show_all_switches(self, /): ...
    def show_switch(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def verifyChildBounds(self, /): ...
    def verify_child_bounds(self, /): ...
    def write(): ...
class FileReference:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class FileStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class Filename:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Fspath(self, /): ...
    TDso:int = None
    TExecutable:int = None
    TGeneral:int = None
    T_dso:int = None
    T_executable:int = None
    T_general:int = None
    def assign(self, object, /): ...
    def binaryFilename(object, /): ...
    def binary_filename(object, /): ...
    def cStr(self, /): ...
    def c_str(self, /): ...
    def chdir(self, /): ...
    def compareTimestamps(): ...
    def compareTo(self, object, /): ...
    def compare_timestamps(): ...
    def compare_to(self, object, /): ...
    def copyTo(self, object, /): ...
    def copy_to(self, object, /): ...
    def dsoFilename(object, /): ...
    def dso_filename(object, /): ...
    def empty(self, /): ...
    def executableFilename(object, /): ...
    def executable_filename(object, /): ...
    def exists(self, /): ...
    def expandFrom(): ...
    def expand_from(): ...
    def findOnSearchpath(self, object, /): ...
    def find_on_searchpath(self, object, /): ...
    def fromOsSpecific(): ...
    def fromOsSpecificW(): ...
    def from_os_specific(): ...
    def from_os_specific_w(): ...
    def getAccessTimestamp(self, /): ...
    def getBasename(self, /): ...
    def getBasenameWoExtension(self, /): ...
    def getClassType(): ...
    def getCommonAppdataDirectory(): ...
    def getDirname(self, /): ...
    def getExtension(self, /): ...
    def getFileSize(self, /): ...
    def getFilenameIndex(self, object, /): ...
    def getFilesystemEncoding(): ...
    def getFullpath(self, /): ...
    def getFullpathW(self, /): ...
    def getFullpathWoExtension(self, /): ...
    def getHash(self, /): ...
    def getHashToEnd(self, /): ...
    def getHomeDirectory(): ...
    def getPattern(self, /): ...
    def getTempDirectory(): ...
    def getTimestamp(self, /): ...
    def getType(self, /): ...
    def getUserAppdataDirectory(): ...
    def get_access_timestamp(self, /): ...
    def get_basename(self, /): ...
    def get_basename_wo_extension(self, /): ...
    def get_class_type(): ...
    def get_common_appdata_directory(): ...
    def get_dirname(self, /): ...
    def get_extension(self, /): ...
    def get_file_size(self, /): ...
    def get_filename_index(self, object, /): ...
    def get_filesystem_encoding(): ...
    def get_fullpath(self, /): ...
    def get_fullpath_w(self, /): ...
    def get_fullpath_wo_extension(self, /): ...
    def get_hash(self, /): ...
    def get_hash_to_end(self, /): ...
    def get_home_directory(): ...
    def get_pattern(self, /): ...
    def get_temp_directory(): ...
    def get_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_user_appdata_directory(): ...
    def hasHash(self, /): ...
    def has_hash(self, /): ...
    def isBinary(self, /): ...
    def isBinaryOrText(self, /): ...
    def isDirectory(self, /): ...
    def isExecutable(self, /): ...
    def isFullyQualified(self, /): ...
    def isLocal(self, /): ...
    def isRegularFile(self, /): ...
    def isText(self, /): ...
    def isWritable(self, /): ...
    def is_binary(self, /): ...
    def is_binary_or_text(self, /): ...
    def is_directory(self, /): ...
    def is_executable(self, /): ...
    def is_fully_qualified(self, /): ...
    def is_local(self, /): ...
    def is_regular_file(self, /): ...
    def is_text(self, /): ...
    def is_writable(self, /): ...
    def length(self, /): ...
    def makeAbsolute(): ...
    def makeCanonical(self, /): ...
    def makeDir(self, /): ...
    def makeRelativeTo(): ...
    def makeTrueCase(self, /): ...
    def make_absolute(): ...
    def make_canonical(self, /): ...
    def make_dir(self, /): ...
    def make_relative_to(): ...
    def make_true_case(self, /): ...
    def mkdir(self, /): ...
    def openAppend(self, object, /): ...
    def openRead(self, object, /): ...
    def openReadAppend(self, object, /): ...
    def openReadWrite(): ...
    def openWrite(): ...
    def open_append(self, object, /): ...
    def open_read(self, object, /): ...
    def open_read_append(self, object, /): ...
    def open_read_write(): ...
    def open_write(): ...
    def output(self, object, /): ...
    def patternFilename(object, /): ...
    def pattern_filename(object, /): ...
    def renameTo(self, object, /): ...
    def rename_to(self, object, /): ...
    def resolveFilename(): ...
    def resolve_filename(): ...
    def rmdir(self, /): ...
    def scanDirectory(): ...
    def scan_directory(): ...
    def setBasename(self, object, /): ...
    def setBasenameWoExtension(self, object, /): ...
    def setBinary(self, /): ...
    def setDirname(self, object, /): ...
    def setExtension(self, object, /): ...
    def setFilesystemEncoding(object, /): ...
    def setFullpath(self, object, /): ...
    def setFullpathWoExtension(self, object, /): ...
    def setHashToEnd(self, object, /): ...
    def setPattern(self, object, /): ...
    def setText(self, /): ...
    def setType(self, object, /): ...
    def set_basename(self, object, /): ...
    def set_basename_wo_extension(self, object, /): ...
    def set_binary(self, /): ...
    def set_dirname(self, object, /): ...
    def set_extension(self, object, /): ...
    def set_filesystem_encoding(object, /): ...
    def set_fullpath(self, object, /): ...
    def set_fullpath_wo_extension(self, object, /): ...
    def set_hash_to_end(self, object, /): ...
    def set_pattern(self, object, /): ...
    def set_text(self, /): ...
    def set_type(self, object, /): ...
    def standardize(self, /): ...
    def substr(): ...
    def temporary(): ...
    def textFilename(object, /): ...
    def text_filename(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def toOsGeneric(self, /): ...
    def toOsLongName(self, /): ...
    def toOsShortName(self, /): ...
    def toOsSpecific(self, /): ...
    def toOsSpecificW(self, /): ...
    def to_os_generic(self, /): ...
    def to_os_long_name(self, /): ...
    def to_os_short_name(self, /): ...
    def to_os_specific(self, /): ...
    def to_os_specific_w(self, /): ...
    def touch(self, /): ...
    def unlink(self, /): ...
class FilterProperties:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addChorus(): ...
    def addCompress(): ...
    def addDistort(self, object, /): ...
    def addEcho(): ...
    def addFlange(): ...
    def addHighpass(): ...
    def addLowpass(): ...
    def addNormalize(): ...
    def addParameq(): ...
    def addPitchshift(): ...
    def addSfxreverb(): ...
    def add_chorus(): ...
    def add_compress(): ...
    def add_distort(self, object, /): ...
    def add_echo(): ...
    def add_flange(): ...
    def add_highpass(): ...
    def add_lowpass(): ...
    def add_normalize(): ...
    def add_parameq(): ...
    def add_pitchshift(): ...
    def add_sfxreverb(): ...
    def clear(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class FiniteBoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getMax(self, /): ...
    def getMin(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVolume(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_max(self, /): ...
    def get_min(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_volume(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    max = None
    min = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    volume = None
    def write(): ...
    def xform(self, object, /): ...
class FisheyeMaker:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def generate(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def reset(self, /): ...
    def setFov(self, object, /): ...
    def setName(self, object, /): ...
    def setNumVertices(self, object, /): ...
    def setReflection(self, object, /): ...
    def setSquareInscribed(): ...
    def set_fov(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_vertices(self, object, /): ...
    def set_reflection(self, object, /): ...
    def set_square_inscribed(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class FlacAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class FlacAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class Fog:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    MExponential:int = None
    MExponentialSquared:int = None
    MLinear:int = None
    M_exponential:int = None
    M_exponential_squared:int = None
    M_linear:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    exp_density = None
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExpDensity(self, /): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLinearOnsetPoint(self, /): ...
    def getLinearOpaquePoint(self, /): ...
    def getMode(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exp_density(self, /): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_linear_onset_point(self, /): ...
    def get_linear_opaque_point(self, /): ...
    def get_mode(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    linear_onset_point = None
    linear_opaque_point = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    mode = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setColor(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setExpDensity(self, object, /): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLinearFallback(): ...
    def setLinearOnsetPoint(): ...
    def setLinearOpaquePoint(): ...
    def setLinearRange(): ...
    def setMode(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_color(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_exp_density(self, object, /): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_linear_fallback(): ...
    def set_linear_onset_point(): ...
    def set_linear_opaque_point(): ...
    def set_linear_range(): ...
    def set_mode(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class FogAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    fog = None
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getFog(self, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_fog(self, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class FontPool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addFont(): ...
    def add_font(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def hasFont(object, /): ...
    def has_font(object, /): ...
    def listContents(object, /): ...
    def list_contents(object, /): ...
    def loadFont(object, /): ...
    def load_font(object, /): ...
    def releaseAllFonts(): ...
    def releaseFont(object, /): ...
    def release_all_fonts(): ...
    def release_font(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def verifyFont(object, /): ...
    def verify_font(object, /): ...
    def write(object, /): ...
class FrameBufferProperties:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    accum_bits = None
    def addProperties(self, object, /): ...
    def add_properties(self, object, /): ...
    alpha_bits = None
    aux_float = None
    aux_hrgba = None
    aux_rgba = None
    back_buffers = None
    blue_bits = None
    def clear(self, /): ...
    color_bits = None
    coverage_samples = None
    depth_bits = None
    float_color = None
    float_depth = None
    force_hardware = None
    force_software = None
    def getAccumBits(self, /): ...
    def getAlphaBits(self, /): ...
    def getAuxFloat(self, /): ...
    def getAuxHrgba(self, /): ...
    def getAuxMask(self, /): ...
    def getAuxRgba(self, /): ...
    def getBackBuffers(self, /): ...
    def getBlueBits(self, /): ...
    def getBufferMask(self, /): ...
    def getColorBits(self, /): ...
    def getCoverageSamples(self, /): ...
    def getDefault(): ...
    def getDepthBits(self, /): ...
    def getFloatColor(self, /): ...
    def getFloatDepth(self, /): ...
    def getForceHardware(self, /): ...
    def getForceSoftware(self, /): ...
    def getGreenBits(self, /): ...
    def getIndexedColor(self, /): ...
    def getMultisamples(self, /): ...
    def getQuality(self, object, /): ...
    def getRedBits(self, /): ...
    def getRgbColor(self, /): ...
    def getSrgbColor(self, /): ...
    def getStencilBits(self, /): ...
    def getStereo(self, /): ...
    def get_accum_bits(self, /): ...
    def get_alpha_bits(self, /): ...
    def get_aux_float(self, /): ...
    def get_aux_hrgba(self, /): ...
    def get_aux_mask(self, /): ...
    def get_aux_rgba(self, /): ...
    def get_back_buffers(self, /): ...
    def get_blue_bits(self, /): ...
    def get_buffer_mask(self, /): ...
    def get_color_bits(self, /): ...
    def get_coverage_samples(self, /): ...
    def get_default(): ...
    def get_depth_bits(self, /): ...
    def get_float_color(self, /): ...
    def get_float_depth(self, /): ...
    def get_force_hardware(self, /): ...
    def get_force_software(self, /): ...
    def get_green_bits(self, /): ...
    def get_indexed_color(self, /): ...
    def get_multisamples(self, /): ...
    def get_quality(self, object, /): ...
    def get_red_bits(self, /): ...
    def get_rgb_color(self, /): ...
    def get_srgb_color(self, /): ...
    def get_stencil_bits(self, /): ...
    def get_stereo(self, /): ...
    green_bits = None
    indexed_color = None
    def isAnySpecified(self, /): ...
    def isBasic(self, /): ...
    def isSingleBuffered(self, /): ...
    def isStereo(self, /): ...
    def is_any_specified(self, /): ...
    def is_basic(self, /): ...
    def is_single_buffered(self, /): ...
    def is_stereo(self, /): ...
    multisamples = None
    def output(self, object, /): ...
    red_bits = None
    rgb_color = None
    def setAccumBits(self, object, /): ...
    def setAllSpecified(self, /): ...
    def setAlphaBits(self, object, /): ...
    def setAuxFloat(self, object, /): ...
    def setAuxHrgba(self, object, /): ...
    def setAuxRgba(self, object, /): ...
    def setBackBuffers(self, object, /): ...
    def setBlueBits(self, object, /): ...
    def setColorBits(self, object, /): ...
    def setCoverageSamples(self, object, /): ...
    def setDepthBits(self, object, /): ...
    def setFloatColor(self, object, /): ...
    def setFloatDepth(self, object, /): ...
    def setForceHardware(self, object, /): ...
    def setForceSoftware(self, object, /): ...
    def setGreenBits(self, object, /): ...
    def setIndexedColor(self, object, /): ...
    def setMultisamples(self, object, /): ...
    def setOneBitPerChannel(self, /): ...
    def setRedBits(self, object, /): ...
    def setRgbColor(self, object, /): ...
    def setRgbaBits(): ...
    def setSrgbColor(self, object, /): ...
    def setStencilBits(self, object, /): ...
    def setStereo(self, object, /): ...
    def set_accum_bits(self, object, /): ...
    def set_all_specified(self, /): ...
    def set_alpha_bits(self, object, /): ...
    def set_aux_float(self, object, /): ...
    def set_aux_hrgba(self, object, /): ...
    def set_aux_rgba(self, object, /): ...
    def set_back_buffers(self, object, /): ...
    def set_blue_bits(self, object, /): ...
    def set_color_bits(self, object, /): ...
    def set_coverage_samples(self, object, /): ...
    def set_depth_bits(self, object, /): ...
    def set_float_color(self, object, /): ...
    def set_float_depth(self, object, /): ...
    def set_force_hardware(self, object, /): ...
    def set_force_software(self, object, /): ...
    def set_green_bits(self, object, /): ...
    def set_indexed_color(self, object, /): ...
    def set_multisamples(self, object, /): ...
    def set_one_bit_per_channel(self, /): ...
    def set_red_bits(self, object, /): ...
    def set_rgb_color(self, object, /): ...
    def set_rgba_bits(): ...
    def set_srgb_color(self, object, /): ...
    def set_stencil_bits(self, object, /): ...
    def set_stereo(self, object, /): ...
    def setupColorTexture(self, object, /): ...
    def setupDepthTexture(self, object, /): ...
    def setup_color_texture(self, object, /): ...
    def setup_depth_texture(self, object, /): ...
    srgb_color = None
    stencil_bits = None
    stereo = None
    def subsumes(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def verifyHardwareSoftware(): ...
    def verify_hardware_software(): ...
class FrameRateMeter:
    ...
    ABoxedCenter:int = None
    ABoxedLeft:int = None
    ABoxedRight:int = None
    ACenter:int = None
    ALeft:int = None
    ARight:int = None
    A_boxed_center:int = None
    A_boxed_left:int = None
    A_boxed_right:int = None
    A_center:int = None
    A_left:int = None
    A_right:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DLtr:int = None
    DRtl:int = None
    D_ltr:int = None
    D_rtl:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    EIso8859:int = None
    EUnicode:int = None
    EUtf16be:int = None
    EUtf8:int = None
    E_iso8859:int = None
    E_unicode:int = None
    E_utf16be:int = None
    E_utf8:int = None
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    FFDynamicMerge:int = None
    FFLight:int = None
    FFMedium:int = None
    FFNone:int = None
    FFStrong:int = None
    FF_dynamic_merge:int = None
    FF_light:int = None
    FF_medium:int = None
    FF_none:int = None
    FF_strong:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addProperties(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_properties(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    align = None
    all_camera_mask = None
    def appendText(self, object, /): ...
    def appendUnicodeChar(self, object, /): ...
    def appendWtext(self, object, /): ...
    def append_text(self, object, /): ...
    def append_unicode_char(self, object, /): ...
    def append_wtext(self, object, /): ...
    def asLight(self, /): ...
    def as_light(self, /): ...
    def assign(self, object, /): ...
    bin = None
    bounds_stale = None
    bounds_type = None
    def calcWidth(self, object, /): ...
    def calc_width(self, object, /): ...
    card_color = None
    card_texture = None
    children = None
    def clear(self, /): ...
    def clearAlign(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBin(self, /): ...
    def clearBounds(self, /): ...
    def clearCard(self, /): ...
    def clearCardBorder(self, /): ...
    def clearCardTexture(self, /): ...
    def clearDirection(self, /): ...
    def clearDrawOrder(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFont(self, /): ...
    def clearFrame(self, /): ...
    def clearGlyphScale(self, /): ...
    def clearGlyphShift(self, /): ...
    def clearIndent(self, /): ...
    def clearMaxRows(self, /): ...
    def clearName(self, /): ...
    def clearPreserveTrailingWhitespace(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearShadow(self, /): ...
    def clearShadowColor(self, /): ...
    def clearSlant(self, /): ...
    def clearSmallCaps(self, /): ...
    def clearSmallCapsScale(self, /): ...
    def clearState(): ...
    def clearTabWidth(self, /): ...
    def clearTag(): ...
    def clearText(self, /): ...
    def clearTextColor(self, /): ...
    def clearTextScale(self, /): ...
    def clearTransform(): ...
    def clearUnderscore(self, /): ...
    def clearUnderscoreHeight(self, /): ...
    def clearUnexpectedChange(self, object, /): ...
    def clearWindow(self, /): ...
    def clearWordwrap(self, /): ...
    def clear_align(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bin(self, /): ...
    def clear_bounds(self, /): ...
    def clear_card(self, /): ...
    def clear_card_border(self, /): ...
    def clear_card_texture(self, /): ...
    def clear_direction(self, /): ...
    def clear_draw_order(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_font(self, /): ...
    def clear_frame(self, /): ...
    def clear_glyph_scale(self, /): ...
    def clear_glyph_shift(self, /): ...
    def clear_indent(self, /): ...
    def clear_max_rows(self, /): ...
    def clear_name(self, /): ...
    def clear_preserve_trailing_whitespace(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_shadow(self, /): ...
    def clear_shadow_color(self, /): ...
    def clear_slant(self, /): ...
    def clear_small_caps(self, /): ...
    def clear_small_caps_scale(self, /): ...
    def clear_state(): ...
    def clear_tab_width(self, /): ...
    def clear_tag(): ...
    def clear_text(self, /): ...
    def clear_text_color(self, /): ...
    def clear_text_scale(self, /): ...
    def clear_transform(): ...
    def clear_underscore(self, /): ...
    def clear_underscore_height(self, /): ...
    def clear_unexpected_change(self, object, /): ...
    def clear_window(self, /): ...
    def clear_wordwrap(self, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    coordinate_system = None
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decodeText(): ...
    def decode_from_bam_stream(): ...
    def decode_text(): ...
    default_encoding:int = None
    direction = None
    draw_control_mask = None
    draw_order = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encodeWchar(): ...
    def encodeWtext(): ...
    def encode_to_bam_stream(): ...
    def encode_wchar(): ...
    def encode_wtext(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    flatten_flags = None
    font = None
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    frame_color = None
    frame_corners = None
    frame_line_width = None
    def generate(self, /): ...
    def getAlign(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBin(self, /): ...
    def getBottom(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCardActual(self, /): ...
    def getCardAsSet(self, /): ...
    def getCardBorderSize(self, /): ...
    def getCardBorderUvPortion(self, /): ...
    def getCardColor(self, /): ...
    def getCardDecal(self, /): ...
    def getCardTexture(self, /): ...
    def getCardTransformed(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getClockObject(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getDefaultEncoding(): ...
    def getDefaultFont(): ...
    def getDirection(self, /): ...
    def getDisplayRegion(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawOrder(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEncodedChar(): ...
    def getEncoding(self, /): ...
    def getFancyBits(): ...
    def getFlattenFlags(self, /): ...
    def getFont(self, /): ...
    def getFrameActual(self, /): ...
    def getFrameAsSet(self, /): ...
    def getFrameColor(self, /): ...
    def getFrameCorners(self, /): ...
    def getFrameLineWidth(self, /): ...
    def getGlyphScale(self, /): ...
    def getGlyphShift(self, /): ...
    def getHeight(self, /): ...
    def getIndent(self, /): ...
    def getInternalBounds(): ...
    def getInternalGeom(self, /): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLeft(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLineHeight(self, /): ...
    def getLowerRight3d(self, /): ...
    def getMaxRows(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChars(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumRows(self, /): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserveTrailingWhitespace(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRight(self, /): ...
    def getShadow(self, /): ...
    def getShadowColor(self, /): ...
    def getSlant(self, /): ...
    def getSmallCaps(self, /): ...
    def getSmallCapsScale(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTabWidth(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getText(): ...
    def getTextAsAscii(self, /): ...
    def getTextColor(self, /): ...
    def getTextPattern(self, /): ...
    def getTextScale(self, /): ...
    def getTop(self, /): ...
    def getTransform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnderscore(self, /): ...
    def getUnderscoreHeight(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUnicodeChar(self, object, /): ...
    def getUpdateInterval(self, /): ...
    def getUpperLeft3d(self, /): ...
    def getUsageHint(self, /): ...
    def getWidth(self, /): ...
    def getWindow(self, /): ...
    def getWordwrap(self, /): ...
    def getWordwrappedText(self, /): ...
    def getWordwrappedWtext(self, /): ...
    def getWtext(self, /): ...
    def getWtextAsAscii(self, /): ...
    def get_align(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bin(self, /): ...
    def get_bottom(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_card_actual(self, /): ...
    def get_card_as_set(self, /): ...
    def get_card_border_size(self, /): ...
    def get_card_border_uv_portion(self, /): ...
    def get_card_color(self, /): ...
    def get_card_decal(self, /): ...
    def get_card_texture(self, /): ...
    def get_card_transformed(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_clock_object(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_default_encoding(): ...
    def get_default_font(): ...
    def get_direction(self, /): ...
    def get_display_region(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_order(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_encoded_char(): ...
    def get_encoding(self, /): ...
    def get_fancy_bits(): ...
    def get_flatten_flags(self, /): ...
    def get_font(self, /): ...
    def get_frame_actual(self, /): ...
    def get_frame_as_set(self, /): ...
    def get_frame_color(self, /): ...
    def get_frame_corners(self, /): ...
    def get_frame_line_width(self, /): ...
    def get_glyph_scale(self, /): ...
    def get_glyph_shift(self, /): ...
    def get_height(self, /): ...
    def get_indent(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_geom(self, /): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_left(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_line_height(self, /): ...
    def get_lower_right_3d(self, /): ...
    def get_max_rows(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_chars(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_rows(self, /): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserve_trailing_whitespace(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_right(self, /): ...
    def get_shadow(self, /): ...
    def get_shadow_color(self, /): ...
    def get_slant(self, /): ...
    def get_small_caps(self, /): ...
    def get_small_caps_scale(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tab_width(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text(): ...
    def get_text_as_ascii(self, /): ...
    def get_text_color(self, /): ...
    def get_text_pattern(self, /): ...
    def get_text_scale(self, /): ...
    def get_top(self, /): ...
    def get_transform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_underscore(self, /): ...
    def get_underscore_height(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_unicode_char(self, object, /): ...
    def get_update_interval(self, /): ...
    def get_upper_left_3d(self, /): ...
    def get_usage_hint(self, /): ...
    def get_width(self, /): ...
    def get_window(self, /): ...
    def get_wordwrap(self, /): ...
    def get_wordwrapped_text(self, /): ...
    def get_wordwrapped_wtext(self, /): ...
    def get_wtext(self, /): ...
    def get_wtext_as_ascii(self, /): ...
    glyph_scale = None
    glyph_shift = None
    def hasAlign(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasBin(self, /): ...
    def hasCard(self, /): ...
    def hasCardBorder(self, /): ...
    def hasCardTexture(self, /): ...
    def hasCharacter(self, object, /): ...
    def hasDirection(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasDrawOrder(self, /): ...
    def hasEffect(self, object, /): ...
    def hasExactCharacter(self, object, /): ...
    def hasFont(self, /): ...
    def hasFrame(self, /): ...
    def hasGlyphScale(self, /): ...
    def hasGlyphShift(self, /): ...
    def hasIndent(self, /): ...
    def hasMaxRows(self, /): ...
    def hasName(self, /): ...
    def hasOverflow(self, /): ...
    def hasPreserveTrailingWhitespace(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasShadow(self, /): ...
    def hasShadowColor(self, /): ...
    def hasSlant(self, /): ...
    def hasSmallCaps(self, /): ...
    def hasSmallCapsScale(self, /): ...
    def hasTabWidth(self, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasText(self, /): ...
    def hasTextColor(self, /): ...
    def hasTextScale(self, /): ...
    def hasUnderscore(self, /): ...
    def hasUnderscoreHeight(self, /): ...
    def hasWordwrap(self, /): ...
    def has_align(self, /): ...
    def has_attrib(self, object, /): ...
    def has_bin(self, /): ...
    def has_card(self, /): ...
    def has_card_border(self, /): ...
    def has_card_texture(self, /): ...
    def has_character(self, object, /): ...
    def has_direction(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_draw_order(self, /): ...
    def has_effect(self, object, /): ...
    def has_exact_character(self, object, /): ...
    def has_font(self, /): ...
    def has_frame(self, /): ...
    def has_glyph_scale(self, /): ...
    def has_glyph_shift(self, /): ...
    def has_indent(self, /): ...
    def has_max_rows(self, /): ...
    def has_name(self, /): ...
    def has_overflow(self, /): ...
    def has_preserve_trailing_whitespace(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_shadow(self, /): ...
    def has_shadow_color(self, /): ...
    def has_slant(self, /): ...
    def has_small_caps(self, /): ...
    def has_small_caps_scale(self, /): ...
    def has_tab_width(self, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_text(self, /): ...
    def has_text_color(self, /): ...
    def has_text_scale(self, /): ...
    def has_underscore(self, /): ...
    def has_underscore_height(self, /): ...
    def has_wordwrap(self, /): ...
    indent = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isAnySpecified(self, /): ...
    def isBoundsStale(self, /): ...
    def isCardAsMargin(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isFrameAsMargin(self, /): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isWhitespace(self, object, /): ...
    def isWtext(self, /): ...
    def is_ambient_light(self, /): ...
    def is_any_specified(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_card_as_margin(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_frame_as_margin(self, /): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_whitespace(self, object, /): ...
    def is_wtext(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def lower(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def makeLower(self, /): ...
    def makeUpper(self, /): ...
    def make_copy(self, /): ...
    def make_lower(self, /): ...
    def make_upper(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_rows = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    preserve_trailing_whitespace = None
    prev_transform = None
    python_tags = None
    def reencodeText(): ...
    def reencode_text(): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAlign(self, object, /): ...
    def setAttrib(): ...
    def setBin(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCardActual(): ...
    def setCardAsMargin(): ...
    def setCardBorder(): ...
    def setCardColor(): ...
    def setCardDecal(self, object, /): ...
    def setCardTexture(self, object, /): ...
    def setClockObject(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setDefaultEncoding(object, /): ...
    def setDefaultFont(object, /): ...
    def setDirection(self, object, /): ...
    def setDrawOrder(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setEncoding(self, object, /): ...
    def setFinal(self, object, /): ...
    def setFlattenFlags(self, object, /): ...
    def setFont(self, object, /): ...
    def setFrameActual(): ...
    def setFrameAsMargin(): ...
    def setFrameColor(): ...
    def setFrameCorners(self, object, /): ...
    def setFrameLineWidth(self, object, /): ...
    def setGlyphScale(self, object, /): ...
    def setGlyphShift(self, object, /): ...
    def setIndent(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMaxRows(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserveTrailingWhitespace(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setShadow(): ...
    def setShadowColor(): ...
    def setSlant(self, object, /): ...
    def setSmallCaps(self, object, /): ...
    def setSmallCapsScale(self, object, /): ...
    def setState(): ...
    def setTabWidth(self, object, /): ...
    def setTag(): ...
    def setText(): ...
    def setTextColor(): ...
    def setTextPattern(self, object, /): ...
    def setTextScale(self, object, /): ...
    def setTransform(self, object, /): ...
    def setUnderscore(self, object, /): ...
    def setUnderscoreHeight(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def setUnicodeChar(): ...
    def setUpdateInterval(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setWordwrap(self, object, /): ...
    def setWtext(self, object, /): ...
    def set_align(self, object, /): ...
    def set_attrib(): ...
    def set_bin(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_card_actual(): ...
    def set_card_as_margin(): ...
    def set_card_border(): ...
    def set_card_color(): ...
    def set_card_decal(self, object, /): ...
    def set_card_texture(self, object, /): ...
    def set_clock_object(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_default_encoding(object, /): ...
    def set_default_font(object, /): ...
    def set_direction(self, object, /): ...
    def set_draw_order(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_encoding(self, object, /): ...
    def set_final(self, object, /): ...
    def set_flatten_flags(self, object, /): ...
    def set_font(self, object, /): ...
    def set_frame_actual(): ...
    def set_frame_as_margin(): ...
    def set_frame_color(): ...
    def set_frame_corners(self, object, /): ...
    def set_frame_line_width(self, object, /): ...
    def set_glyph_scale(self, object, /): ...
    def set_glyph_shift(self, object, /): ...
    def set_indent(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_max_rows(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserve_trailing_whitespace(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_shadow(): ...
    def set_shadow_color(): ...
    def set_slant(self, object, /): ...
    def set_small_caps(self, object, /): ...
    def set_small_caps_scale(self, object, /): ...
    def set_state(): ...
    def set_tab_width(self, object, /): ...
    def set_tag(): ...
    def set_text(): ...
    def set_text_color(): ...
    def set_text_pattern(self, object, /): ...
    def set_text_scale(self, object, /): ...
    def set_transform(self, object, /): ...
    def set_underscore(self, object, /): ...
    def set_underscore_height(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def set_unicode_char(): ...
    def set_update_interval(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_wordwrap(self, object, /): ...
    def set_wtext(self, object, /): ...
    def setupWindow(self, object, /): ...
    def setup_window(self, object, /): ...
    shadow = None
    shadow_color = None
    slant = None
    small_caps = None
    small_caps_scale = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tab_width = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    text = None
    text_color = None
    text_scale = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    underscore = None
    underscore_height = None
    def unicodeIsalpha(object, /): ...
    def unicodeIsdigit(object, /): ...
    def unicodeIslower(object, /): ...
    def unicodeIspunct(object, /): ...
    def unicodeIsspace(object, /): ...
    def unicodeIsupper(object, /): ...
    def unicodeTolower(object, /): ...
    def unicodeToupper(object, /): ...
    def unicode_isalpha(object, /): ...
    def unicode_isdigit(object, /): ...
    def unicode_islower(object, /): ...
    def unicode_ispunct(object, /): ...
    def unicode_isspace(object, /): ...
    def unicode_isupper(object, /): ...
    def unicode_tolower(object, /): ...
    def unicode_toupper(object, /): ...
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTextEncoder(self, /): ...
    def upcastToTextProperties(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TextEncoder(self, /): ...
    def upcast_to_TextProperties(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def upper(): ...
    usage_hint = None
    wordwrap = None
    def write(): ...
class FreetypeFont:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    WODefault:int = None
    WOInvalid:int = None
    WOLeft:int = None
    WORight:int = None
    WO_default:int = None
    WO_invalid:int = None
    WO_left:int = None
    WO_right:int = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getClassType(): ...
    def getFontPixelSize(self, /): ...
    def getLineHeight(self, /): ...
    def getName(self, /): ...
    def getNativeAntialias(self, /): ...
    def getPixelSize(self, /): ...
    def getPixelsPerUnit(self, /): ...
    def getPointSize(self, /): ...
    def getPointsPerInch(): ...
    def getPointsPerUnit(): ...
    def getScaleFactor(self, /): ...
    def getSpaceAdvance(self, /): ...
    def getWindingOrder(self, /): ...
    def get_class_type(): ...
    def get_font_pixel_size(self, /): ...
    def get_line_height(self, /): ...
    def get_name(self, /): ...
    def get_native_antialias(self, /): ...
    def get_pixel_size(self, /): ...
    def get_pixels_per_unit(self, /): ...
    def get_point_size(self, /): ...
    def get_points_per_inch(): ...
    def get_points_per_unit(): ...
    def get_scale_factor(self, /): ...
    def get_space_advance(self, /): ...
    def get_winding_order(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def setName(self, object, /): ...
    def setNativeAntialias(self, object, /): ...
    def setPixelSize(self, object, /): ...
    def setPixelsPerUnit(self, object, /): ...
    def setPointSize(self, object, /): ...
    def setScaleFactor(self, object, /): ...
    def setWindingOrder(self, object, /): ...
    def set_name(self, object, /): ...
    def set_native_antialias(self, object, /): ...
    def set_pixel_size(self, object, /): ...
    def set_pixels_per_unit(self, object, /): ...
    def set_point_size(self, object, /): ...
    def set_scale_factor(self, object, /): ...
    def set_winding_order(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    winding_order = None
class Frustum:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class FrustumD:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class FrustumF:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Fstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class GamepadButton:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def back(): ...
    def dpadDown(): ...
    def dpadLeft(): ...
    def dpadRight(): ...
    def dpadUp(): ...
    def dpad_down(): ...
    def dpad_left(): ...
    def dpad_right(): ...
    def dpad_up(): ...
    def face1(): ...
    def face2(): ...
    def faceA(): ...
    def faceB(): ...
    def faceC(): ...
    def faceX(): ...
    def faceY(): ...
    def faceZ(): ...
    def face_1(): ...
    def face_2(): ...
    def face_a(): ...
    def face_b(): ...
    def face_c(): ...
    def face_x(): ...
    def face_y(): ...
    def face_z(): ...
    def guide(): ...
    def hatDown(): ...
    def hatLeft(): ...
    def hatRight(): ...
    def hatUp(): ...
    def hat_down(): ...
    def hat_left(): ...
    def hat_right(): ...
    def hat_up(): ...
    def joystick(object, /): ...
    def lgrip(): ...
    def lshoulder(): ...
    def lstick(): ...
    def ltrigger(): ...
    def next(): ...
    def previous(): ...
    def rgrip(): ...
    def rshoulder(): ...
    def rstick(): ...
    def rtrigger(): ...
    def start(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def trigger(): ...
class GeoMipTerrain:
    ...
    AFMLight:int = None
    AFMMedium:int = None
    AFMOff:int = None
    AFMStrong:int = None
    AFM_light:int = None
    AFM_medium:int = None
    AFM_off:int = None
    AFM_strong:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def calcAmbientOcclusion(): ...
    def calc_ambient_occlusion(): ...
    def clearColorMap(self, /): ...
    def clear_color_map(self, /): ...
    def colorMap(self, /): ...
    def color_map(self, /): ...
    def generate(self, /): ...
    def getBlockFromPos(): ...
    def getBlockNodePath(): ...
    def getBlockSize(self, /): ...
    def getBorderStitching(self, /): ...
    def getBruteforce(self, /): ...
    def getClassType(): ...
    def getElevation(): ...
    def getFar(self, /): ...
    def getFlattenMode(self, /): ...
    def getFocalPoint(self, /): ...
    def getMaxLevel(self, /): ...
    def getMinLevel(self, /): ...
    def getNear(self, /): ...
    def getNormal(): ...
    def getRoot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_block_from_pos(): ...
    def get_block_node_path(): ...
    def get_block_size(self, /): ...
    def get_border_stitching(self, /): ...
    def get_bruteforce(self, /): ...
    def get_class_type(): ...
    def get_elevation(): ...
    def get_far(self, /): ...
    def get_flatten_mode(self, /): ...
    def get_focal_point(self, /): ...
    def get_max_level(self, /): ...
    def get_min_level(self, /): ...
    def get_near(self, /): ...
    def get_normal(): ...
    def get_root(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasColorMap(self, /): ...
    def has_color_map(self, /): ...
    def heightfield(self, /): ...
    def isDirty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_dirty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeSlopeImage(self, /): ...
    def make_slope_image(self, /): ...
    def setAutoFlatten(self, object, /): ...
    def setBlockSize(self, object, /): ...
    def setBorderStitching(self, object, /): ...
    def setBruteforce(self, object, /): ...
    def setColorMap(): ...
    def setFactor(self, object, /): ...
    def setFar(self, object, /): ...
    def setFocalPoint(): ...
    def setHeightfield(): ...
    def setMinLevel(self, object, /): ...
    def setNear(self, object, /): ...
    def setNearFar(): ...
    def set_auto_flatten(self, object, /): ...
    def set_block_size(self, object, /): ...
    def set_border_stitching(self, object, /): ...
    def set_bruteforce(self, object, /): ...
    def set_color_map(): ...
    def set_factor(self, object, /): ...
    def set_far(self, object, /): ...
    def set_focal_point(): ...
    def set_heightfield(): ...
    def set_min_level(self, object, /): ...
    def set_near(self, object, /): ...
    def set_near_far(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def update(self, /): ...
class Geom:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addPrimitive(self, object, /): ...
    def add_primitive(self, object, /): ...
    def assign(self, object, /): ...
    bounds_type = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(): ...
    def check_valid(): ...
    def clearBounds(self, /): ...
    def clearCache(self, /): ...
    def clearCacheStage(self, object, /): ...
    def clearPrimitives(self, /): ...
    def clear_bounds(self, /): ...
    def clear_cache(self, /): ...
    def clear_cache_stage(self, object, /): ...
    def clear_primitives(self, /): ...
    def copyPrimitivesFrom(self, object, /): ...
    def copy_primitives_from(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def decomposeInPlace(self, /): ...
    def decompose_in_place(self, /): ...
    def doubleside(self, /): ...
    def doublesideInPlace(self, /): ...
    def doubleside_in_place(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getAnimatedVertexData(): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getGeomRendering(self, /): ...
    def getModified(): ...
    def getNestedVertices(): ...
    def getNumBytes(self, /): ...
    def getNumPrimitives(self, /): ...
    def getPrimitive(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getPrimitives(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertexData(): ...
    def get_animated_vertex_data(): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_geom_rendering(self, /): ...
    def get_modified(): ...
    def get_nested_vertices(): ...
    def get_num_bytes(self, /): ...
    def get_num_primitives(self, /): ...
    def get_primitive(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_primitives(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex_data(): ...
    def insertPrimitive(): ...
    def insert_primitive(): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeAdjacencyInPlace(self, /): ...
    def makeCopy(self, /): ...
    def makeLines(self, /): ...
    def makeLinesInPlace(self, /): ...
    def makeNonindexed(self, object, /): ...
    def makePatches(self, /): ...
    def makePatchesInPlace(self, /): ...
    def makePoints(self, /): ...
    def makePointsInPlace(self, /): ...
    def make_adjacency(self, /): ...
    def make_adjacency_in_place(self, /): ...
    def make_copy(self, /): ...
    def make_lines(self, /): ...
    def make_lines_in_place(self, /): ...
    def make_nonindexed(self, object, /): ...
    def make_patches(self, /): ...
    def make_patches_in_place(self, /): ...
    def make_points(self, /): ...
    def make_points_in_place(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(self, /): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(self, /): ...
    modified = None
    def modifyPrimitive(self, object, /): ...
    def modifyVertexData(self, /): ...
    def modify_primitive(self, object, /): ...
    def modify_vertex_data(self, /): ...
    num_bytes = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    primitive_type = None
    primitives = None
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def removePrimitive(self, object, /): ...
    def remove_primitive(self, object, /): ...
    def requestResident(self, /): ...
    def request_resident(self, /): ...
    def reverse(self, /): ...
    def reverseInPlace(self, /): ...
    def reverse_in_place(self, /): ...
    def rotate(self, /): ...
    def rotateInPlace(self, /): ...
    def rotate_in_place(self, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setPrimitive(): ...
    def setUsageHint(self, object, /): ...
    def setVertexData(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_primitive(): ...
    def set_usage_hint(self, object, /): ...
    def set_vertex_data(self, object, /): ...
    shade_model = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def transformVertices(self, object, /): ...
    def transform_vertices(self, object, /): ...
    type = None
    def unify(): ...
    def unifyInPlace(): ...
    def unify_in_place(): ...
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class GeomCacheManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def flush(self, /): ...
    def getGlobalPtr(): ...
    def getMaxSize(self, /): ...
    def getTotalSize(self, /): ...
    def get_global_ptr(): ...
    def get_max_size(self, /): ...
    def get_total_size(self, /): ...
    def setMaxSize(self, object, /): ...
    def set_max_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeomContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    geom = None
    def getClassType(): ...
    def getGeom(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_geom(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class GeomDrawCallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getForce(self, /): ...
    def getGsg(self, /): ...
    def getLostState(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_force(self, /): ...
    def get_gsg(self, /): ...
    def get_lost_state(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def setLostState(self, object, /): ...
    def set_lost_state(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
class GeomEnums:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeomLines:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomLinesAdjacency:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomLinestrips:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomLinestripsAdjacency:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addGeom(): ...
    def addGeomsFrom(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_geom(): ...
    def add_geoms_from(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def checkValid(self, /): ...
    def check_valid(self, /): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    default_collide_mask = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultCollideMask(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getGeom(self, object, /): ...
    def getGeomState(self, object, /): ...
    def getGeomStates(self, /): ...
    def getGeoms(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumGeoms(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserved(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_collide_mask(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_geom(self, object, /): ...
    def get_geom_state(self, object, /): ...
    def get_geom_states(self, /): ...
    def get_geoms(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_geoms(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserved(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    def modifyGeom(self, object, /): ...
    def modifyGeoms(self, /): ...
    def modify_geom(self, object, /): ...
    def modify_geoms(self, /): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeAllGeoms(self, /): ...
    def removeChild(): ...
    def removeGeom(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_all_geoms(self, /): ...
    def remove_child(): ...
    def remove_geom(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setGeom(): ...
    def setGeomState(): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserved(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_geom(): ...
    def set_geom_state(): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserved(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unify(): ...
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeGeoms(): ...
    def writeVerbose(): ...
    def write_geoms(): ...
    def write_verbose(): ...
class GeomPatches:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomPoints:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomPrimitive:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomTextGlyph:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addPrimitive(self, object, /): ...
    def add_primitive(self, object, /): ...
    def assign(self, object, /): ...
    bounds_type = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(): ...
    def check_valid(): ...
    def clearBounds(self, /): ...
    def clearCache(self, /): ...
    def clearCacheStage(self, object, /): ...
    def clearPrimitives(self, /): ...
    def clear_bounds(self, /): ...
    def clear_cache(self, /): ...
    def clear_cache_stage(self, object, /): ...
    def clear_primitives(self, /): ...
    def copyPrimitivesFrom(self, object, /): ...
    def copy_primitives_from(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def decomposeInPlace(self, /): ...
    def decompose_in_place(self, /): ...
    def doubleside(self, /): ...
    def doublesideInPlace(self, /): ...
    def doubleside_in_place(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getAnimatedVertexData(): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getGeomRendering(self, /): ...
    def getModified(): ...
    def getNestedVertices(): ...
    def getNumBytes(self, /): ...
    def getNumPrimitives(self, /): ...
    def getPrimitive(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getPrimitives(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertexData(): ...
    def get_animated_vertex_data(): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_geom_rendering(self, /): ...
    def get_modified(): ...
    def get_nested_vertices(): ...
    def get_num_bytes(self, /): ...
    def get_num_primitives(self, /): ...
    def get_primitive(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_primitives(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex_data(): ...
    def insertPrimitive(): ...
    def insert_primitive(): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeAdjacencyInPlace(self, /): ...
    def makeCopy(self, /): ...
    def makeLines(self, /): ...
    def makeLinesInPlace(self, /): ...
    def makeNonindexed(self, object, /): ...
    def makePatches(self, /): ...
    def makePatchesInPlace(self, /): ...
    def makePoints(self, /): ...
    def makePointsInPlace(self, /): ...
    def make_adjacency(self, /): ...
    def make_adjacency_in_place(self, /): ...
    def make_copy(self, /): ...
    def make_lines(self, /): ...
    def make_lines_in_place(self, /): ...
    def make_nonindexed(self, object, /): ...
    def make_patches(self, /): ...
    def make_patches_in_place(self, /): ...
    def make_points(self, /): ...
    def make_points_in_place(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(self, /): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(self, /): ...
    modified = None
    def modifyPrimitive(self, object, /): ...
    def modifyVertexData(self, /): ...
    def modify_primitive(self, object, /): ...
    def modify_vertex_data(self, /): ...
    num_bytes = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    primitive_type = None
    primitives = None
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def removePrimitive(self, object, /): ...
    def remove_primitive(self, object, /): ...
    def requestResident(self, /): ...
    def request_resident(self, /): ...
    def reverse(self, /): ...
    def reverseInPlace(self, /): ...
    def reverse_in_place(self, /): ...
    def rotate(self, /): ...
    def rotateInPlace(self, /): ...
    def rotate_in_place(self, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setPrimitive(): ...
    def setUsageHint(self, object, /): ...
    def setVertexData(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_primitive(): ...
    def set_usage_hint(self, object, /): ...
    def set_vertex_data(self, object, /): ...
    shade_model = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def transformVertices(self, object, /): ...
    def transform_vertices(self, object, /): ...
    type = None
    def unify(): ...
    def unifyInPlace(): ...
    def unify_in_place(): ...
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class GeomTriangles:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomTrianglesAdjacency:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomTrifans:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomTristrips:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomTristripsAdjacency:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addConsecutiveVertices(): ...
    def addNextVertices(self, object, /): ...
    def addVertex(self, object, /): ...
    def addVertices(): ...
    def add_consecutive_vertices(): ...
    def add_next_vertices(self, object, /): ...
    def add_vertex(self, object, /): ...
    def add_vertices(): ...
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def checkValid(self, object, /): ...
    def check_valid(self, object, /): ...
    def clearMinmax(self, /): ...
    def clearVertices(self, /): ...
    def clear_minmax(self, /): ...
    def clear_vertices(self, /): ...
    def closePrimitive(self, /): ...
    def close_primitive(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def decompose(self, /): ...
    def doubleside(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    geom_rendering = None
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getEnds(self, /): ...
    def getFirstVertex(self, /): ...
    def getGeomRendering(self, /): ...
    def getIndexStride(self, /): ...
    def getIndexType(self, /): ...
    def getMaxVertex(self, /): ...
    def getMaxs(self, /): ...
    def getMinNumVerticesPerPrimitive(self, /): ...
    def getMinVertex(self, /): ...
    def getMins(self, /): ...
    def getModified(self, /): ...
    def getNumBytes(self, /): ...
    def getNumFaces(self, /): ...
    def getNumPrimitives(self, /): ...
    def getNumUnusedVerticesPerPrimitive(self, /): ...
    def getNumUsedVertices(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesPerPrimitive(self, /): ...
    def getPrimitiveEnd(self, object, /): ...
    def getPrimitiveMaxVertex(self, object, /): ...
    def getPrimitiveMinVertex(self, object, /): ...
    def getPrimitiveNumFaces(self, object, /): ...
    def getPrimitiveNumVertices(self, object, /): ...
    def getPrimitiveStart(self, object, /): ...
    def getPrimitiveType(self, /): ...
    def getRefCount(self, /): ...
    def getShadeModel(self, /): ...
    def getStripCutIndex(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexList(self, /): ...
    def getVertices(self, /): ...
    def getVerticesHandle(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_ends(self, /): ...
    def get_first_vertex(self, /): ...
    def get_geom_rendering(self, /): ...
    def get_index_stride(self, /): ...
    def get_index_type(self, /): ...
    def get_max_vertex(self, /): ...
    def get_maxs(self, /): ...
    def get_min_num_vertices_per_primitive(self, /): ...
    def get_min_vertex(self, /): ...
    def get_mins(self, /): ...
    def get_modified(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_faces(self, /): ...
    def get_num_primitives(self, /): ...
    def get_num_unused_vertices_per_primitive(self, /): ...
    def get_num_used_vertices(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_per_primitive(self, /): ...
    def get_primitive_end(self, object, /): ...
    def get_primitive_max_vertex(self, object, /): ...
    def get_primitive_min_vertex(self, object, /): ...
    def get_primitive_num_faces(self, object, /): ...
    def get_primitive_num_vertices(self, object, /): ...
    def get_primitive_start(self, object, /): ...
    def get_primitive_type(self, /): ...
    def get_ref_count(self, /): ...
    def get_shade_model(self, /): ...
    def get_strip_cut_index(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_list(self, /): ...
    def get_vertices(self, /): ...
    def get_vertices_handle(self, object, /): ...
    index_stride = None
    index_type = None
    def isComposite(self, /): ...
    def isExactType(self, object, /): ...
    def isIndexed(self, /): ...
    def isOfType(self, object, /): ...
    def is_composite(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_indexed(self, /): ...
    def is_of_type(self, object, /): ...
    def makeAdjacency(self, /): ...
    def makeCopy(self, /): ...
    def makeIndexed(self, /): ...
    def makeLines(self, /): ...
    def makeNonindexed(): ...
    def makePatches(self, /): ...
    def makePoints(self, /): ...
    def make_adjacency(self, /): ...
    def make_copy(self, /): ...
    def make_indexed(self, /): ...
    def make_lines(self, /): ...
    def make_nonindexed(): ...
    def make_patches(self, /): ...
    def make_points(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchShadeModel(self, object, /): ...
    def match_shade_model(self, object, /): ...
    maxs = None
    min_num_vertices_per_primitive = None
    mins = None
    modified = None
    def modifyEnds(self, /): ...
    def modifyVertices(): ...
    def modifyVerticesHandle(self, object, /): ...
    def modify_ends(self, /): ...
    def modify_vertices(): ...
    def modify_vertices_handle(self, object, /): ...
    num_bytes = None
    num_unused_vertices_per_primitive = None
    num_vertices_per_primitive = None
    def offsetVertices(): ...
    def offset_vertices(): ...
    def output(self, object, /): ...
    def packVertices(): ...
    def pack_vertices(): ...
    primitive_type = None
    def ref(self, /): ...
    ref_count = None
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumVertices(self, object, /): ...
    def reserve_num_vertices(self, object, /): ...
    def reverse(self, /): ...
    def rotate(self, /): ...
    def setEnds(self, object, /): ...
    def setIndexType(self, object, /): ...
    def setMinmax(): ...
    def setNonindexedVertices(): ...
    def setShadeModel(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setVertices(): ...
    def set_ends(self, object, /): ...
    def set_index_type(self, object, /): ...
    def set_minmax(): ...
    def set_nonindexed_vertices(): ...
    def set_shade_model(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_vertices(): ...
    shade_model = None
    strip_cut_index = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomVertexAnimationSpec:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    animation_type = None
    def assign(self, object, /): ...
    def getAnimationType(self, /): ...
    def getIndexedTransforms(self, /): ...
    def getNumTransforms(self, /): ...
    def get_animation_type(self, /): ...
    def get_indexed_transforms(self, /): ...
    def get_num_transforms(self, /): ...
    indexed_transforms = None
    num_transforms = None
    def output(self, object, /): ...
    def setHardware(): ...
    def setNone(self, /): ...
    def setPanda(self, /): ...
    def set_hardware(): ...
    def set_none(self, /): ...
    def set_panda(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeomVertexArrayData:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    array_format = None
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearRows(self, /): ...
    def clear_rows(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def fillin(): ...
    def getArrayFormat(self, /): ...
    def getBamModified(self, /): ...
    def getBook(): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getHandle(): ...
    def getIndependentLru(): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getModified(self, /): ...
    def getNumRows(self, /): ...
    def getRefCount(self, /): ...
    def getSmallLru(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def get_array_format(self, /): ...
    def get_bam_modified(self, /): ...
    def get_book(): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_handle(): ...
    def get_independent_lru(): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_modified(self, /): ...
    def get_num_rows(self, /): ...
    def get_ref_count(self, /): ...
    def get_small_lru(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def hasColumn(self, object, /): ...
    def has_column(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    def lruEpoch(): ...
    def lru_epoch(): ...
    def markBamModified(self, /): ...
    def markUsedLru(): ...
    def mark_bam_modified(self, /): ...
    def mark_used_lru(): ...
    modified = None
    def modifyHandle(): ...
    def modify_handle(): ...
    def output(self, object, /): ...
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def requestResident(): ...
    def request_resident(): ...
    def reserveNumRows(self, object, /): ...
    def reserve_num_rows(self, object, /): ...
    def setLruSize(self, object, /): ...
    def setNumRows(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def set_lru_size(self, object, /): ...
    def set_num_rows(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def uncleanSetNumRows(self, object, /): ...
    def unclean_set_num_rows(self, object, /): ...
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToSimpleLruPage(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_SimpleLruPage(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomVertexArrayDataHandle:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    array_format = None
    def clearRows(self, /): ...
    def clear_rows(self, /): ...
    def copyDataFrom(self, object, /): ...
    def copySubdataFrom(): ...
    def copy_data_from(self, object, /): ...
    def copy_subdata_from(): ...
    data_size_bytes = None
    def getArrayFormat(self, /): ...
    def getClassType(): ...
    def getData(self, /): ...
    def getDataSizeBytes(self, /): ...
    def getModified(self, /): ...
    def getNumRows(self, /): ...
    def getObject(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def getUsageHint(self, /): ...
    def get_array_format(self, /): ...
    def get_class_type(): ...
    def get_data(self, /): ...
    def get_data_size_bytes(self, /): ...
    def get_modified(self, /): ...
    def get_num_rows(self, /): ...
    def get_object(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def get_usage_hint(self, /): ...
    def markUsed(self, /): ...
    def mark_used(self, /): ...
    modified = None
    object = None
    def prepareNow(): ...
    def prepare_now(): ...
    def ref(self, /): ...
    ref_count = None
    def requestResident(self, /): ...
    def request_resident(self, /): ...
    def reserveNumRows(self, object, /): ...
    def reserve_num_rows(self, object, /): ...
    def setData(self, object, /): ...
    def setNumRows(self, object, /): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_num_rows(self, object, /): ...
    def set_subdata(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def uncleanSetNumRows(self, object, /): ...
    def unclean_set_num_rows(self, object, /): ...
    def unref(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    usage_hint = None
class GeomVertexArrayFormat:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addColumn(): ...
    def add_column(): ...
    def alignColumnsForAnimation(self, /): ...
    def align_columns_for_animation(self, /): ...
    def assign(self, object, /): ...
    def clearColumns(self, /): ...
    def clear_columns(self, /): ...
    columns = None
    def countUnusedSpace(self, /): ...
    def count_unused_space(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    divisor = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getColumn(): ...
    def getColumns(self, /): ...
    def getDivisor(self, /): ...
    def getFormatString(): ...
    def getNumColumns(self, /): ...
    def getPadTo(self, /): ...
    def getRefCount(self, /): ...
    def getStride(self, /): ...
    def getTotalBytes(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_column(): ...
    def get_columns(self, /): ...
    def get_divisor(self, /): ...
    def get_format_string(): ...
    def get_num_columns(self, /): ...
    def get_pad_to(self, /): ...
    def get_ref_count(self, /): ...
    def get_stride(self, /): ...
    def get_total_bytes(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasColumn(self, object, /): ...
    def has_column(self, object, /): ...
    def isDataSubsetOf(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegistered(self, /): ...
    def is_data_subset_of(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_registered(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def packColumns(self, /): ...
    def pack_columns(self, /): ...
    pad_to = None
    def ref(self, /): ...
    ref_count = None
    def registerFormat(object, /): ...
    def register_format(object, /): ...
    registered = None
    def removeColumn(self, object, /): ...
    def remove_column(self, object, /): ...
    def setDivisor(self, object, /): ...
    def setPadTo(self, object, /): ...
    def setStride(self, object, /): ...
    def set_divisor(self, object, /): ...
    def set_pad_to(self, object, /): ...
    def set_stride(self, object, /): ...
    stride = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    total_bytes = None
    type = None
    def unref(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithData(): ...
    def write_with_data(): ...
class GeomVertexColumn:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def assign(self, object, /): ...
    def getColumnAlignment(self, /): ...
    def getComponentBytes(self, /): ...
    def getContents(self, /): ...
    def getElementStride(self, /): ...
    def getName(self, /): ...
    def getNumComponents(self, /): ...
    def getNumElements(self, /): ...
    def getNumValues(self, /): ...
    def getNumericType(self, /): ...
    def getStart(self, /): ...
    def getTotalBytes(self, /): ...
    def get_column_alignment(self, /): ...
    def get_component_bytes(self, /): ...
    def get_contents(self, /): ...
    def get_element_stride(self, /): ...
    def get_name(self, /): ...
    def get_num_components(self, /): ...
    def get_num_elements(self, /): ...
    def get_num_values(self, /): ...
    def get_numeric_type(self, /): ...
    def get_start(self, /): ...
    def get_total_bytes(self, /): ...
    def hasHomogeneousCoord(self, /): ...
    def has_homogeneous_coord(self, /): ...
    def isBytewiseEquivalent(self, object, /): ...
    def is_bytewise_equivalent(self, object, /): ...
    def output(self, object, /): ...
    def overlapsWith(): ...
    def overlaps_with(): ...
    def setColumnAlignment(self, object, /): ...
    def setContents(self, object, /): ...
    def setName(self, object, /): ...
    def setNumComponents(self, object, /): ...
    def setNumericType(self, object, /): ...
    def setStart(self, object, /): ...
    def set_column_alignment(self, object, /): ...
    def set_contents(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_components(self, object, /): ...
    def set_numeric_type(self, object, /): ...
    def set_start(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeomVertexData:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def animateVertices(): ...
    def animate_vertices(): ...
    arrays = None
    def assign(self, object, /): ...
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearAnimatedVertices(self, /): ...
    def clearCache(self, /): ...
    def clearCacheStage(self, /): ...
    def clearRows(self, /): ...
    def clearSliderTable(self, /): ...
    def clearTransformBlendTable(self, /): ...
    def clearTransformTable(self, /): ...
    def clear_animated_vertices(self, /): ...
    def clear_cache(self, /): ...
    def clear_cache_stage(self, /): ...
    def clear_rows(self, /): ...
    def clear_slider_table(self, /): ...
    def clear_transform_blend_table(self, /): ...
    def clear_transform_table(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def convertTo(self, object, /): ...
    def convert_to(self, object, /): ...
    def copyFrom(): ...
    def copyRowFrom(): ...
    def copy_from(): ...
    def copy_row_from(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def describeVertex(): ...
    def describe_vertex(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    format = None
    def getArray(self, object, /): ...
    def getArrayHandle(self, object, /): ...
    def getArrays(self, /): ...
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getFormat(self, /): ...
    def getModified(): ...
    def getName(self, /): ...
    def getNumArrays(self, /): ...
    def getNumBytes(self, /): ...
    def getNumRows(self, /): ...
    def getRefCount(self, /): ...
    def getSliderTable(self, /): ...
    def getTransformBlendTable(self, /): ...
    def getTransformTable(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUsageHint(self, /): ...
    def get_array(self, object, /): ...
    def get_array_handle(self, object, /): ...
    def get_arrays(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_format(self, /): ...
    def get_modified(): ...
    def get_name(self, /): ...
    def get_num_arrays(self, /): ...
    def get_num_bytes(self, /): ...
    def get_num_rows(self, /): ...
    def get_ref_count(self, /): ...
    def get_slider_table(self, /): ...
    def get_transform_blend_table(self, /): ...
    def get_transform_table(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_usage_hint(self, /): ...
    def hasColumn(self, object, /): ...
    def has_column(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def modifyArray(self, object, /): ...
    def modifyArrayHandle(self, object, /): ...
    def modifyTransformBlendTable(self, /): ...
    def modify_array(self, object, /): ...
    def modify_array_handle(self, object, /): ...
    def modify_transform_blend_table(self, /): ...
    name = None
    num_bytes = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def replaceColumn(): ...
    def replace_column(): ...
    def requestResident(self, /): ...
    def request_resident(self, /): ...
    def reserveNumRows(self, object, /): ...
    def reserve_num_rows(self, object, /): ...
    def reverseNormals(self, /): ...
    def reverse_normals(self, /): ...
    def scaleColor(): ...
    def scale_color(): ...
    def setArray(): ...
    def setColor(): ...
    def setFormat(self, object, /): ...
    def setName(self, object, /): ...
    def setNumRows(self, object, /): ...
    def setSliderTable(self, object, /): ...
    def setTransformBlendTable(self, object, /): ...
    def setTransformTable(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def set_array(): ...
    def set_color(): ...
    def set_format(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_rows(self, object, /): ...
    def set_slider_table(self, object, /): ...
    def set_transform_blend_table(self, object, /): ...
    def set_transform_table(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    slider_table = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def transformVertices(): ...
    transform_table = None
    def transform_vertices(): ...
    type = None
    def uncleanSetFormat(self, object, /): ...
    def uncleanSetNumRows(self, object, /): ...
    def unclean_set_format(self, object, /): ...
    def unclean_set_num_rows(self, object, /): ...
    def unref(self, /): ...
    def upcastToCopyOnWriteObject(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_CopyOnWriteObject(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    usage_hint = None
    def write(): ...
class GeomVertexFormat:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addArray(self, object, /): ...
    def add_array(self, object, /): ...
    def alignColumnsForAnimation(self, /): ...
    def align_columns_for_animation(self, /): ...
    animation = None
    arrays = None
    def assign(self, object, /): ...
    def clearArrays(self, /): ...
    def clear_arrays(self, /): ...
    columns = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getAnimation(self, /): ...
    def getArray(self, object, /): ...
    def getArrayWith(self, object, /): ...
    def getArrays(self, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getColumn(self, object, /): ...
    def getColumnName(self, object, /): ...
    def getColumns(self, /): ...
    def getEmpty(): ...
    def getMorphBase(self, object, /): ...
    def getMorphBases(self, /): ...
    def getMorphDelta(self, object, /): ...
    def getMorphDeltas(self, /): ...
    def getMorphSlider(self, object, /): ...
    def getMorphSliders(self, /): ...
    def getNumArrays(self, /): ...
    def getNumColumns(self, /): ...
    def getNumMorphs(self, /): ...
    def getNumPoints(self, /): ...
    def getNumTexcoords(self, /): ...
    def getNumVectors(self, /): ...
    def getPoint(self, object, /): ...
    def getPoints(self, /): ...
    def getPostAnimatedFormat(self, /): ...
    def getRefCount(self, /): ...
    def getTexcoord(self, object, /): ...
    def getTexcoords(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnionFormat(self, object, /): ...
    def getV3(): ...
    def getV3c4(): ...
    def getV3c4t2(): ...
    def getV3cp(): ...
    def getV3cpt2(): ...
    def getV3n3(): ...
    def getV3n3c4(): ...
    def getV3n3c4t2(): ...
    def getV3n3cp(): ...
    def getV3n3cpt2(): ...
    def getV3n3t2(): ...
    def getV3t2(): ...
    def getVector(self, object, /): ...
    def getVectors(self, /): ...
    def get_animation(self, /): ...
    def get_array(self, object, /): ...
    def get_array_with(self, object, /): ...
    def get_arrays(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_column(self, object, /): ...
    def get_column_name(self, object, /): ...
    def get_columns(self, /): ...
    def get_empty(): ...
    def get_morph_base(self, object, /): ...
    def get_morph_bases(self, /): ...
    def get_morph_delta(self, object, /): ...
    def get_morph_deltas(self, /): ...
    def get_morph_slider(self, object, /): ...
    def get_morph_sliders(self, /): ...
    def get_num_arrays(self, /): ...
    def get_num_columns(self, /): ...
    def get_num_morphs(self, /): ...
    def get_num_points(self, /): ...
    def get_num_texcoords(self, /): ...
    def get_num_vectors(self, /): ...
    def get_point(self, object, /): ...
    def get_points(self, /): ...
    def get_post_animated_format(self, /): ...
    def get_ref_count(self, /): ...
    def get_texcoord(self, object, /): ...
    def get_texcoords(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_union_format(self, object, /): ...
    def get_v3(): ...
    def get_v3c4(): ...
    def get_v3c4t2(): ...
    def get_v3cp(): ...
    def get_v3cpt2(): ...
    def get_v3n3(): ...
    def get_v3n3c4(): ...
    def get_v3n3c4t2(): ...
    def get_v3n3cp(): ...
    def get_v3n3cpt2(): ...
    def get_v3n3t2(): ...
    def get_v3t2(): ...
    def get_vector(self, object, /): ...
    def get_vectors(self, /): ...
    def hasColumn(self, object, /): ...
    def has_column(self, object, /): ...
    def insertArray(): ...
    def insert_array(): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegistered(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_registered(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def maybeAlignColumnsForAnimation(self, /): ...
    def maybe_align_columns_for_animation(self, /): ...
    def modifyArray(self, object, /): ...
    def modify_array(self, object, /): ...
    def output(self, object, /): ...
    def packColumns(self, /): ...
    def pack_columns(self, /): ...
    points = None
    def ref(self, /): ...
    ref_count = None
    def registerFormat(object, /): ...
    def register_format(object, /): ...
    registered = None
    def removeArray(self, object, /): ...
    def removeColumn(): ...
    def removeEmptyArrays(self, /): ...
    def remove_array(self, object, /): ...
    def remove_column(): ...
    def remove_empty_arrays(self, /): ...
    def setAnimation(self, object, /): ...
    def setArray(): ...
    def set_animation(self, object, /): ...
    def set_array(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    vectors = None
    def write(): ...
    def writeWithData(): ...
    def write_with_data(): ...
class GeomVertexReader:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getArray(self, /): ...
    def getArrayData(self, /): ...
    def getArrayHandle(self, /): ...
    def getColumn(self, /): ...
    def getCurrentThread(self, /): ...
    def getData1(self, /): ...
    def getData1d(self, /): ...
    def getData1f(self, /): ...
    def getData1i(self, /): ...
    def getData2(self, /): ...
    def getData2d(self, /): ...
    def getData2f(self, /): ...
    def getData2i(self, /): ...
    def getData3(self, /): ...
    def getData3d(self, /): ...
    def getData3f(self, /): ...
    def getData3i(self, /): ...
    def getData4(self, /): ...
    def getData4d(self, /): ...
    def getData4f(self, /): ...
    def getData4i(self, /): ...
    def getForce(self, /): ...
    def getMatrix3(self, /): ...
    def getMatrix3d(self, /): ...
    def getMatrix3f(self, /): ...
    def getMatrix4(self, /): ...
    def getMatrix4d(self, /): ...
    def getMatrix4f(self, /): ...
    def getReadRow(self, /): ...
    def getStartRow(self, /): ...
    def getStride(self, /): ...
    def getVertexData(self, /): ...
    def get_array(self, /): ...
    def get_array_data(self, /): ...
    def get_array_handle(self, /): ...
    def get_column(self, /): ...
    def get_current_thread(self, /): ...
    def get_data1(self, /): ...
    def get_data1d(self, /): ...
    def get_data1f(self, /): ...
    def get_data1i(self, /): ...
    def get_data2(self, /): ...
    def get_data2d(self, /): ...
    def get_data2f(self, /): ...
    def get_data2i(self, /): ...
    def get_data3(self, /): ...
    def get_data3d(self, /): ...
    def get_data3f(self, /): ...
    def get_data3i(self, /): ...
    def get_data4(self, /): ...
    def get_data4d(self, /): ...
    def get_data4f(self, /): ...
    def get_data4i(self, /): ...
    def get_force(self, /): ...
    def get_matrix3(self, /): ...
    def get_matrix3d(self, /): ...
    def get_matrix3f(self, /): ...
    def get_matrix4(self, /): ...
    def get_matrix4d(self, /): ...
    def get_matrix4f(self, /): ...
    def get_read_row(self, /): ...
    def get_start_row(self, /): ...
    def get_stride(self, /): ...
    def get_vertex_data(self, /): ...
    def hasColumn(self, /): ...
    def has_column(self, /): ...
    def isAtEnd(self, /): ...
    def is_at_end(self, /): ...
    def output(self, object, /): ...
    def setColumn(): ...
    def setForce(self, object, /): ...
    def setRow(self, object, /): ...
    def setRowUnsafe(self, object, /): ...
    def set_column(): ...
    def set_force(self, object, /): ...
    def set_row(self, object, /): ...
    def set_row_unsafe(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeomVertexRewriter:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addData1(self, object, /): ...
    def addData1d(self, object, /): ...
    def addData1f(self, object, /): ...
    def addData1i(self, object, /): ...
    def addData2(): ...
    def addData2d(): ...
    def addData2f(): ...
    def addData2i(): ...
    def addData3(): ...
    def addData3d(): ...
    def addData3f(): ...
    def addData3i(): ...
    def addData4(): ...
    def addData4d(): ...
    def addData4f(): ...
    def addData4i(): ...
    def addMatrix3(self, object, /): ...
    def addMatrix3d(self, object, /): ...
    def addMatrix3f(self, object, /): ...
    def addMatrix4(self, object, /): ...
    def addMatrix4d(self, object, /): ...
    def addMatrix4f(self, object, /): ...
    def add_data1(self, object, /): ...
    def add_data1d(self, object, /): ...
    def add_data1f(self, object, /): ...
    def add_data1i(self, object, /): ...
    def add_data2(): ...
    def add_data2d(): ...
    def add_data2f(): ...
    def add_data2i(): ...
    def add_data3(): ...
    def add_data3d(): ...
    def add_data3f(): ...
    def add_data3i(): ...
    def add_data4(): ...
    def add_data4d(): ...
    def add_data4f(): ...
    def add_data4i(): ...
    def add_matrix3(self, object, /): ...
    def add_matrix3d(self, object, /): ...
    def add_matrix3f(self, object, /): ...
    def add_matrix4(self, object, /): ...
    def add_matrix4d(self, object, /): ...
    def add_matrix4f(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getArray(self, /): ...
    def getArrayData(self, /): ...
    def getArrayHandle(self, /): ...
    def getColumn(self, /): ...
    def getCurrentThread(self, /): ...
    def getData1(self, /): ...
    def getData1d(self, /): ...
    def getData1f(self, /): ...
    def getData1i(self, /): ...
    def getData2(self, /): ...
    def getData2d(self, /): ...
    def getData2f(self, /): ...
    def getData2i(self, /): ...
    def getData3(self, /): ...
    def getData3d(self, /): ...
    def getData3f(self, /): ...
    def getData3i(self, /): ...
    def getData4(self, /): ...
    def getData4d(self, /): ...
    def getData4f(self, /): ...
    def getData4i(self, /): ...
    def getForce(self, /): ...
    def getMatrix3(self, /): ...
    def getMatrix3d(self, /): ...
    def getMatrix3f(self, /): ...
    def getMatrix4(self, /): ...
    def getMatrix4d(self, /): ...
    def getMatrix4f(self, /): ...
    def getReadRow(self, /): ...
    def getStartRow(self, /): ...
    def getStride(self, /): ...
    def getVertexData(self, /): ...
    def getWriteRow(self, /): ...
    def get_array(self, /): ...
    def get_array_data(self, /): ...
    def get_array_handle(self, /): ...
    def get_column(self, /): ...
    def get_current_thread(self, /): ...
    def get_data1(self, /): ...
    def get_data1d(self, /): ...
    def get_data1f(self, /): ...
    def get_data1i(self, /): ...
    def get_data2(self, /): ...
    def get_data2d(self, /): ...
    def get_data2f(self, /): ...
    def get_data2i(self, /): ...
    def get_data3(self, /): ...
    def get_data3d(self, /): ...
    def get_data3f(self, /): ...
    def get_data3i(self, /): ...
    def get_data4(self, /): ...
    def get_data4d(self, /): ...
    def get_data4f(self, /): ...
    def get_data4i(self, /): ...
    def get_force(self, /): ...
    def get_matrix3(self, /): ...
    def get_matrix3d(self, /): ...
    def get_matrix3f(self, /): ...
    def get_matrix4(self, /): ...
    def get_matrix4d(self, /): ...
    def get_matrix4f(self, /): ...
    def get_read_row(self, /): ...
    def get_start_row(self, /): ...
    def get_stride(self, /): ...
    def get_vertex_data(self, /): ...
    def get_write_row(self, /): ...
    def hasColumn(self, /): ...
    def has_column(self, /): ...
    def isAtEnd(self, /): ...
    def is_at_end(self, /): ...
    def output(self, object, /): ...
    def reserveNumRows(self, object, /): ...
    def reserve_num_rows(self, object, /): ...
    def setColumn(): ...
    def setData1(self, object, /): ...
    def setData1d(self, object, /): ...
    def setData1f(self, object, /): ...
    def setData1i(self, object, /): ...
    def setData2(): ...
    def setData2d(): ...
    def setData2f(): ...
    def setData2i(): ...
    def setData3(): ...
    def setData3d(): ...
    def setData3f(): ...
    def setData3i(): ...
    def setData4(): ...
    def setData4d(): ...
    def setData4f(): ...
    def setData4i(): ...
    def setForce(self, object, /): ...
    def setMatrix3(self, object, /): ...
    def setMatrix3d(self, object, /): ...
    def setMatrix3f(self, object, /): ...
    def setMatrix4(self, object, /): ...
    def setMatrix4d(self, object, /): ...
    def setMatrix4f(self, object, /): ...
    def setRow(self, object, /): ...
    def setRowUnsafe(self, object, /): ...
    def set_column(): ...
    def set_data1(self, object, /): ...
    def set_data1d(self, object, /): ...
    def set_data1f(self, object, /): ...
    def set_data1i(self, object, /): ...
    def set_data2(): ...
    def set_data2d(): ...
    def set_data2f(): ...
    def set_data2i(): ...
    def set_data3(): ...
    def set_data3d(): ...
    def set_data3f(): ...
    def set_data3i(): ...
    def set_data4(): ...
    def set_data4d(): ...
    def set_data4f(): ...
    def set_data4i(): ...
    def set_force(self, object, /): ...
    def set_matrix3(self, object, /): ...
    def set_matrix3d(self, object, /): ...
    def set_matrix3f(self, object, /): ...
    def set_matrix4(self, object, /): ...
    def set_matrix4d(self, object, /): ...
    def set_matrix4f(self, object, /): ...
    def set_row(self, object, /): ...
    def set_row_unsafe(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToGeomVertexReader(self, /): ...
    def upcastToGeomVertexWriter(self, /): ...
    def upcast_to_GeomVertexReader(self, /): ...
    def upcast_to_GeomVertexWriter(self, /): ...
class GeomVertexWriter:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def addData1(self, object, /): ...
    def addData1d(self, object, /): ...
    def addData1f(self, object, /): ...
    def addData1i(self, object, /): ...
    def addData2(): ...
    def addData2d(): ...
    def addData2f(): ...
    def addData2i(): ...
    def addData3(): ...
    def addData3d(): ...
    def addData3f(): ...
    def addData3i(): ...
    def addData4(): ...
    def addData4d(): ...
    def addData4f(): ...
    def addData4i(): ...
    def addMatrix3(self, object, /): ...
    def addMatrix3d(self, object, /): ...
    def addMatrix3f(self, object, /): ...
    def addMatrix4(self, object, /): ...
    def addMatrix4d(self, object, /): ...
    def addMatrix4f(self, object, /): ...
    def add_data1(self, object, /): ...
    def add_data1d(self, object, /): ...
    def add_data1f(self, object, /): ...
    def add_data1i(self, object, /): ...
    def add_data2(): ...
    def add_data2d(): ...
    def add_data2f(): ...
    def add_data2i(): ...
    def add_data3(): ...
    def add_data3d(): ...
    def add_data3f(): ...
    def add_data3i(): ...
    def add_data4(): ...
    def add_data4d(): ...
    def add_data4f(): ...
    def add_data4i(): ...
    def add_matrix3(self, object, /): ...
    def add_matrix3d(self, object, /): ...
    def add_matrix3f(self, object, /): ...
    def add_matrix4(self, object, /): ...
    def add_matrix4d(self, object, /): ...
    def add_matrix4f(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getArray(self, /): ...
    def getArrayData(self, /): ...
    def getArrayHandle(self, /): ...
    def getColumn(self, /): ...
    def getCurrentThread(self, /): ...
    def getStartRow(self, /): ...
    def getStride(self, /): ...
    def getVertexData(self, /): ...
    def getWriteRow(self, /): ...
    def get_array(self, /): ...
    def get_array_data(self, /): ...
    def get_array_handle(self, /): ...
    def get_column(self, /): ...
    def get_current_thread(self, /): ...
    def get_start_row(self, /): ...
    def get_stride(self, /): ...
    def get_vertex_data(self, /): ...
    def get_write_row(self, /): ...
    def hasColumn(self, /): ...
    def has_column(self, /): ...
    def isAtEnd(self, /): ...
    def is_at_end(self, /): ...
    def output(self, object, /): ...
    def reserveNumRows(self, object, /): ...
    def reserve_num_rows(self, object, /): ...
    def setColumn(): ...
    def setData1(self, object, /): ...
    def setData1d(self, object, /): ...
    def setData1f(self, object, /): ...
    def setData1i(self, object, /): ...
    def setData2(): ...
    def setData2d(): ...
    def setData2f(): ...
    def setData2i(): ...
    def setData3(): ...
    def setData3d(): ...
    def setData3f(): ...
    def setData3i(): ...
    def setData4(): ...
    def setData4d(): ...
    def setData4f(): ...
    def setData4i(): ...
    def setMatrix3(self, object, /): ...
    def setMatrix3d(self, object, /): ...
    def setMatrix3f(self, object, /): ...
    def setMatrix4(self, object, /): ...
    def setMatrix4d(self, object, /): ...
    def setMatrix4f(self, object, /): ...
    def setRow(self, object, /): ...
    def setRowUnsafe(self, object, /): ...
    def set_column(): ...
    def set_data1(self, object, /): ...
    def set_data1d(self, object, /): ...
    def set_data1f(self, object, /): ...
    def set_data1i(self, object, /): ...
    def set_data2(): ...
    def set_data2d(): ...
    def set_data2f(): ...
    def set_data2i(): ...
    def set_data3(): ...
    def set_data3d(): ...
    def set_data3f(): ...
    def set_data3i(): ...
    def set_data4(): ...
    def set_data4d(): ...
    def set_data4f(): ...
    def set_data4i(): ...
    def set_matrix3(self, object, /): ...
    def set_matrix3d(self, object, /): ...
    def set_matrix3f(self, object, /): ...
    def set_matrix4(self, object, /): ...
    def set_matrix4d(self, object, /): ...
    def set_matrix4f(self, object, /): ...
    def set_row(self, object, /): ...
    def set_row_unsafe(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GeometricBoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class GlobPattern:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    case_sensitive = None
    def getCaseSensitive(self, /): ...
    def getConstPrefix(self, /): ...
    def getNomatchChars(self, /): ...
    def getPattern(self, /): ...
    def get_case_sensitive(self, /): ...
    def get_const_prefix(self, /): ...
    def get_nomatch_chars(self, /): ...
    def get_pattern(self, /): ...
    def hasGlobCharacters(self, /): ...
    def has_glob_characters(self, /): ...
    def matchFiles(): ...
    def match_files(): ...
    def matches(self, object, /): ...
    def matchesFile(self, object, /): ...
    def matches_file(self, object, /): ...
    nomatch_chars = None
    def output(self, object, /): ...
    pattern = None
    def setCaseSensitive(self, object, /): ...
    def setNomatchChars(self, object, /): ...
    def setPattern(self, object, /): ...
    def set_case_sensitive(self, object, /): ...
    def set_nomatch_chars(self, object, /): ...
    def set_pattern(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GraphicsBuffer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FMParasite:int = None
    FMRefresh:int = None
    FMRender:int = None
    FM_parasite:int = None
    FM_refresh:int = None
    FM_render:int = None
    RTMBindLayered:int = None
    RTMBindOrCopy:int = None
    RTMCopyRam:int = None
    RTMCopyTexture:int = None
    RTMNone:int = None
    RTMTriggeredCopyRam:int = None
    RTMTriggeredCopyTexture:int = None
    RTM_bind_layered:int = None
    RTM_bind_or_copy:int = None
    RTM_copy_ram:int = None
    RTM_copy_texture:int = None
    RTM_none:int = None
    RTM_triggered_copy_ram:int = None
    RTM_triggered_copy_texture:int = None
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    active_display_regions = None
    def addRenderTexture(): ...
    def add_render_texture(): ...
    child_sort = None
    def clearChildSort(self, /): ...
    def clearDeleteFlag(self, /): ...
    def clearRenderTextures(self, /): ...
    def clear_child_sort(self, /): ...
    clear_color = None
    def clear_delete_flag(self, /): ...
    clear_depth = None
    def clear_render_textures(self, /): ...
    clear_stencil = None
    def countTextures(self, /): ...
    def count_textures(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    display_regions = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    engine = None
    fb_size = None
    def fillin(): ...
    def flipReady(self, /): ...
    def flip_ready(self, /): ...
    def getActiveDisplayRegion(self, object, /): ...
    def getActiveDisplayRegions(self, /): ...
    def getBamModified(self, /): ...
    def getChildSort(self, /): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getDeleteFlag(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getEngine(self, /): ...
    def getFbProperties(self, /): ...
    def getFbSize(self, /): ...
    def getFbXSize(self, /): ...
    def getFbYSize(self, /): ...
    def getGsg(self, /): ...
    def getHost(self, /): ...
    def getInverted(self, /): ...
    def getLeftEyeColorMask(self, /): ...
    def getName(self, /): ...
    def getNumActiveDisplayRegions(self, /): ...
    def getNumDisplayRegions(self, /): ...
    def getOneShot(self, /): ...
    def getOverlayDisplayRegion(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getRedBlueStereo(self, /): ...
    def getRefCount(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRightEyeColorMask(self, /): ...
    def getRtmMode(): ...
    def getSbsLeftDimensions(self, /): ...
    def getSbsLeftSize(self, /): ...
    def getSbsLeftXSize(self, /): ...
    def getSbsLeftYSize(self, /): ...
    def getSbsRightDimensions(self, /): ...
    def getSbsRightSize(self, /): ...
    def getSbsRightXSize(self, /): ...
    def getSbsRightYSize(self, /): ...
    def getScreenshot(): ...
    def getSideBySideStereo(self, /): ...
    def getSize(self, /): ...
    def getSort(self, /): ...
    def getSupportsRenderTexture(self, /): ...
    def getSwapEyes(self, /): ...
    def getTexture(): ...
    def getTextureCard(self, /): ...
    def getTexturePlane(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_active_display_region(self, object, /): ...
    def get_active_display_regions(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child_sort(self, /): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_delete_flag(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_engine(self, /): ...
    def get_fb_properties(self, /): ...
    def get_fb_size(self, /): ...
    def get_fb_x_size(self, /): ...
    def get_fb_y_size(self, /): ...
    def get_gsg(self, /): ...
    def get_host(self, /): ...
    def get_inverted(self, /): ...
    def get_left_eye_color_mask(self, /): ...
    def get_name(self, /): ...
    def get_num_active_display_regions(self, /): ...
    def get_num_display_regions(self, /): ...
    def get_one_shot(self, /): ...
    def get_overlay_display_region(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_red_blue_stereo(self, /): ...
    def get_ref_count(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_right_eye_color_mask(self, /): ...
    def get_rtm_mode(): ...
    def get_sbs_left_dimensions(self, /): ...
    def get_sbs_left_size(self, /): ...
    def get_sbs_left_x_size(self, /): ...
    def get_sbs_left_y_size(self, /): ...
    def get_sbs_right_dimensions(self, /): ...
    def get_sbs_right_size(self, /): ...
    def get_sbs_right_x_size(self, /): ...
    def get_sbs_right_y_size(self, /): ...
    def get_screenshot(): ...
    def get_side_by_side_stereo(self, /): ...
    def get_size(self, /): ...
    def get_sort(self, /): ...
    def get_supports_render_texture(self, /): ...
    def get_swap_eyes(self, /): ...
    def get_texture(): ...
    def get_texture_card(self, /): ...
    def get_texture_plane(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    gsg = None
    def hasSize(self, /): ...
    def hasTexture(self, /): ...
    def has_size(self, /): ...
    def has_texture(self, /): ...
    inverted = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isExactType(self, object, /): ...
    def isNonzeroSize(self, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_nonzero_size(self, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    def is_valid(self, /): ...
    def makeCubeMap(): ...
    def makeDisplayRegion(): ...
    def makeMonoDisplayRegion(): ...
    def makeScreenshotFilename(): ...
    def makeStereoDisplayRegion(): ...
    def makeTextureBuffer(): ...
    def make_cube_map(): ...
    def make_display_region(): ...
    def make_mono_display_region(): ...
    def make_screenshot_filename(): ...
    def make_stereo_display_region(): ...
    def make_texture_buffer(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    one_shot = None
    pipe = None
    pixel_factor = None
    pixel_zoom = None
    def ref(self, /): ...
    ref_count = None
    def removeAllDisplayRegions(self, /): ...
    def removeDisplayRegion(self, object, /): ...
    def remove_all_display_regions(self, /): ...
    def remove_display_region(self, object, /): ...
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    sbs_left_size = None
    sbs_right_size = None
    def setActive(self, object, /): ...
    def setChildSort(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setInverted(self, object, /): ...
    def setOneShot(self, object, /): ...
    def setOverlayDisplayRegion(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setRedBlueStereo(): ...
    def setSideBySideStereo(): ...
    def setSize(): ...
    def setSort(self, object, /): ...
    def setSwapEyes(self, object, /): ...
    def set_active(self, object, /): ...
    def set_child_sort(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_inverted(self, object, /): ...
    def set_one_shot(self, object, /): ...
    def set_overlay_display_region(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_red_blue_stereo(): ...
    def set_side_by_side_stereo(): ...
    def set_size(): ...
    def set_sort(self, object, /): ...
    def set_swap_eyes(self, object, /): ...
    def setupRenderTexture(): ...
    def setup_render_texture(): ...
    def shareDepthBuffer(self, object, /): ...
    def share_depth_buffer(self, object, /): ...
    size = None
    sort = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    supports_render_texture = None
    swap_eyes = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triggerCopy(self, /): ...
    def trigger_copy(self, /): ...
    type = None
    def unref(self, /): ...
    def unshareDepthBuffer(self, /): ...
    def unshare_depth_buffer(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToGraphicsOutputBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_GraphicsOutputBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class GraphicsDevice:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getPipe(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_pipe(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class GraphicsEngine:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addWindow(): ...
    def add_window(): ...
    auto_flip = None
    default_loader = None
    def dispatchCompute(): ...
    def dispatch_compute(): ...
    def extractTextureData(): ...
    def extract_texture_data(): ...
    def flipFrame(self, /): ...
    def flip_frame(self, /): ...
    def getAutoFlip(self, /): ...
    def getClassType(): ...
    def getDefaultLoader(self, /): ...
    def getGlobalPtr(): ...
    def getNumWindows(self, /): ...
    def getPortalCull(self, /): ...
    def getRefCount(self, /): ...
    def getRenderLock(self, /): ...
    def getThreadingModel(self, /): ...
    def getWindow(self, object, /): ...
    def getWindows(self, /): ...
    def get_auto_flip(self, /): ...
    def get_class_type(): ...
    def get_default_loader(self, /): ...
    def get_global_ptr(): ...
    def get_num_windows(self, /): ...
    def get_portal_cull(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_lock(self, /): ...
    def get_threading_model(self, /): ...
    def get_window(self, object, /): ...
    def get_windows(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def makeBuffer(): ...
    def makeOutput(): ...
    def makeParasite(): ...
    def make_buffer(): ...
    def make_output(): ...
    def make_parasite(): ...
    def openWindows(self, /): ...
    def open_windows(self, /): ...
    portal_cull = None
    def readyFlip(self, /): ...
    def ready_flip(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllWindows(self, /): ...
    def removeWindow(self, object, /): ...
    def remove_all_windows(self, /): ...
    def remove_window(self, object, /): ...
    def renderFrame(self, /): ...
    def render_frame(self, /): ...
    render_lock = None
    def resetAllWindows(self, object, /): ...
    def reset_all_windows(self, object, /): ...
    def setAutoFlip(self, object, /): ...
    def setDefaultLoader(self, object, /): ...
    def setPortalCull(self, object, /): ...
    def setThreadingModel(self, object, /): ...
    def set_auto_flip(self, object, /): ...
    def set_default_loader(self, object, /): ...
    def set_portal_cull(self, object, /): ...
    def set_threading_model(self, object, /): ...
    def syncFrame(self, /): ...
    def sync_frame(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    threading_model = None
    def unref(self, /): ...
    windows = None
class GraphicsOutput:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FMParasite:int = None
    FMRefresh:int = None
    FMRender:int = None
    FM_parasite:int = None
    FM_refresh:int = None
    FM_render:int = None
    RTMBindLayered:int = None
    RTMBindOrCopy:int = None
    RTMCopyRam:int = None
    RTMCopyTexture:int = None
    RTMNone:int = None
    RTMTriggeredCopyRam:int = None
    RTMTriggeredCopyTexture:int = None
    RTM_bind_layered:int = None
    RTM_bind_or_copy:int = None
    RTM_copy_ram:int = None
    RTM_copy_texture:int = None
    RTM_none:int = None
    RTM_triggered_copy_ram:int = None
    RTM_triggered_copy_texture:int = None
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    active_display_regions = None
    def addRenderTexture(): ...
    def add_render_texture(): ...
    child_sort = None
    def clearChildSort(self, /): ...
    def clearDeleteFlag(self, /): ...
    def clearRenderTextures(self, /): ...
    def clear_child_sort(self, /): ...
    clear_color = None
    def clear_delete_flag(self, /): ...
    clear_depth = None
    def clear_render_textures(self, /): ...
    clear_stencil = None
    def countTextures(self, /): ...
    def count_textures(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    display_regions = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    engine = None
    fb_size = None
    def fillin(): ...
    def flipReady(self, /): ...
    def flip_ready(self, /): ...
    def getActiveDisplayRegion(self, object, /): ...
    def getActiveDisplayRegions(self, /): ...
    def getBamModified(self, /): ...
    def getChildSort(self, /): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getDeleteFlag(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getEngine(self, /): ...
    def getFbProperties(self, /): ...
    def getFbSize(self, /): ...
    def getFbXSize(self, /): ...
    def getFbYSize(self, /): ...
    def getGsg(self, /): ...
    def getHost(self, /): ...
    def getInverted(self, /): ...
    def getLeftEyeColorMask(self, /): ...
    def getName(self, /): ...
    def getNumActiveDisplayRegions(self, /): ...
    def getNumDisplayRegions(self, /): ...
    def getOneShot(self, /): ...
    def getOverlayDisplayRegion(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getRedBlueStereo(self, /): ...
    def getRefCount(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRightEyeColorMask(self, /): ...
    def getRtmMode(): ...
    def getSbsLeftDimensions(self, /): ...
    def getSbsLeftSize(self, /): ...
    def getSbsLeftXSize(self, /): ...
    def getSbsLeftYSize(self, /): ...
    def getSbsRightDimensions(self, /): ...
    def getSbsRightSize(self, /): ...
    def getSbsRightXSize(self, /): ...
    def getSbsRightYSize(self, /): ...
    def getScreenshot(): ...
    def getSideBySideStereo(self, /): ...
    def getSize(self, /): ...
    def getSort(self, /): ...
    def getSupportsRenderTexture(self, /): ...
    def getSwapEyes(self, /): ...
    def getTexture(): ...
    def getTextureCard(self, /): ...
    def getTexturePlane(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_active_display_region(self, object, /): ...
    def get_active_display_regions(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child_sort(self, /): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_delete_flag(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_engine(self, /): ...
    def get_fb_properties(self, /): ...
    def get_fb_size(self, /): ...
    def get_fb_x_size(self, /): ...
    def get_fb_y_size(self, /): ...
    def get_gsg(self, /): ...
    def get_host(self, /): ...
    def get_inverted(self, /): ...
    def get_left_eye_color_mask(self, /): ...
    def get_name(self, /): ...
    def get_num_active_display_regions(self, /): ...
    def get_num_display_regions(self, /): ...
    def get_one_shot(self, /): ...
    def get_overlay_display_region(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_red_blue_stereo(self, /): ...
    def get_ref_count(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_right_eye_color_mask(self, /): ...
    def get_rtm_mode(): ...
    def get_sbs_left_dimensions(self, /): ...
    def get_sbs_left_size(self, /): ...
    def get_sbs_left_x_size(self, /): ...
    def get_sbs_left_y_size(self, /): ...
    def get_sbs_right_dimensions(self, /): ...
    def get_sbs_right_size(self, /): ...
    def get_sbs_right_x_size(self, /): ...
    def get_sbs_right_y_size(self, /): ...
    def get_screenshot(): ...
    def get_side_by_side_stereo(self, /): ...
    def get_size(self, /): ...
    def get_sort(self, /): ...
    def get_supports_render_texture(self, /): ...
    def get_swap_eyes(self, /): ...
    def get_texture(): ...
    def get_texture_card(self, /): ...
    def get_texture_plane(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    gsg = None
    def hasSize(self, /): ...
    def hasTexture(self, /): ...
    def has_size(self, /): ...
    def has_texture(self, /): ...
    inverted = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isExactType(self, object, /): ...
    def isNonzeroSize(self, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_nonzero_size(self, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    def is_valid(self, /): ...
    def makeCubeMap(): ...
    def makeDisplayRegion(): ...
    def makeMonoDisplayRegion(): ...
    def makeScreenshotFilename(): ...
    def makeStereoDisplayRegion(): ...
    def makeTextureBuffer(): ...
    def make_cube_map(): ...
    def make_display_region(): ...
    def make_mono_display_region(): ...
    def make_screenshot_filename(): ...
    def make_stereo_display_region(): ...
    def make_texture_buffer(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    one_shot = None
    pipe = None
    pixel_factor = None
    pixel_zoom = None
    def ref(self, /): ...
    ref_count = None
    def removeAllDisplayRegions(self, /): ...
    def removeDisplayRegion(self, object, /): ...
    def remove_all_display_regions(self, /): ...
    def remove_display_region(self, object, /): ...
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    sbs_left_size = None
    sbs_right_size = None
    def setActive(self, object, /): ...
    def setChildSort(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setInverted(self, object, /): ...
    def setOneShot(self, object, /): ...
    def setOverlayDisplayRegion(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setRedBlueStereo(): ...
    def setSideBySideStereo(): ...
    def setSort(self, object, /): ...
    def setSwapEyes(self, object, /): ...
    def set_active(self, object, /): ...
    def set_child_sort(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_inverted(self, object, /): ...
    def set_one_shot(self, object, /): ...
    def set_overlay_display_region(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_red_blue_stereo(): ...
    def set_side_by_side_stereo(): ...
    def set_sort(self, object, /): ...
    def set_swap_eyes(self, object, /): ...
    def setupRenderTexture(): ...
    def setup_render_texture(): ...
    def shareDepthBuffer(self, object, /): ...
    def share_depth_buffer(self, object, /): ...
    size = None
    sort = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    supports_render_texture = None
    swap_eyes = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triggerCopy(self, /): ...
    def trigger_copy(self, /): ...
    type = None
    def unref(self, /): ...
    def unshareDepthBuffer(self, /): ...
    def unshare_depth_buffer(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToGraphicsOutputBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_GraphicsOutputBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class GraphicsOutputBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setSort(self, object, /): ...
    def set_sort(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class GraphicsPipe:
    ...
    BFCanBindColor:int = None
    BFCanBindEvery:int = None
    BFCanBindLayered:int = None
    BFFbPropsOptional:int = None
    BFRefuseParasite:int = None
    BFRefuseWindow:int = None
    BFRequireCallbackWindow:int = None
    BFRequireParasite:int = None
    BFRequireWindow:int = None
    BFResizeable:int = None
    BFRttCumulative:int = None
    BFSizePower2:int = None
    BFSizeSquare:int = None
    BFSizeTrackHost:int = None
    BF_can_bind_color:int = None
    BF_can_bind_every:int = None
    BF_can_bind_layered:int = None
    BF_fb_props_optional:int = None
    BF_refuse_parasite:int = None
    BF_refuse_window:int = None
    BF_require_callback_window:int = None
    BF_require_parasite:int = None
    BF_require_window:int = None
    BF_resizeable:int = None
    BF_rtt_cumulative:int = None
    BF_size_power_2:int = None
    BF_size_square:int = None
    BF_size_track_host:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    OTBuffer:int = None
    OTFullscreenWindow:int = None
    OTTextureBuffer:int = None
    OTWindow:int = None
    OT_buffer:int = None
    OT_fullscreen_window:int = None
    OT_texture_buffer:int = None
    OT_window:int = None
    display_height = None
    display_information = None
    display_width = None
    display_zoom = None
    def getClassType(): ...
    def getDisplayHeight(self, /): ...
    def getDisplayInformation(self, /): ...
    def getDisplayWidth(self, /): ...
    def getDisplayZoom(self, /): ...
    def getInterfaceName(self, /): ...
    def getRefCount(self, /): ...
    def getSupportedTypes(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_display_height(self, /): ...
    def get_display_information(self, /): ...
    def get_display_width(self, /): ...
    def get_display_zoom(self, /): ...
    def get_interface_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_supported_types(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    interface_name = None
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    def lookupCpuData(self, /): ...
    def lookup_cpu_data(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def supportsType(self, object, /): ...
    def supports_type(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class GraphicsPipeSelection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getGlobalPtr(): ...
    def getNumAuxModules(self, /): ...
    def getNumPipeTypes(self, /): ...
    def getPipeType(self, object, /): ...
    def getPipeTypes(self, /): ...
    def get_global_ptr(): ...
    def get_num_aux_modules(self, /): ...
    def get_num_pipe_types(self, /): ...
    def get_pipe_type(self, object, /): ...
    def get_pipe_types(self, /): ...
    def loadAuxModules(self, /): ...
    def load_aux_modules(self, /): ...
    def makeDefaultPipe(self, /): ...
    def makeModulePipe(self, object, /): ...
    def makePipe(): ...
    def make_default_pipe(self, /): ...
    def make_module_pipe(self, object, /): ...
    def make_pipe(): ...
    pipe_types = None
    def printPipeTypes(self, /): ...
    def print_pipe_types(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GraphicsStateGuardian:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SM00:int = None
    SM11:int = None
    SM20:int = None
    SM2X:int = None
    SM30:int = None
    SM40:int = None
    SM50:int = None
    SM51:int = None
    SM_00:int = None
    SM_11:int = None
    SM_20:int = None
    SM_2X:int = None
    SM_30:int = None
    SM_40:int = None
    SM_50:int = None
    SM_51:int = None
    active = None
    def beginScene(self, /): ...
    def begin_scene(self, /): ...
    def clearFlashTexture(self, /): ...
    def clear_flash_texture(self, /): ...
    coordinate_system = None
    copy_texture_inverted = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    driver_renderer = None
    driver_shader_version_major = None
    driver_shader_version_minor = None
    driver_vendor = None
    driver_version = None
    driver_version_major = None
    driver_version_minor = None
    effective_incomplete_render = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def endScene(self, /): ...
    def end_scene(self, /): ...
    def fillin(): ...
    flash_texture = None
    gamma = None
    def getAlphaScaleTextureStage(): ...
    def getAlphaScaleViaTexture(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getColorScaleViaLighting(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getCopyTextureInverted(self, /): ...
    def getDefaultGsg(): ...
    def getDriverRenderer(self, /): ...
    def getDriverShaderVersionMajor(self, /): ...
    def getDriverShaderVersionMinor(self, /): ...
    def getDriverVendor(self, /): ...
    def getDriverVersion(self, /): ...
    def getDriverVersionMajor(self, /): ...
    def getDriverVersionMinor(self, /): ...
    def getEffectiveIncompleteRender(self, /): ...
    def getEngine(self, /): ...
    def getFlashTexture(self, /): ...
    def getGamma(self, /): ...
    def getGsg(object, /): ...
    def getGsgs(): ...
    def getIncompleteRender(self, /): ...
    def getInternalCoordinateSystem(self, /): ...
    def getLoader(self, /): ...
    def getMax2dTextureArrayLayers(self, /): ...
    def getMax3dTextureDimension(self, /): ...
    def getMaxBufferTextureSize(self, /): ...
    def getMaxClipPlanes(self, /): ...
    def getMaxColorTargets(self, /): ...
    def getMaxCubeMapDimension(self, /): ...
    def getMaxLights(self, /): ...
    def getMaxTextureDimension(self, /): ...
    def getMaxTextureStages(self, /): ...
    def getMaxVertexTransformIndices(self, /): ...
    def getMaxVertexTransforms(self, /): ...
    def getMaxVerticesPerArray(self, /): ...
    def getMaxVerticesPerPrimitive(self, /): ...
    def getMaximumSimultaneousRenderTargets(self, /): ...
    def getNumGsgs(): ...
    def getPipe(self, /): ...
    def getPreparedObjects(self, /): ...
    def getPreparedTextures(self, /): ...
    def getRefCount(self, /): ...
    def getRuntimeColorScale(self, /): ...
    def getScene(self, /): ...
    def getShaderGenerator(self, /): ...
    def getShaderModel(self, /): ...
    def getSupportedGeomRendering(self, /): ...
    def getSupports2dTextureArray(self, /): ...
    def getSupports3dTexture(self, /): ...
    def getSupportsBasicShaders(self, /): ...
    def getSupportsBufferTexture(self, /): ...
    def getSupportsCgProfile(self, object, /): ...
    def getSupportsCompressedTexture(self, /): ...
    def getSupportsCompressedTextureFormat(self, object, /): ...
    def getSupportsComputeShaders(self, /): ...
    def getSupportsCubeMap(self, /): ...
    def getSupportsCubeMapArray(self, /): ...
    def getSupportsDepthStencil(self, /): ...
    def getSupportsDepthTexture(self, /): ...
    def getSupportsDualSourceBlending(self, /): ...
    def getSupportsGenerateMipmap(self, /): ...
    def getSupportsGeometryInstancing(self, /): ...
    def getSupportsGeometryShaders(self, /): ...
    def getSupportsGlsl(self, /): ...
    def getSupportsHlsl(self, /): ...
    def getSupportsIndirectDraw(self, /): ...
    def getSupportsLuminanceTexture(self, /): ...
    def getSupportsMultisample(self, /): ...
    def getSupportsOcclusionQuery(self, /): ...
    def getSupportsSamplerObjects(self, /): ...
    def getSupportsShadowFilter(self, /): ...
    def getSupportsStencil(self, /): ...
    def getSupportsTessellationShaders(self, /): ...
    def getSupportsTexNonPow2(self, /): ...
    def getSupportsTextureCombine(self, /): ...
    def getSupportsTextureDot3(self, /): ...
    def getSupportsTextureSavedResult(self, /): ...
    def getSupportsTextureSrgb(self, /): ...
    def getSupportsTimerQuery(self, /): ...
    def getSupportsTwoSidedStencil(self, /): ...
    def getTextureQualityOverride(self, /): ...
    def getThreadingModel(self, /): ...
    def getTimerQueriesActive(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_alpha_scale_texture_stage(): ...
    def get_alpha_scale_via_texture(): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_color_scale_via_lighting(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_copy_texture_inverted(self, /): ...
    def get_default_gsg(): ...
    def get_driver_renderer(self, /): ...
    def get_driver_shader_version_major(self, /): ...
    def get_driver_shader_version_minor(self, /): ...
    def get_driver_vendor(self, /): ...
    def get_driver_version(self, /): ...
    def get_driver_version_major(self, /): ...
    def get_driver_version_minor(self, /): ...
    def get_effective_incomplete_render(self, /): ...
    def get_engine(self, /): ...
    def get_flash_texture(self, /): ...
    def get_gamma(self, /): ...
    def get_gsg(object, /): ...
    def get_gsgs(): ...
    def get_incomplete_render(self, /): ...
    def get_internal_coordinate_system(self, /): ...
    def get_loader(self, /): ...
    def get_max_2d_texture_array_layers(self, /): ...
    def get_max_3d_texture_dimension(self, /): ...
    def get_max_buffer_texture_size(self, /): ...
    def get_max_clip_planes(self, /): ...
    def get_max_color_targets(self, /): ...
    def get_max_cube_map_dimension(self, /): ...
    def get_max_lights(self, /): ...
    def get_max_texture_dimension(self, /): ...
    def get_max_texture_stages(self, /): ...
    def get_max_vertex_transform_indices(self, /): ...
    def get_max_vertex_transforms(self, /): ...
    def get_max_vertices_per_array(self, /): ...
    def get_max_vertices_per_primitive(self, /): ...
    def get_maximum_simultaneous_render_targets(self, /): ...
    def get_num_gsgs(): ...
    def get_pipe(self, /): ...
    def get_prepared_objects(self, /): ...
    def get_prepared_textures(self, /): ...
    def get_ref_count(self, /): ...
    def get_runtime_color_scale(self, /): ...
    def get_scene(self, /): ...
    def get_shader_generator(self, /): ...
    def get_shader_model(self, /): ...
    def get_supported_geom_rendering(self, /): ...
    def get_supports_2d_texture_array(self, /): ...
    def get_supports_3d_texture(self, /): ...
    def get_supports_basic_shaders(self, /): ...
    def get_supports_buffer_texture(self, /): ...
    def get_supports_cg_profile(self, object, /): ...
    def get_supports_compressed_texture(self, /): ...
    def get_supports_compressed_texture_format(self, object, /): ...
    def get_supports_compute_shaders(self, /): ...
    def get_supports_cube_map(self, /): ...
    def get_supports_cube_map_array(self, /): ...
    def get_supports_depth_stencil(self, /): ...
    def get_supports_depth_texture(self, /): ...
    def get_supports_dual_source_blending(self, /): ...
    def get_supports_generate_mipmap(self, /): ...
    def get_supports_geometry_instancing(self, /): ...
    def get_supports_geometry_shaders(self, /): ...
    def get_supports_glsl(self, /): ...
    def get_supports_hlsl(self, /): ...
    def get_supports_indirect_draw(self, /): ...
    def get_supports_luminance_texture(self, /): ...
    def get_supports_multisample(self, /): ...
    def get_supports_occlusion_query(self, /): ...
    def get_supports_sampler_objects(self, /): ...
    def get_supports_shadow_filter(self, /): ...
    def get_supports_stencil(self, /): ...
    def get_supports_tessellation_shaders(self, /): ...
    def get_supports_tex_non_pow2(self, /): ...
    def get_supports_texture_combine(self, /): ...
    def get_supports_texture_dot3(self, /): ...
    def get_supports_texture_saved_result(self, /): ...
    def get_supports_texture_srgb(self, /): ...
    def get_supports_timer_query(self, /): ...
    def get_supports_two_sided_stencil(self, /): ...
    def get_texture_quality_override(self, /): ...
    def get_threading_model(self, /): ...
    def get_timer_queries_active(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasExtension(self, object, /): ...
    def has_extension(self, object, /): ...
    incomplete_render = None
    def isActive(self, /): ...
    def isExactType(self, object, /): ...
    def isHardware(self, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_hardware(self, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    loader = None
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    max_2d_texture_array_layers = None
    max_3d_texture_dimension = None
    max_buffer_texture_size = None
    max_clip_planes = None
    max_color_targets = None
    max_cube_map_dimension = None
    max_lights = None
    max_texture_dimension = None
    max_texture_stages = None
    max_vertex_transform_indices = None
    max_vertex_transforms = None
    max_vertices_per_array = None
    max_vertices_per_primitive = None
    def needsReset(self, /): ...
    def needs_reset(self, /): ...
    pipe = None
    def prefersTriangleStrips(self, /): ...
    def prefers_triangle_strips(self, /): ...
    prepared_objects = None
    def ref(self, /): ...
    ref_count = None
    def releaseAll(self, /): ...
    def releaseAllGeoms(self, /): ...
    def releaseAllIndexBuffers(self, /): ...
    def releaseAllSamplers(self, /): ...
    def releaseAllShaderBuffers(self, /): ...
    def releaseAllTextures(self, /): ...
    def releaseAllVertexBuffers(self, /): ...
    def release_all(self, /): ...
    def release_all_geoms(self, /): ...
    def release_all_index_buffers(self, /): ...
    def release_all_samplers(self, /): ...
    def release_all_shader_buffers(self, /): ...
    def release_all_textures(self, /): ...
    def release_all_vertex_buffers(self, /): ...
    def restoreGamma(self, /): ...
    def restore_gamma(self, /): ...
    scene = None
    def setActive(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setDefaultGsg(object, /): ...
    def setFlashTexture(self, object, /): ...
    def setGamma(self, object, /): ...
    def setIncompleteRender(self, object, /): ...
    def setLoader(self, object, /): ...
    def setScene(self, object, /): ...
    def setShaderGenerator(self, object, /): ...
    def setShaderModel(self, object, /): ...
    def setTextureQualityOverride(self, object, /): ...
    def set_active(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_default_gsg(object, /): ...
    def set_flash_texture(self, object, /): ...
    def set_gamma(self, object, /): ...
    def set_incomplete_render(self, object, /): ...
    def set_loader(self, object, /): ...
    def set_scene(self, object, /): ...
    def set_shader_generator(self, object, /): ...
    def set_shader_model(self, object, /): ...
    def set_texture_quality_override(self, object, /): ...
    shader_generator = None
    shader_model = None
    supports_2d_texture_array = None
    supports_3d_texture = None
    supports_basic_shaders = None
    supports_buffer_texture = None
    supports_compressed_texture = None
    supports_compute_shaders = None
    supports_cube_map = None
    supports_cube_map_array = None
    supports_depth_stencil = None
    supports_depth_texture = None
    supports_dual_source_blending = None
    supports_generate_mipmap = None
    supports_geometry_instancing = None
    supports_geometry_shaders = None
    supports_glsl = None
    supports_hlsl = None
    supports_indirect_draw = None
    supports_luminance_texture = None
    supports_multisample = None
    supports_occlusion_query = None
    supports_sampler_objects = None
    supports_shadow_filter = None
    supports_stencil = None
    supports_tessellation_shaders = None
    supports_tex_non_pow2 = None
    supports_texture_combine = None
    supports_texture_dot3 = None
    supports_texture_saved_result = None
    supports_texture_srgb = None
    supports_timer_query = None
    supports_two_sided_stencil = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture_quality_override = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    timer_queries_active = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    valid = None
class GraphicsStateGuardianBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getDefaultGsg(): ...
    def getEffectiveIncompleteRender(self, /): ...
    def getGsg(object, /): ...
    def getGsgs(): ...
    def getIncompleteRender(self, /): ...
    def getMaxTextureDimension(self, /): ...
    def getMaxVerticesPerArray(self, /): ...
    def getMaxVerticesPerPrimitive(self, /): ...
    def getNumGsgs(): ...
    def getRefCount(self, /): ...
    def getSupportedGeomRendering(self, /): ...
    def getSupportsCompressedTextureFormat(self, object, /): ...
    def getSupportsHlsl(self, /): ...
    def getSupportsMultisample(self, /): ...
    def getSupportsShadowFilter(self, /): ...
    def getSupportsTextureSrgb(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_default_gsg(): ...
    def get_effective_incomplete_render(self, /): ...
    def get_gsg(object, /): ...
    def get_gsgs(): ...
    def get_incomplete_render(self, /): ...
    def get_max_texture_dimension(self, /): ...
    def get_max_vertices_per_array(self, /): ...
    def get_max_vertices_per_primitive(self, /): ...
    def get_num_gsgs(): ...
    def get_ref_count(self, /): ...
    def get_supported_geom_rendering(self, /): ...
    def get_supports_compressed_texture_format(self, object, /): ...
    def get_supports_hlsl(self, /): ...
    def get_supports_multisample(self, /): ...
    def get_supports_shadow_filter(self, /): ...
    def get_supports_texture_srgb(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def prefersTriangleStrips(self, /): ...
    def prefers_triangle_strips(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setDefaultGsg(object, /): ...
    def set_default_gsg(object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class GraphicsThreadingModel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getCullName(self, /): ...
    def getCullSorting(self, /): ...
    def getCullStage(self, /): ...
    def getDrawName(self, /): ...
    def getDrawStage(self, /): ...
    def getModel(self, /): ...
    def get_cull_name(self, /): ...
    def get_cull_sorting(self, /): ...
    def get_cull_stage(self, /): ...
    def get_draw_name(self, /): ...
    def get_draw_stage(self, /): ...
    def get_model(self, /): ...
    def isDefault(self, /): ...
    def isSingleThreaded(self, /): ...
    def is_default(self, /): ...
    def is_single_threaded(self, /): ...
    def output(self, object, /): ...
    def setCullName(self, object, /): ...
    def setCullSorting(self, object, /): ...
    def setDrawName(self, object, /): ...
    def set_cull_name(self, object, /): ...
    def set_cull_sorting(self, object, /): ...
    def set_draw_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class GraphicsWindow:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FMParasite:int = None
    FMRefresh:int = None
    FMRender:int = None
    FM_parasite:int = None
    FM_refresh:int = None
    FM_render:int = None
    RTMBindLayered:int = None
    RTMBindOrCopy:int = None
    RTMCopyRam:int = None
    RTMCopyTexture:int = None
    RTMNone:int = None
    RTMTriggeredCopyRam:int = None
    RTMTriggeredCopyTexture:int = None
    RTM_bind_layered:int = None
    RTM_bind_or_copy:int = None
    RTM_copy_ram:int = None
    RTM_copy_texture:int = None
    RTM_none:int = None
    RTM_triggered_copy_ram:int = None
    RTM_triggered_copy_texture:int = None
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    active_display_regions = None
    def addRenderTexture(): ...
    def add_render_texture(): ...
    child_sort = None
    def clearChildSort(self, /): ...
    def clearDeleteFlag(self, /): ...
    def clearRejectedProperties(self, /): ...
    def clearRenderTextures(self, /): ...
    def clear_child_sort(self, /): ...
    clear_color = None
    def clear_delete_flag(self, /): ...
    clear_depth = None
    def clear_rejected_properties(self, /): ...
    def clear_render_textures(self, /): ...
    clear_stencil = None
    def closeIme(self, /): ...
    def close_ime(self, /): ...
    close_request_event = None
    closed = None
    def countTextures(self, /): ...
    def count_textures(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disableClears(self, /): ...
    def disablePointerEvents(self, object, /): ...
    def disable_clears(self, /): ...
    def disable_pointer_events(self, object, /): ...
    display_regions = None
    def enablePointerEvents(self, object, /): ...
    def enable_pointer_events(self, object, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    engine = None
    fb_size = None
    def fillin(): ...
    def flipReady(self, /): ...
    def flip_ready(self, /): ...
    def getActiveDisplayRegion(self, object, /): ...
    def getActiveDisplayRegions(self, /): ...
    def getBamModified(self, /): ...
    def getChildSort(self, /): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getCloseRequestEvent(self, /): ...
    def getDeleteFlag(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getEngine(self, /): ...
    def getFbProperties(self, /): ...
    def getFbSize(self, /): ...
    def getFbXSize(self, /): ...
    def getFbYSize(self, /): ...
    def getGsg(self, /): ...
    def getHost(self, /): ...
    def getInputDevice(self, object, /): ...
    def getInputDeviceName(self, object, /): ...
    def getInputDeviceNames(self, /): ...
    def getInputDevices(self, /): ...
    def getInverted(self, /): ...
    def getKeyboardMap(self, /): ...
    def getLeftEyeColorMask(self, /): ...
    def getName(self, /): ...
    def getNumActiveDisplayRegions(self, /): ...
    def getNumDisplayRegions(self, /): ...
    def getNumInputDevices(self, /): ...
    def getOneShot(self, /): ...
    def getOverlayDisplayRegion(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getPointer(self, object, /): ...
    def getProperties(self, /): ...
    def getRedBlueStereo(self, /): ...
    def getRefCount(self, /): ...
    def getRejectedProperties(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRequestedProperties(self, /): ...
    def getRightEyeColorMask(self, /): ...
    def getRtmMode(): ...
    def getSbsLeftDimensions(self, /): ...
    def getSbsLeftSize(self, /): ...
    def getSbsLeftXSize(self, /): ...
    def getSbsLeftYSize(self, /): ...
    def getSbsRightDimensions(self, /): ...
    def getSbsRightSize(self, /): ...
    def getSbsRightXSize(self, /): ...
    def getSbsRightYSize(self, /): ...
    def getScreenshot(): ...
    def getSideBySideStereo(self, /): ...
    def getSize(self, /): ...
    def getSort(self, /): ...
    def getSupportsRenderTexture(self, /): ...
    def getSwapEyes(self, /): ...
    def getTexture(): ...
    def getTextureCard(self, /): ...
    def getTexturePlane(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexposedDraw(self, /): ...
    def getWindowEvent(self, /): ...
    def getWindowHandle(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_active_display_region(self, object, /): ...
    def get_active_display_regions(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child_sort(self, /): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_close_request_event(self, /): ...
    def get_delete_flag(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_engine(self, /): ...
    def get_fb_properties(self, /): ...
    def get_fb_size(self, /): ...
    def get_fb_x_size(self, /): ...
    def get_fb_y_size(self, /): ...
    def get_gsg(self, /): ...
    def get_host(self, /): ...
    def get_input_device(self, object, /): ...
    def get_input_device_name(self, object, /): ...
    def get_input_device_names(self, /): ...
    def get_input_devices(self, /): ...
    def get_inverted(self, /): ...
    def get_keyboard_map(self, /): ...
    def get_left_eye_color_mask(self, /): ...
    def get_name(self, /): ...
    def get_num_active_display_regions(self, /): ...
    def get_num_display_regions(self, /): ...
    def get_num_input_devices(self, /): ...
    def get_one_shot(self, /): ...
    def get_overlay_display_region(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_pointer(self, object, /): ...
    def get_properties(self, /): ...
    def get_red_blue_stereo(self, /): ...
    def get_ref_count(self, /): ...
    def get_rejected_properties(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_requested_properties(self, /): ...
    def get_right_eye_color_mask(self, /): ...
    def get_rtm_mode(): ...
    def get_sbs_left_dimensions(self, /): ...
    def get_sbs_left_size(self, /): ...
    def get_sbs_left_x_size(self, /): ...
    def get_sbs_left_y_size(self, /): ...
    def get_sbs_right_dimensions(self, /): ...
    def get_sbs_right_size(self, /): ...
    def get_sbs_right_x_size(self, /): ...
    def get_sbs_right_y_size(self, /): ...
    def get_screenshot(): ...
    def get_side_by_side_stereo(self, /): ...
    def get_size(self, /): ...
    def get_sort(self, /): ...
    def get_supports_render_texture(self, /): ...
    def get_swap_eyes(self, /): ...
    def get_texture(): ...
    def get_texture_card(self, /): ...
    def get_texture_plane(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexposed_draw(self, /): ...
    def get_window_event(self, /): ...
    def get_window_handle(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    gsg = None
    def hasKeyboard(self, object, /): ...
    def hasPointer(self, object, /): ...
    def hasSize(self, /): ...
    def hasTexture(self, /): ...
    def has_keyboard(self, object, /): ...
    def has_pointer(self, object, /): ...
    def has_size(self, /): ...
    def has_texture(self, /): ...
    inverted = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isClosed(self, /): ...
    def isExactType(self, object, /): ...
    def isFullscreen(self, /): ...
    def isNonzeroSize(self, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_closed(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_fullscreen(self, /): ...
    def is_nonzero_size(self, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    def is_valid(self, /): ...
    def makeCubeMap(): ...
    def makeDisplayRegion(): ...
    def makeMonoDisplayRegion(): ...
    def makeScreenshotFilename(): ...
    def makeStereoDisplayRegion(): ...
    def makeTextureBuffer(): ...
    def make_cube_map(): ...
    def make_display_region(): ...
    def make_mono_display_region(): ...
    def make_screenshot_filename(): ...
    def make_stereo_display_region(): ...
    def make_texture_buffer(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def movePointer(): ...
    def move_pointer(): ...
    name = None
    one_shot = None
    pipe = None
    pixel_factor = None
    pixel_zoom = None
    properties = None
    def ref(self, /): ...
    ref_count = None
    rejected_properties = None
    def removeAllDisplayRegions(self, /): ...
    def removeDisplayRegion(self, object, /): ...
    def remove_all_display_regions(self, /): ...
    def remove_display_region(self, object, /): ...
    def requestProperties(self, object, /): ...
    def request_properties(self, object, /): ...
    requested_properties = None
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    sbs_left_size = None
    sbs_right_size = None
    def setActive(self, object, /): ...
    def setChildSort(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setCloseRequestEvent(self, object, /): ...
    def setInverted(self, object, /): ...
    def setOneShot(self, object, /): ...
    def setOverlayDisplayRegion(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setRedBlueStereo(): ...
    def setSideBySideStereo(): ...
    def setSort(self, object, /): ...
    def setSwapEyes(self, object, /): ...
    def setUnexposedDraw(self, object, /): ...
    def setWindowEvent(self, object, /): ...
    def set_active(self, object, /): ...
    def set_child_sort(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_close_request_event(self, object, /): ...
    def set_inverted(self, object, /): ...
    def set_one_shot(self, object, /): ...
    def set_overlay_display_region(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_red_blue_stereo(): ...
    def set_side_by_side_stereo(): ...
    def set_sort(self, object, /): ...
    def set_swap_eyes(self, object, /): ...
    def set_unexposed_draw(self, object, /): ...
    def set_window_event(self, object, /): ...
    def setupRenderTexture(): ...
    def setup_render_texture(): ...
    def shareDepthBuffer(self, object, /): ...
    def share_depth_buffer(self, object, /): ...
    size = None
    sort = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    supports_render_texture = None
    swap_eyes = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triggerCopy(self, /): ...
    def trigger_copy(self, /): ...
    type = None
    unexposed_draw = None
    def unref(self, /): ...
    def unshareDepthBuffer(self, /): ...
    def unshare_depth_buffer(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToGraphicsOutputBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_GraphicsOutputBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    window_event = None
    window_handle = None
class GraphicsWindowInputDevice:
    ...
    class Axis:
        ...
        accelerator = None
        brake = None
        left_trigger = None
        left_x = None
        left_y = None
        none = None
        pitch = None
        pressure = None
        right_trigger = None
        right_x = None
        right_y = None
        roll = None
        rudder = None
        throttle = None
        wheel = None
        x = None
        y = None
        yaw = None
        z = None
    class AxisState:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        axis = None
        known = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        value = None
    class BatteryData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        level = None
        max_level = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class ButtonState:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        handle = None
        known = None
        pressed = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class DeviceClass:
        ...
        dance_pad = None
        digitizer = None
        flight_stick = None
        gamepad = None
        hmd = None
        keyboard = None
        mouse = None
        spatial_mouse = None
        steering_wheel = None
        touch = None
        unknown = None
        virtual_device = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Feature:
        ...
        battery = None
        keyboard = None
        pointer = None
        tracker = None
        vibration = None
    SDown:int = None
    SUnknown:int = None
    SUp:int = None
    S_down:int = None
    S_unknown:int = None
    S_up:int = None
    _battery_data = None
    _pointer_data = None
    _tracker_data = None
    axes = None
    battery = None
    def buttonDown(): ...
    def buttonResumeDown(): ...
    def buttonUp(): ...
    def button_down(): ...
    def button_resume_down(): ...
    def button_up(): ...
    buttons = None
    def candidate(): ...
    connected = None
    device_class = None
    def disablePointerEvents(self, /): ...
    def disable_pointer_events(self, /): ...
    def enablePointerEvents(self, /): ...
    def enable_pointer_events(self, /): ...
    def findAxis(self, object, /): ...
    def findButton(self, object, /): ...
    def find_axis(self, object, /): ...
    def find_button(self, object, /): ...
    def focusLost(): ...
    def focus_lost(): ...
    def getButtonEvents(self, /): ...
    def getClassType(): ...
    def getPointer(self, /): ...
    def getPointerEvents(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_button_events(self, /): ...
    def get_class_type(): ...
    def get_pointer(self, /): ...
    def get_pointer_events(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasButtonEvent(self, /): ...
    def hasFeature(self, object, /): ...
    def hasPointerEvent(self, /): ...
    def has_button_event(self, /): ...
    def has_feature(self, object, /): ...
    def has_pointer_event(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def keystroke(): ...
    manufacturer = None
    def mapAxis(): ...
    def mapButton(): ...
    def map_axis(): ...
    def map_button(): ...
    name = None
    def output(self, object, /): ...
    def pointerMoved(): ...
    def pointer_moved(): ...
    def poll(self, /): ...
    product_id = None
    def rawButtonDown(): ...
    def rawButtonUp(): ...
    def raw_button_down(): ...
    def raw_button_up(): ...
    def ref(self, /): ...
    ref_count = None
    def removePointer(self, object, /): ...
    def remove_pointer(self, object, /): ...
    serial_number = None
    def setPointerInWindow(): ...
    def setPointerOutOfWindow(): ...
    def setVibration(): ...
    def set_pointer_in_window(): ...
    def set_pointer_out_of_window(): ...
    def set_vibration(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    tracker = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def updatePointer(): ...
    def update_pointer(): ...
    vendor_id = None
class GraphicsWindowProcCallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getNumTouches(self, /): ...
    def getTouchInfo(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_num_touches(self, /): ...
    def get_touch_info(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isTouchEvent(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_touch_event(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
HCCUT:int = None
HCFREE:int = None
HCG1:int = None
HCSMOOTH:int = None
HC_CUT:int = None
HC_FREE:int = None
HC_G1:int = None
HC_SMOOTH:int = None
class HTTPChannel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SCDownloadInvalidRange:int = None
    SCDownloadOpenError:int = None
    SCDownloadWriteError:int = None
    SCHttpErrorWatermark:int = None
    SCIncomplete:int = None
    SCInternalError:int = None
    SCInvalidHttp:int = None
    SCLostConnection:int = None
    SCNoConnection:int = None
    SCNonHttpResponse:int = None
    SCSocksInvalidVersion:int = None
    SCSocksNoAcceptableLoginMethod:int = None
    SCSocksNoConnection:int = None
    SCSocksRefused:int = None
    SCSslInternalFailure:int = None
    SCSslInvalidServerCertificate:int = None
    SCSslNoHandshake:int = None
    SCSslSelfSignedServerCertificate:int = None
    SCSslUnexpectedServer:int = None
    SCTimeout:int = None
    SC_download_invalid_range:int = None
    SC_download_open_error:int = None
    SC_download_write_error:int = None
    SC_http_error_watermark:int = None
    SC_incomplete:int = None
    SC_internal_error:int = None
    SC_invalid_http:int = None
    SC_lost_connection:int = None
    SC_no_connection:int = None
    SC_non_http_response:int = None
    SC_socks_invalid_version:int = None
    SC_socks_no_acceptable_login_method:int = None
    SC_socks_no_connection:int = None
    SC_socks_refused:int = None
    SC_ssl_internal_failure:int = None
    SC_ssl_invalid_server_certificate:int = None
    SC_ssl_no_handshake:int = None
    SC_ssl_self_signed_server_certificate:int = None
    SC_ssl_unexpected_server:int = None
    SC_timeout:int = None
    def beginConnectTo(self, object, /): ...
    def beginGetDocument(self, object, /): ...
    def beginGetHeader(self, object, /): ...
    def beginGetSubdocument(): ...
    def beginPostForm(): ...
    def begin_connect_to(self, object, /): ...
    def begin_get_document(self, object, /): ...
    def begin_get_header(self, object, /): ...
    def begin_get_subdocument(): ...
    def begin_post_form(): ...
    def clearExtraHeaders(self, /): ...
    def clear_extra_headers(self, /): ...
    def closeReadBody(self, object, /): ...
    def close_read_body(self, object, /): ...
    def connectTo(self, object, /): ...
    def connect_to(self, object, /): ...
    def deleteDocument(self, object, /): ...
    def delete_document(self, object, /): ...
    def downloadToFile(): ...
    def downloadToRam(): ...
    def downloadToStream(): ...
    def download_to_file(): ...
    def download_to_ram(): ...
    def download_to_stream(): ...
    def getAllowProxy(self, /): ...
    def getBlockingConnect(self, /): ...
    def getBytesDownloaded(self, /): ...
    def getBytesRequested(self, /): ...
    def getClassType(): ...
    def getClient(self, /): ...
    def getConnectTimeout(self, /): ...
    def getConnection(self, /): ...
    def getContentType(self, /): ...
    def getDocument(self, object, /): ...
    def getDocumentSpec(self, /): ...
    def getDownloadThrottle(self, /): ...
    def getFileSize(self, /): ...
    def getFirstByteDelivered(self, /): ...
    def getFirstByteRequested(self, /): ...
    def getHeader(self, object, /): ...
    def getHeaderValue(self, object, /): ...
    def getHttpTimeout(self, /): ...
    def getHttpVersion(self, /): ...
    def getHttpVersionString(self, /): ...
    def getIdleTimeout(self, /): ...
    def getLastByteDelivered(self, /): ...
    def getLastByteRequested(self, /): ...
    def getMaxBytesPerSecond(self, /): ...
    def getMaxUpdatesPerSecond(self, /): ...
    def getNumRedirectSteps(self, /): ...
    def getOptions(self, object, /): ...
    def getPersistentConnection(self, /): ...
    def getProxyRealm(self, /): ...
    def getProxyTunnel(self, /): ...
    def getRedirect(self, /): ...
    def getRedirectStep(self, object, /): ...
    def getRedirectSteps(self, /): ...
    def getRefCount(self, /): ...
    def getSkipBodySize(self, /): ...
    def getStatusCode(self, /): ...
    def getStatusString(self, /): ...
    def getSubdocument(): ...
    def getTrace(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUrl(self, /): ...
    def getWwwRealm(self, /): ...
    def get_allow_proxy(self, /): ...
    def get_blocking_connect(self, /): ...
    def get_bytes_downloaded(self, /): ...
    def get_bytes_requested(self, /): ...
    def get_class_type(): ...
    def get_client(self, /): ...
    def get_connect_timeout(self, /): ...
    def get_connection(self, /): ...
    def get_content_type(self, /): ...
    def get_document(self, object, /): ...
    def get_document_spec(self, /): ...
    def get_download_throttle(self, /): ...
    def get_file_size(self, /): ...
    def get_first_byte_delivered(self, /): ...
    def get_first_byte_requested(self, /): ...
    def get_header(self, object, /): ...
    def get_header_value(self, object, /): ...
    def get_http_timeout(self, /): ...
    def get_http_version(self, /): ...
    def get_http_version_string(self, /): ...
    def get_idle_timeout(self, /): ...
    def get_last_byte_delivered(self, /): ...
    def get_last_byte_requested(self, /): ...
    def get_max_bytes_per_second(self, /): ...
    def get_max_updates_per_second(self, /): ...
    def get_num_redirect_steps(self, /): ...
    def get_options(self, object, /): ...
    def get_persistent_connection(self, /): ...
    def get_proxy_realm(self, /): ...
    def get_proxy_tunnel(self, /): ...
    def get_redirect(self, /): ...
    def get_redirect_step(self, object, /): ...
    def get_redirect_steps(self, /): ...
    def get_ref_count(self, /): ...
    def get_skip_body_size(self, /): ...
    def get_status_code(self, /): ...
    def get_status_string(self, /): ...
    def get_subdocument(): ...
    def get_trace(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_url(self, /): ...
    def get_www_realm(self, /): ...
    def isConnectionReady(self, /): ...
    def isDownloadComplete(self, /): ...
    def isExactType(self, object, /): ...
    def isFileSizeKnown(self, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_connection_ready(self, /): ...
    def is_download_complete(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_file_size_known(self, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    def openReadBody(self, /): ...
    def open_read_body(self, /): ...
    def postForm(): ...
    def post_form(): ...
    def preserveStatus(self, /): ...
    def preserve_status(self, /): ...
    def putDocument(): ...
    def put_document(): ...
    def ref(self, /): ...
    ref_count = None
    def reset(self, /): ...
    def run(self, /): ...
    def sendExtraHeader(): ...
    def send_extra_header(): ...
    def setAllowProxy(self, object, /): ...
    def setBlockingConnect(self, object, /): ...
    def setConnectTimeout(self, object, /): ...
    def setContentType(self, object, /): ...
    def setDownloadThrottle(self, object, /): ...
    def setExpectedFileSize(self, object, /): ...
    def setHttpTimeout(self, object, /): ...
    def setIdleTimeout(self, object, /): ...
    def setMaxBytesPerSecond(self, object, /): ...
    def setMaxUpdatesPerSecond(self, object, /): ...
    def setPersistentConnection(self, object, /): ...
    def setProxyTunnel(self, object, /): ...
    def setSkipBodySize(self, object, /): ...
    def set_allow_proxy(self, object, /): ...
    def set_blocking_connect(self, object, /): ...
    def set_connect_timeout(self, object, /): ...
    def set_content_type(self, object, /): ...
    def set_download_throttle(self, object, /): ...
    def set_expected_file_size(self, object, /): ...
    def set_http_timeout(self, object, /): ...
    def set_idle_timeout(self, object, /): ...
    def set_max_bytes_per_second(self, object, /): ...
    def set_max_updates_per_second(self, object, /): ...
    def set_persistent_connection(self, object, /): ...
    def set_proxy_tunnel(self, object, /): ...
    def set_skip_body_size(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def willCloseConnection(self, /): ...
    def will_close_connection(self, /): ...
    def writeHeaders(self, object, /): ...
    def write_headers(self, object, /): ...
class HTTPClient:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    VSNoDateCheck:int = None
    VSNoVerify:int = None
    VSNormal:int = None
    VS_no_date_check:int = None
    VS_no_verify:int = None
    VS_normal:int = None
    def addDirectHost(self, object, /): ...
    def addPreapprovedServerCertificateFilename(): ...
    def addPreapprovedServerCertificateName(): ...
    def addPreapprovedServerCertificatePem(): ...
    def addProxy(): ...
    def add_direct_host(self, object, /): ...
    def add_preapproved_server_certificate_filename(): ...
    def add_preapproved_server_certificate_name(): ...
    def add_preapproved_server_certificate_pem(): ...
    def add_proxy(): ...
    def assign(self, object, /): ...
    def base64Decode(object, /): ...
    def base64Encode(object, /): ...
    def base64_decode(object, /): ...
    def base64_encode(object, /): ...
    def clearAllCookies(self, /): ...
    def clearAllPreapprovedServerCertificates(self, /): ...
    def clearCookie(self, object, /): ...
    def clearDirectHost(self, /): ...
    def clearPreapprovedServerCertificates(self, object, /): ...
    def clearProxy(self, /): ...
    def clear_all_cookies(self, /): ...
    def clear_all_preapproved_server_certificates(self, /): ...
    def clear_cookie(self, object, /): ...
    def clear_direct_host(self, /): ...
    def clear_preapproved_server_certificates(self, object, /): ...
    def clear_proxy(self, /): ...
    def copyCookiesFrom(self, object, /): ...
    def copy_cookies_from(self, object, /): ...
    def getCipherList(self, /): ...
    def getClassType(): ...
    def getCookie(self, object, /): ...
    def getDirectHostSpec(self, /): ...
    def getDocument(self, object, /): ...
    def getGlobalPtr(): ...
    def getHeader(self, object, /): ...
    def getHttpVersion(self, /): ...
    def getHttpVersionString(self, /): ...
    def getProxiesForUrl(self, object, /): ...
    def getProxySpec(self, /): ...
    def getRefCount(self, /): ...
    def getTryAllDirect(self, /): ...
    def getUsername(): ...
    def getVerifySsl(self, /): ...
    def get_cipher_list(self, /): ...
    def get_class_type(): ...
    def get_cookie(self, object, /): ...
    def get_direct_host_spec(self, /): ...
    def get_document(self, object, /): ...
    def get_global_ptr(): ...
    def get_header(self, object, /): ...
    def get_http_version(self, /): ...
    def get_http_version_string(self, /): ...
    def get_proxies_for_url(self, object, /): ...
    def get_proxy_spec(self, /): ...
    def get_ref_count(self, /): ...
    def get_try_all_direct(self, /): ...
    def get_username(): ...
    def get_verify_ssl(self, /): ...
    def hasCookie(self, object, /): ...
    def has_cookie(self, object, /): ...
    def initRandomSeed(): ...
    def init_random_seed(): ...
    def loadCertificates(self, object, /): ...
    def loadClientCertificate(self, /): ...
    def load_certificates(self, object, /): ...
    def load_client_certificate(self, /): ...
    def makeChannel(self, object, /): ...
    def make_channel(self, object, /): ...
    def parseHttpVersionString(object, /): ...
    def parse_http_version_string(object, /): ...
    def postForm(): ...
    def post_form(): ...
    def ref(self, /): ...
    ref_count = None
    def sendCookies(): ...
    def send_cookies(): ...
    def setCipherList(self, object, /): ...
    def setClientCertificateFilename(self, object, /): ...
    def setClientCertificatePassphrase(self, object, /): ...
    def setClientCertificatePem(self, object, /): ...
    def setCookie(self, object, /): ...
    def setDirectHostSpec(self, object, /): ...
    def setHttpVersion(self, object, /): ...
    def setProxySpec(self, object, /): ...
    def setTryAllDirect(self, object, /): ...
    def setUsername(): ...
    def setVerifySsl(self, object, /): ...
    def set_cipher_list(self, object, /): ...
    def set_client_certificate_filename(self, object, /): ...
    def set_client_certificate_passphrase(self, object, /): ...
    def set_client_certificate_pem(self, object, /): ...
    def set_cookie(self, object, /): ...
    def set_direct_host_spec(self, object, /): ...
    def set_http_version(self, object, /): ...
    def set_proxy_spec(self, object, /): ...
    def set_try_all_direct(self, object, /): ...
    def set_username(): ...
    def set_verify_ssl(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
    def writeCookies(self, object, /): ...
    def write_cookies(self, object, /): ...
class HTTPCookie:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearExpires(self, /): ...
    def clear_expires(self, /): ...
    domain = None
    expires = None
    def getDomain(self, /): ...
    def getExpires(self, /): ...
    def getName(self, /): ...
    def getPath(self, /): ...
    def getSecure(self, /): ...
    def getValue(self, /): ...
    def get_domain(self, /): ...
    def get_expires(self, /): ...
    def get_name(self, /): ...
    def get_path(self, /): ...
    def get_secure(self, /): ...
    def get_value(self, /): ...
    def hasExpires(self, /): ...
    def has_expires(self, /): ...
    def isExpired(): ...
    def is_expired(): ...
    def matchesUrl(self, object, /): ...
    def matches_url(self, object, /): ...
    name = None
    def output(self, object, /): ...
    def parseSetCookie(): ...
    def parse_set_cookie(): ...
    path = None
    secure = None
    def setDomain(self, object, /): ...
    def setExpires(self, object, /): ...
    def setName(self, object, /): ...
    def setPath(self, object, /): ...
    def setSecure(self, object, /): ...
    def setValue(self, object, /): ...
    def set_domain(self, object, /): ...
    def set_expires(self, object, /): ...
    def set_name(self, object, /): ...
    def set_path(self, object, /): ...
    def set_secure(self, object, /): ...
    def set_value(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def updateFrom(self, object, /): ...
    def update_from(self, object, /): ...
    value = None
class HTTPDate:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getString(self, /): ...
    def getTime(self, /): ...
    def get_string(self, /): ...
    def get_time(self, /): ...
    def input(self, object, /): ...
    def isValid(self, /): ...
    def is_valid(self, /): ...
    def now(): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class HTTPEntityTag:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getString(self, /): ...
    def getTag(self, /): ...
    def get_string(self, /): ...
    def get_tag(self, /): ...
    def isWeak(self, /): ...
    def is_weak(self, /): ...
    def output(self, object, /): ...
    def strongEquiv(self, object, /): ...
    def strong_equiv(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def weakEquiv(self, object, /): ...
    def weak_equiv(self, object, /): ...
class HTTPEnum:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HV09:int = None
    HV10:int = None
    HV11:int = None
    HVOther:int = None
    HV_09:int = None
    HV_10:int = None
    HV_11:int = None
    HV_other:int = None
    MConnect:int = None
    MDelete:int = None
    MGet:int = None
    MHead:int = None
    MOptions:int = None
    MPost:int = None
    MPut:int = None
    MTrace:int = None
    M_connect:int = None
    M_delete:int = None
    M_get:int = None
    M_head:int = None
    M_options:int = None
    M_post:int = None
    M_put:int = None
    M_trace:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class HashVal:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def asBin(self, /): ...
    def asDec(self, /): ...
    def asHex(self, /): ...
    def as_bin(self, /): ...
    def as_dec(self, /): ...
    def as_hex(self, /): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def hashBuffer(): ...
    def hashBytes(self, object, /): ...
    def hashFile(self, object, /): ...
    def hashRamfile(self, object, /): ...
    def hashStream(self, object, /): ...
    def hashString(self, object, /): ...
    def hash_buffer(): ...
    def hash_bytes(self, object, /): ...
    def hash_file(self, object, /): ...
    def hash_ramfile(self, object, /): ...
    def hash_stream(self, object, /): ...
    def hash_string(self, object, /): ...
    def inputBinary(self, object, /): ...
    def inputDec(self, object, /): ...
    def inputHex(self, object, /): ...
    def input_binary(self, object, /): ...
    def input_dec(self, object, /): ...
    def input_hex(self, object, /): ...
    def mergeWith(self, object, /): ...
    def merge_with(self, object, /): ...
    def output(self, object, /): ...
    def outputBinary(self, object, /): ...
    def outputDec(self, object, /): ...
    def outputHex(self, object, /): ...
    def output_binary(self, object, /): ...
    def output_dec(self, object, /): ...
    def output_hex(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readStream(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_stream(self, object, /): ...
    def setFromBin(self, object, /): ...
    def setFromDec(self, object, /): ...
    def setFromHex(self, object, /): ...
    def set_from_bin(self, object, /): ...
    def set_from_dec(self, object, /): ...
    def set_from_hex(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeDatagram(self, object, /): ...
    def writeStream(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_stream(self, object, /): ...
class HeightfieldTesselator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def generate(self, /): ...
    def getClassType(): ...
    def getElevation(): ...
    def getName(self, /): ...
    def get_class_type(): ...
    def get_elevation(): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def heightfield(self, /): ...
    name = None
    def output(self, object, /): ...
    def setFocalPoint(): ...
    def setHeightfield(): ...
    def setHorizontalScale(self, object, /): ...
    def setMaxTriangles(self, object, /): ...
    def setName(self, object, /): ...
    def setPolyCount(self, object, /): ...
    def setVerticalScale(self, object, /): ...
    def setVisibilityRadius(self, object, /): ...
    def set_focal_point(): ...
    def set_heightfield(): ...
    def set_horizontal_scale(self, object, /): ...
    def set_max_triangles(self, object, /): ...
    def set_name(self, object, /): ...
    def set_poly_count(self, object, /): ...
    def set_vertical_scale(self, object, /): ...
    def set_visibility_radius(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class HermiteCurve:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjustPoint(): ...
    def adjustPt(): ...
    def adjustTangent(): ...
    def adjust_draw_mask(): ...
    def adjust_point(): ...
    def adjust_pt(): ...
    def adjust_tangent(): ...
    all_camera_mask = None
    def appendCv(): ...
    def append_cv(): ...
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def calcLength(): ...
    def calc_length(): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findLength(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_length(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def get2ndtangent(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurveType(self, /): ...
    def getCvIn(): ...
    def getCvName(self, object, /): ...
    def getCvOut(): ...
    def getCvPoint(): ...
    def getCvTstart(self, object, /): ...
    def getCvType(self, object, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxT(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumCvs(self, /): ...
    def getNumDimensions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(): ...
    def getPrevTransform(): ...
    def getPt(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTangent(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_2ndtangent(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve_type(self, /): ...
    def get_cv_in(): ...
    def get_cv_name(self, object, /): ...
    def get_cv_out(): ...
    def get_cv_point(): ...
    def get_cv_tstart(self, object, /): ...
    def get_cv_type(self, object, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_t(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_cvs(self, /): ...
    def get_num_dimensions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(): ...
    def get_prev_transform(): ...
    def get_pt(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tangent(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def insertCv(self, object, /): ...
    def insert_cv(self, object, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeAllCvs(self, /): ...
    def removeChild(): ...
    def removeCv(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_all_cvs(self, /): ...
    def remove_child(): ...
    def remove_cv(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurveType(self, object, /): ...
    def setCvIn(): ...
    def setCvName(): ...
    def setCvOut(): ...
    def setCvPoint(): ...
    def setCvTstart(): ...
    def setCvType(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNumDimensions(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve_type(self, object, /): ...
    def set_cv_in(): ...
    def set_cv_name(): ...
    def set_cv_out(): ...
    def set_cv_point(): ...
    def set_cv_tstart(): ...
    def set_cv_type(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_dimensions(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stitch(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeCv(): ...
    def writeEgg(): ...
    def write_cv(): ...
    def write_egg(): ...
class IDecompressStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class IDecryptStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    algorithm = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def getAlgorithm(self, /): ...
    def getIterationCount(self, /): ...
    def getKeyLength(self, /): ...
    def get_algorithm(self, /): ...
    def get_iteration_count(self, /): ...
    def get_key_length(self, /): ...
    def good(self, /): ...
    iteration_count = None
    key_length = None
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class IFileStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class ISocketStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    RSComplete:int = None
    RSError:int = None
    RSInitial:int = None
    RSReading:int = None
    RS_complete:int = None
    RS_error:int = None
    RS_initial:int = None
    RS_reading:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def getReadState(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_read_state(self, /): ...
    def get_tcp_header_size(self, /): ...
    def good(self, /): ...
    def isClosed(self, /): ...
    def is_closed(self, /): ...
    def receiveDatagram(self, object, /): ...
    def receive_datagram(self, object, /): ...
    def seekg(): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToSSReader(self, /): ...
    def upcast_to_SSReader(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
class IStreamWrapper:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def getIstream(self, /): ...
    def get_istream(self, /): ...
    istream = None
    def release(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToStreamWrapperBase(self, /): ...
    def upcast_to_StreamWrapperBase(self, /): ...
class ISubStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class Ifstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class IndexBufferContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active = None
    def assign(self, object, /): ...
    data_size_bytes = None
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def getActive(self, /): ...
    def getClassType(): ...
    def getData(self, /): ...
    def getDataSizeBytes(self, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getModified(self, /): ...
    def getNumFrames(self, /): ...
    def getNumInactiveFrames(self, /): ...
    def getResident(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active(self, /): ...
    def get_class_type(): ...
    def get_data(self, /): ...
    def get_data_size_bytes(self, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_modified(self, /): ...
    def get_num_frames(self, /): ...
    def get_num_inactive_frames(self, /): ...
    def get_resident(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    modified = None
    object = None
    def output(self, object, /): ...
    resident = None
    def setLruSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcastToAdaptiveLruPage(self, /): ...
    def upcastToBufferContext(self, /): ...
    def upcastToSavedContext(self, /): ...
    def upcast_to_AdaptiveLruPage(self, /): ...
    def upcast_to_BufferContext(self, /): ...
    def upcast_to_SavedContext(self, /): ...
    def write(): ...
class InkblotVideo:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSubfileInfo(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_subfile_info(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    subfile_info = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class InkblotVideoCursor:
    ...
    class Buffer:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def compareTimestamp(self, object, /): ...
        def compare_timestamp(self, object, /): ...
        def getClassType(): ...
        def getRefCount(self, /): ...
        def getTimestamp(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def get_class_type(): ...
        def get_ref_count(self, /): ...
        def get_timestamp(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def ref(self, /): ...
        ref_count = None
        def testRefCountIntegrity(self, /): ...
        def testRefCountNonzero(self, /): ...
        def test_ref_count_integrity(self, /): ...
        def test_ref_count_nonzero(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def unref(self, /): ...
        def upcastToReferenceCount(self, /): ...
        def upcastToTypedObject(self, /): ...
        def upcast_to_ReferenceCount(self, /): ...
        def upcast_to_TypedObject(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def applyToTexture(): ...
    def applyToTextureAlpha(): ...
    def applyToTextureRgb(): ...
    def apply_to_texture(): ...
    def apply_to_texture_alpha(): ...
    def apply_to_texture_rgb(): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fetchBuffer(self, /): ...
    def fetch_buffer(self, /): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumComponents(self, /): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_components(self, /): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setTime(): ...
    def set_time(): ...
    def setupTexture(self, object, /): ...
    def setup_texture(self, object, /): ...
    def sizeX(self, /): ...
    def sizeY(self, /): ...
    def size_x(self, /): ...
    def size_y(self, /): ...
    def streaming(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class InputDevice:
    ...
    class Axis:
        ...
        accelerator = None
        brake = None
        left_trigger = None
        left_x = None
        left_y = None
        none = None
        pitch = None
        pressure = None
        right_trigger = None
        right_x = None
        right_y = None
        roll = None
        rudder = None
        throttle = None
        wheel = None
        x = None
        y = None
        yaw = None
        z = None
    class AxisState:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        axis = None
        known = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        value = None
    class BatteryData:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        level = None
        max_level = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class ButtonState:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        handle = None
        known = None
        pressed = None
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class DeviceClass:
        ...
        dance_pad = None
        digitizer = None
        flight_stick = None
        gamepad = None
        hmd = None
        keyboard = None
        mouse = None
        spatial_mouse = None
        steering_wheel = None
        touch = None
        unknown = None
        virtual_device = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Feature:
        ...
        battery = None
        keyboard = None
        pointer = None
        tracker = None
        vibration = None
    SDown:int = None
    SUnknown:int = None
    SUp:int = None
    S_down:int = None
    S_unknown:int = None
    S_up:int = None
    _battery_data = None
    _pointer_data = None
    _tracker_data = None
    axes = None
    battery = None
    buttons = None
    connected = None
    device_class = None
    def disablePointerEvents(self, /): ...
    def disable_pointer_events(self, /): ...
    def enablePointerEvents(self, /): ...
    def enable_pointer_events(self, /): ...
    def findAxis(self, object, /): ...
    def findButton(self, object, /): ...
    def find_axis(self, object, /): ...
    def find_button(self, object, /): ...
    def getButtonEvents(self, /): ...
    def getClassType(): ...
    def getPointerEvents(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_button_events(self, /): ...
    def get_class_type(): ...
    def get_pointer_events(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasButtonEvent(self, /): ...
    def hasFeature(self, object, /): ...
    def hasPointerEvent(self, /): ...
    def has_button_event(self, /): ...
    def has_feature(self, object, /): ...
    def has_pointer_event(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    manufacturer = None
    def mapAxis(): ...
    def mapButton(): ...
    def map_axis(): ...
    def map_button(): ...
    name = None
    def output(self, object, /): ...
    def poll(self, /): ...
    product_id = None
    def ref(self, /): ...
    ref_count = None
    serial_number = None
    def setVibration(): ...
    def set_vibration(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    tracker = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    vendor_id = None
class InputDeviceManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addDevice(self, object, /): ...
    def add_device(self, object, /): ...
    def getDevices(): ...
    def getGlobalPtr(): ...
    def get_devices(): ...
    def get_global_ptr(): ...
    def removeDevice(self, object, /): ...
    def remove_device(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def update(self, /): ...
class InputDeviceNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    device = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class InputDeviceSet:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def output(self, object, /): ...
    def reserve(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class InternalName:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def append(self, object, /): ...
    basename = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findAncestor(self, object, /): ...
    def find_ancestor(self, object, /): ...
    def getAncestor(self, object, /): ...
    def getAspectRatio(): ...
    def getBamModified(self, /): ...
    def getBasename(self, /): ...
    def getBinormal(): ...
    def getBinormalName(object, /): ...
    def getCamera(): ...
    def getClassType(): ...
    def getColor(): ...
    def getError(): ...
    def getIndex(): ...
    def getModel(): ...
    def getMorph(): ...
    def getName(self, /): ...
    def getNetBasename(self, object, /): ...
    def getNormal(): ...
    def getParent(self, /): ...
    def getRefCount(self, /): ...
    def getRoot(): ...
    def getRotate(): ...
    def getSize(): ...
    def getTangent(): ...
    def getTangentName(object, /): ...
    def getTexcoord(): ...
    def getTexcoordName(object, /): ...
    def getTop(self, /): ...
    def getTransformBlend(): ...
    def getTransformIndex(): ...
    def getTransformWeight(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getVertex(): ...
    def getView(): ...
    def getWorld(): ...
    def get_ancestor(self, object, /): ...
    def get_aspect_ratio(): ...
    def get_bam_modified(self, /): ...
    def get_basename(self, /): ...
    def get_binormal(): ...
    def get_binormal_name(object, /): ...
    def get_camera(): ...
    def get_class_type(): ...
    def get_color(): ...
    def get_error(): ...
    def get_index(): ...
    def get_model(): ...
    def get_morph(): ...
    def get_name(self, /): ...
    def get_net_basename(self, object, /): ...
    def get_normal(): ...
    def get_parent(self, /): ...
    def get_ref_count(self, /): ...
    def get_root(): ...
    def get_rotate(): ...
    def get_size(): ...
    def get_tangent(): ...
    def get_tangent_name(object, /): ...
    def get_texcoord(): ...
    def get_texcoord_name(object, /): ...
    def get_top(self, /): ...
    def get_transform_blend(): ...
    def get_transform_index(): ...
    def get_transform_weight(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_vertex(): ...
    def get_view(): ...
    def get_world(): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def join(self, object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    parent = None
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class InternalNameCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addName(self, object, /): ...
    def addNamesFrom(self, object, /): ...
    def add_name(self, object, /): ...
    def add_names_from(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getName(self, object, /): ...
    def getNames(self, /): ...
    def getNumNames(self, /): ...
    def get_name(self, object, /): ...
    def get_names(self, /): ...
    def get_num_names(self, /): ...
    def hasName(self, object, /): ...
    def has_name(self, object, /): ...
    def output(self, object, /): ...
    def removeDuplicateNames(self, /): ...
    def removeName(self, object, /): ...
    def removeNamesFrom(self, object, /): ...
    def remove_duplicate_names(self, /): ...
    def remove_name(self, object, /): ...
    def remove_names_from(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class IntersectionBoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def addComponent(self, object, /): ...
    def add_component(self, object, /): ...
    def clearComponents(self, /): ...
    def clear_components(self, /): ...
    components = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getComponent(self, object, /): ...
    def getComponents(self, /): ...
    def getNumComponents(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_component(self, object, /): ...
    def get_components(self, /): ...
    def get_num_components(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class Ios:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def good(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class IosBase:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    beg:int = None
    cur:int = None
    end:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Iostream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class Istream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class JointVertexTransform:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def accumulateMatrix(): ...
    def accumulate_matrix(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getGlobalModified(object, /): ...
    def getJoint(self, /): ...
    def getMatrix(self, object, /): ...
    def getModified(): ...
    def getNextModified(object, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_global_modified(object, /): ...
    def get_joint(self, /): ...
    def get_matrix(self, object, /): ...
    def get_modified(): ...
    def get_next_modified(object, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def multMatrix(): ...
    def mult_matrix(): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class KeyboardButton:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def _del(): ...
    def alt(): ...
    def asciiKey(object, /): ...
    def ascii_key(object, /): ...
    def backspace(): ...
    def capsLock(): ...
    def caps_lock(): ...
    def control(): ...
    def down(): ...
    def end(): ...
    def enter(): ...
    def escape(): ...
    def f1(): ...
    def f10(): ...
    def f11(): ...
    def f12(): ...
    def f13(): ...
    def f14(): ...
    def f15(): ...
    def f16(): ...
    def f2(): ...
    def f3(): ...
    def f4(): ...
    def f5(): ...
    def f6(): ...
    def f7(): ...
    def f8(): ...
    def f9(): ...
    def help(): ...
    def home(): ...
    def insert(): ...
    def lalt(): ...
    def lcontrol(): ...
    def left(): ...
    def lmeta(): ...
    def lshift(): ...
    def menu(): ...
    def meta(): ...
    def numLock(): ...
    def num_lock(): ...
    def pageDown(): ...
    def pageUp(): ...
    def page_down(): ...
    def page_up(): ...
    def pause(): ...
    def printScreen(): ...
    def print_screen(): ...
    def ralt(): ...
    def rcontrol(): ...
    def right(): ...
    def rmeta(): ...
    def rshift(): ...
    def scrollLock(): ...
    def scroll_lock(): ...
    def shift(): ...
    def shiftLock(): ...
    def shift_lock(): ...
    def space(): ...
    def tab(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def up(): ...
class LColor:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LColord:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LColorf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LFrustum:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LFrustumd:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LFrustumf:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def makeOrtho(): ...
    def makeOrtho2D(): ...
    def makePerspective(): ...
    def makePerspectiveHfov(): ...
    def makePerspectiveVfov(): ...
    def make_ortho(): ...
    def make_ortho_2D(): ...
    def make_perspective(): ...
    def make_perspective_hfov(): ...
    def make_perspective_vfov(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LMatrix3:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class LMatrix3d:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class LMatrix3f:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class LMatrix4:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
class LMatrix4d:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
class LMatrix4f:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
LNTFade:int = None
LNTPop:int = None
LNT_fade:int = None
LNT_pop:int = None
class LNormal:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LNormald:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LNormalf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LODNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def addSwitch(): ...
    def add_child(): ...
    def add_stashed(): ...
    def add_switch(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    center = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearForceSwitch(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearSwitches(self, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_force_switch(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_switches(self, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def forceSwitch(self, object, /): ...
    def force_switch(self, object, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCenter(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getHighestSwitch(self, /): ...
    def getIn(self, object, /): ...
    def getIns(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLodScale(self, /): ...
    def getLowestSwitch(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumSwitches(self, /): ...
    def getOffClipPlanes(): ...
    def getOut(self, object, /): ...
    def getOuts(self, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_center(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_highest_switch(self, /): ...
    def get_in(self, object, /): ...
    def get_ins(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lod_scale(self, /): ...
    def get_lowest_switch(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_switches(self, /): ...
    def get_off_clip_planes(): ...
    def get_out(self, object, /): ...
    def get_outs(self, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def hideAllSwitches(self, /): ...
    def hideSwitch(self, object, /): ...
    def hide_all_switches(self, /): ...
    def hide_switch(self, object, /): ...
    highest_switch = None
    ins = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isAnyShown(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_any_shown(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    lod_scale = None
    lowest_switch = None
    def ls(): ...
    def makeCopy(self, /): ...
    def makeDefaultLod(object, /): ...
    def make_copy(self, /): ...
    def make_default_lod(object, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    outs = None
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setSwitch(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_switch(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def showAllSwitches(self, /): ...
    def showSwitch(): ...
    def show_all_switches(self, /): ...
    def show_switch(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def verifyChildBounds(self, /): ...
    def verify_child_bounds(self, /): ...
    def write(): ...
class LOrientation:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LOrientationd:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LOrientationf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LParabola:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def calcPoint(self, object, /): ...
    def calc_point(self, object, /): ...
    def getA(self, /): ...
    def getB(self, /): ...
    def getC(self, /): ...
    def get_a(self, /): ...
    def get_b(self, /): ...
    def get_c(self, /): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
class LParabolad:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def calcPoint(self, object, /): ...
    def calc_point(self, object, /): ...
    def getA(self, /): ...
    def getB(self, /): ...
    def getC(self, /): ...
    def get_a(self, /): ...
    def get_b(self, /): ...
    def get_c(self, /): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
class LParabolaf:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def calcPoint(self, object, /): ...
    def calc_point(self, object, /): ...
    def getA(self, /): ...
    def getB(self, /): ...
    def getC(self, /): ...
    def get_a(self, /): ...
    def get_b(self, /): ...
    def get_c(self, /): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
class LPlane:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPlaned:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPlanef:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPoint2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LPoint2d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LPoint2f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LPoint2i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LPoint3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LPoint3d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LPoint3f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LPoint3i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LPoint4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPoint4d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPoint4f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LPoint4i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LQuaternion:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LQuaterniond:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LQuaternionf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LRGBColor:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LRGBColord:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LRGBColorf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LRotation:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LRotationd:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LRotationf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LTexCoord:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LTexCoord3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LTexCoord3d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LTexCoord3f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LTexCoordd:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LTexCoordf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVecBase2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVecBase2d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVecBase2f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVecBase2i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVecBase3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVecBase3d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVecBase3f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVecBase3i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVecBase4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVecBase4d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVecBase4f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVecBase4i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVector2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVector2d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVector2f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVector2i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class LVector3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVector3d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVector3f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVector3i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVector4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVector4d:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVector4f:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVector4i:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(self, object, /): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(self, object, /): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class LVertex:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVertexd:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class LVertexf:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Lens:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FCAspectRatio:int = None
    FCCameraPlane:int = None
    FCKeystone:int = None
    FCOffAxis:int = None
    FCRoll:int = None
    FCShear:int = None
    FC_aspect_ratio:int = None
    FC_camera_plane:int = None
    FC_keystone:int = None
    FC_off_axis:int = None
    FC_roll:int = None
    FC_shear:int = None
    SCLeft:int = None
    SCMono:int = None
    SCRight:int = None
    SCStereo:int = None
    SC_left:int = None
    SC_mono:int = None
    SC_right:int = None
    SC_stereo:int = None
    aspect_ratio = None
    change_event = None
    def clear(self, /): ...
    def clearCustomFilmMat(self, /): ...
    def clearKeystone(self, /): ...
    def clearViewMat(self, /): ...
    def clear_custom_film_mat(self, /): ...
    def clear_keystone(self, /): ...
    def clear_view_mat(self, /): ...
    convergence_distance = None
    coordinate_system = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def extrude(): ...
    def extrudeDepth(): ...
    def extrudeVec(): ...
    def extrude_depth(): ...
    def extrude_vec(): ...
    far = None
    def fillin(): ...
    film_offset = None
    film_size = None
    focal_length = None
    fov = None
    def getAspectRatio(self, /): ...
    def getBamModified(self, /): ...
    def getChangeEvent(self, /): ...
    def getClassType(): ...
    def getConvergenceDistance(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getCustomFilmMat(self, /): ...
    def getDefaultFar(): ...
    def getDefaultNear(): ...
    def getFar(self, /): ...
    def getFilmMat(self, /): ...
    def getFilmMatInv(self, /): ...
    def getFilmOffset(self, /): ...
    def getFilmSize(self, /): ...
    def getFocalLength(self, /): ...
    def getFov(self, /): ...
    def getHfov(self, /): ...
    def getInterocularDistance(self, /): ...
    def getKeystone(self, /): ...
    def getLastChange(self, /): ...
    def getLensMat(self, /): ...
    def getLensMatInv(self, /): ...
    def getMinFov(self, /): ...
    def getNear(self, /): ...
    def getNodalPoint(self, /): ...
    def getProjectionMat(): ...
    def getProjectionMatInv(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUpVector(self, /): ...
    def getVfov(self, /): ...
    def getViewHpr(self, /): ...
    def getViewMat(self, /): ...
    def getViewVector(self, /): ...
    def get_aspect_ratio(self, /): ...
    def get_bam_modified(self, /): ...
    def get_change_event(self, /): ...
    def get_class_type(): ...
    def get_convergence_distance(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_custom_film_mat(self, /): ...
    def get_default_far(): ...
    def get_default_near(): ...
    def get_far(self, /): ...
    def get_film_mat(self, /): ...
    def get_film_mat_inv(self, /): ...
    def get_film_offset(self, /): ...
    def get_film_size(self, /): ...
    def get_focal_length(self, /): ...
    def get_fov(self, /): ...
    def get_hfov(self, /): ...
    def get_interocular_distance(self, /): ...
    def get_keystone(self, /): ...
    def get_last_change(self, /): ...
    def get_lens_mat(self, /): ...
    def get_lens_mat_inv(self, /): ...
    def get_min_fov(self, /): ...
    def get_near(self, /): ...
    def get_nodal_point(self, /): ...
    def get_projection_mat(): ...
    def get_projection_mat_inv(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_up_vector(self, /): ...
    def get_vfov(self, /): ...
    def get_view_hpr(self, /): ...
    def get_view_mat(self, /): ...
    def get_view_vector(self, /): ...
    interocular_distance = None
    def isExactType(self, object, /): ...
    def isLinear(self, /): ...
    def isOfType(self, object, /): ...
    def isOrthographic(self, /): ...
    def isPerspective(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_linear(self, /): ...
    def is_of_type(self, object, /): ...
    def is_orthographic(self, /): ...
    def is_perspective(self, /): ...
    keystone = None
    def makeBounds(self, /): ...
    def makeCopy(self, /): ...
    def makeGeometry(self, /): ...
    def make_bounds(self, /): ...
    def make_copy(self, /): ...
    def make_geometry(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    min_fov = None
    near = None
    nodal_point = None
    def output(self, object, /): ...
    def project(): ...
    def recomputeAll(self, /): ...
    def recompute_all(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAspectRatio(self, object, /): ...
    def setChangeEvent(self, object, /): ...
    def setConvergenceDistance(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setCustomFilmMat(self, object, /): ...
    def setFar(self, object, /): ...
    def setFilmOffset(): ...
    def setFilmSize(): ...
    def setFocalLength(self, object, /): ...
    def setFov(): ...
    def setFrustumFromCorners(): ...
    def setInterocularDistance(self, object, /): ...
    def setKeystone(self, object, /): ...
    def setMinFov(self, object, /): ...
    def setNear(self, object, /): ...
    def setNearFar(): ...
    def setViewHpr(): ...
    def setViewMat(self, object, /): ...
    def setViewVector(): ...
    def set_aspect_ratio(self, object, /): ...
    def set_change_event(self, object, /): ...
    def set_convergence_distance(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_custom_film_mat(self, object, /): ...
    def set_far(self, object, /): ...
    def set_film_offset(): ...
    def set_film_size(): ...
    def set_focal_length(self, object, /): ...
    def set_fov(): ...
    def set_frustum_from_corners(): ...
    def set_interocular_distance(self, object, /): ...
    def set_keystone(self, object, /): ...
    def set_min_fov(self, object, /): ...
    def set_near(self, object, /): ...
    def set_near_far(): ...
    def set_view_hpr(): ...
    def set_view_mat(self, object, /): ...
    def set_view_vector(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    view_hpr = None
    view_mat = None
    def write(): ...
class LensNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class Light:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def asNode(self, /): ...
    def as_node(self, /): ...
    color = None
    color_temperature = None
    def getAttenuation(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getExponent(self, /): ...
    def getPriority(self, /): ...
    def getSpecularColor(self, /): ...
    def get_attenuation(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_exponent(self, /): ...
    def get_priority(self, /): ...
    def get_specular_color(self, /): ...
    def hasColorTemperature(self, /): ...
    def has_color_temperature(self, /): ...
    def isAmbientLight(self, /): ...
    def is_ambient_light(self, /): ...
    priority = None
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setPriority(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_priority(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LightAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    OAdd:int = None
    ORemove:int = None
    OSet:int = None
    O_add:int = None
    O_remove:int = None
    O_set:int = None
    def addLight(self, object, /): ...
    def addOffLight(self, object, /): ...
    def addOnLight(self, object, /): ...
    def add_light(self, object, /): ...
    def add_off_light(self, object, /): ...
    def add_on_light(self, object, /): ...
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getAmbientContribution(self, /): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getLight(self, object, /): ...
    def getMostImportantLight(self, /): ...
    def getNumAttribs(): ...
    def getNumLights(self, /): ...
    def getNumNonAmbientLights(self, /): ...
    def getNumOffLights(self, /): ...
    def getNumOnLights(self, /): ...
    def getOffLight(self, object, /): ...
    def getOffLights(self, /): ...
    def getOnLight(self, object, /): ...
    def getOnLights(self, /): ...
    def getOperation(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_ambient_contribution(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_light(self, object, /): ...
    def get_most_important_light(self, /): ...
    def get_num_attribs(): ...
    def get_num_lights(self, /): ...
    def get_num_non_ambient_lights(self, /): ...
    def get_num_off_lights(self, /): ...
    def get_num_on_lights(self, /): ...
    def get_off_light(self, object, /): ...
    def get_off_lights(self, /): ...
    def get_on_light(self, object, /): ...
    def get_on_lights(self, /): ...
    def get_operation(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasAllOff(self, /): ...
    def hasAnyOnLight(self, /): ...
    def hasLight(self, object, /): ...
    def hasOffLight(self, object, /): ...
    def hasOnLight(self, object, /): ...
    def has_all_off(self, /): ...
    def has_any_on_light(self, /): ...
    def has_light(self, object, /): ...
    def has_off_light(self, object, /): ...
    def has_on_light(self, object, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeAllOff(): ...
    def makeDefault(): ...
    def make_all_off(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    off_lights = None
    on_lights = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeLight(self, object, /): ...
    def removeOffLight(self, object, /): ...
    def removeOnLight(self, object, /): ...
    def remove_light(self, object, /): ...
    def remove_off_light(self, object, /): ...
    def remove_on_light(self, object, /): ...
    def replaceOffLight(): ...
    def replaceOnLight(): ...
    def replace_off_light(): ...
    def replace_on_light(): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class LightLensNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class LightMutex:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LightMutexDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LightNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class LightRampAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    LRTDefault:int = None
    LRTDoubleThreshold:int = None
    LRTHdr0:int = None
    LRTHdr1:int = None
    LRTHdr2:int = None
    LRTIdentity:int = None
    LRTSingleThreshold:int = None
    LRT_default:int = None
    LRT_double_threshold:int = None
    LRT_hdr0:int = None
    LRT_hdr1:int = None
    LRT_hdr2:int = None
    LRT_identity:int = None
    LRT_single_threshold:int = None
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getLevel(self, object, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getThreshold(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_level(self, object, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_threshold(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def makeDefault(): ...
    def makeDoubleThreshold(): ...
    def makeHdr0(): ...
    def makeHdr1(): ...
    def makeHdr2(): ...
    def makeIdentity(): ...
    def makeSingleThreshold(): ...
    def make_default(): ...
    def make_double_threshold(): ...
    def make_hdr0(): ...
    def make_hdr1(): ...
    def make_hdr2(): ...
    def make_identity(): ...
    def make_single_threshold(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class LightReMutex:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def elevateLock(self, /): ...
    def elevate_lock(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LightReMutexDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def elevateLock(self, /): ...
    def elevate_lock(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LineSegs:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def create(): ...
    def drawTo(): ...
    def draw_to(): ...
    def getClassType(): ...
    def getCurrentPosition(self, /): ...
    def getName(self, /): ...
    def getNumVertices(self, /): ...
    def getVertex(self, object, /): ...
    def getVertexColor(self, object, /): ...
    def getVertexColors(self, /): ...
    def getVertices(self, /): ...
    def get_class_type(): ...
    def get_current_position(self, /): ...
    def get_name(self, /): ...
    def get_num_vertices(self, /): ...
    def get_vertex(self, object, /): ...
    def get_vertex_color(self, object, /): ...
    def get_vertex_colors(self, /): ...
    def get_vertices(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def moveTo(): ...
    def move_to(): ...
    name = None
    def output(self, object, /): ...
    def reset(self, /): ...
    def setColor(): ...
    def setName(self, object, /): ...
    def setThickness(self, object, /): ...
    def setVertex(): ...
    def setVertexColor(): ...
    def set_color(): ...
    def set_name(self, object, /): ...
    def set_thickness(self, object, /): ...
    def set_vertex(): ...
    def set_vertex_color(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LineStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def getLine(self, /): ...
    def get_line(self, /): ...
    def good(self, /): ...
    def hasNewline(self, /): ...
    def has_newline(self, /): ...
    def isTextAvailable(self, /): ...
    def is_text_available(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class Loader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Results:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def assign(self, object, /): ...
        def clear(self, /): ...
        def getFile(self, object, /): ...
        def getFileType(self, object, /): ...
        def getFileTypes(self, /): ...
        def getFiles(self, /): ...
        def getNumFiles(self, /): ...
        def get_file(self, object, /): ...
        def get_file_type(self, object, /): ...
        def get_file_types(self, /): ...
        def get_files(self, /): ...
        def get_num_files(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getClassType(): ...
    def getGlobalPtr(): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskManager(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_global_ptr(): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_manager(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def loadAsync(self, object, /): ...
    def loadBamStream(self, object, /): ...
    def loadSync(): ...
    def load_async(self, object, /): ...
    def load_bam_stream(self, object, /): ...
    def load_sync(): ...
    def makeAsyncRequest(): ...
    def makeAsyncSaveRequest(): ...
    def make_async_request(): ...
    def make_async_save_request(): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, object, /): ...
    def saveAsync(self, object, /): ...
    def saveSync(): ...
    def save_async(self, object, /): ...
    def save_sync(): ...
    def setName(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def setTaskManager(self, object, /): ...
    def set_name(self, object, /): ...
    def set_task_chain(self, object, /): ...
    def set_task_manager(self, object, /): ...
    def stopThreads(self, /): ...
    def stop_threads(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
class LoaderFileType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getAdditionalExtensions(self, /): ...
    def getAllowDiskCache(self, object, /): ...
    def getAllowRamCache(self, object, /): ...
    def getClassType(): ...
    def getExtension(self, /): ...
    def getName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_additional_extensions(self, /): ...
    def get_allow_disk_cache(self, object, /): ...
    def get_allow_ram_cache(self, object, /): ...
    def get_class_type(): ...
    def get_extension(self, /): ...
    def get_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def supportsCompressed(self, /): ...
    def supportsLoad(self, /): ...
    def supportsSave(self, /): ...
    def supports_compressed(self, /): ...
    def supports_load(self, /): ...
    def supports_save(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class LoaderFileTypeRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getGlobalPtr(): ...
    def getNumTypes(self, /): ...
    def getType(self, object, /): ...
    def getTypeFromExtension(self, object, /): ...
    def getTypes(self, /): ...
    def get_global_ptr(): ...
    def get_num_types(self, /): ...
    def get_type(self, object, /): ...
    def get_type_from_extension(self, object, /): ...
    def get_types(self, /): ...
    def registerDeferredType(self, object, /): ...
    def registerType(self, object, /): ...
    def register_deferred_type(self, object, /): ...
    def register_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    types = None
    def unregisterType(self, object, /): ...
    def unregister_type(self, object, /): ...
    def write(): ...
class LoaderOptions:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    LFAllowInstance:int = None
    LFCacheOnly:int = None
    LFConvertAnim:int = None
    LFConvertChannels:int = None
    LFConvertSkeleton:int = None
    LFNoCache:int = None
    LFNoDiskCache:int = None
    LFNoRamCache:int = None
    LFReportErrors:int = None
    LFSearch:int = None
    LF_allow_instance:int = None
    LF_cache_only:int = None
    LF_convert_anim:int = None
    LF_convert_channels:int = None
    LF_convert_skeleton:int = None
    LF_no_cache:int = None
    LF_no_disk_cache:int = None
    LF_no_ram_cache:int = None
    LF_report_errors:int = None
    LF_search:int = None
    TFAllow1d:int = None
    TFAllowCompression:int = None
    TFFloat:int = None
    TFGenerateMipmaps:int = None
    TFInteger:int = None
    TFMultiview:int = None
    TFPreload:int = None
    TFPreloadSimple:int = None
    TF_allow_1d:int = None
    TF_allow_compression:int = None
    TF_float:int = None
    TF_generate_mipmaps:int = None
    TF_integer:int = None
    TF_multiview:int = None
    TF_preload:int = None
    TF_preload_simple:int = None
    auto_texture_scale = None
    flags = None
    def getAutoTextureScale(self, /): ...
    def getFlags(self, /): ...
    def getTextureFlags(self, /): ...
    def getTextureNumViews(self, /): ...
    def get_auto_texture_scale(self, /): ...
    def get_flags(self, /): ...
    def get_texture_flags(self, /): ...
    def get_texture_num_views(self, /): ...
    def output(self, object, /): ...
    def setAutoTextureScale(self, object, /): ...
    def setFlags(self, object, /): ...
    def setTextureFlags(self, object, /): ...
    def setTextureNumViews(self, object, /): ...
    def set_auto_texture_scale(self, object, /): ...
    def set_flags(self, object, /): ...
    def set_texture_flags(self, object, /): ...
    def set_texture_num_views(self, object, /): ...
    texture_flags = None
    texture_num_views = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class LogicOpAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    OAnd:int = None
    OAndInverted:int = None
    OAndReverse:int = None
    OClear:int = None
    OCopy:int = None
    OCopyInverted:int = None
    OEquivalent:int = None
    OInvert:int = None
    ONand:int = None
    ONone:int = None
    ONoop:int = None
    ONor:int = None
    OOr:int = None
    OOrInverted:int = None
    OOrReverse:int = None
    OSet:int = None
    OXor:int = None
    O_and:int = None
    O_and_inverted:int = None
    O_and_reverse:int = None
    O_clear:int = None
    O_copy:int = None
    O_copy_inverted:int = None
    O_equivalent:int = None
    O_invert:int = None
    O_nand:int = None
    O_none:int = None
    O_noop:int = None
    O_nor:int = None
    O_or:int = None
    O_or_inverted:int = None
    O_or_reverse:int = None
    O_set:int = None
    O_xor:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getOperation(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_operation(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    operation = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class MainThread:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def bindThread(): ...
    def bind_thread(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerYield(): ...
    def consider_yield(): ...
    current_pipeline_stage:int = None
    current_task = None
    current_thread = None
    external_thread = None
    def forceYield(): ...
    def force_yield(): ...
    def getClassType(): ...
    def getCurrentPipelineStage(): ...
    def getCurrentTask(self, /): ...
    def getCurrentThread(): ...
    def getExternalThread(): ...
    def getMainThread(): ...
    def getName(self, /): ...
    def getPipelineStage(self, /): ...
    def getPstatsIndex(self, /): ...
    def getPythonIndex(self, /): ...
    def getRefCount(self, /): ...
    def getSyncName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUniqueId(self, /): ...
    def get_class_type(): ...
    def get_current_pipeline_stage(): ...
    def get_current_task(self, /): ...
    def get_current_thread(): ...
    def get_external_thread(): ...
    def get_main_thread(): ...
    def get_name(self, /): ...
    def get_pipeline_stage(self, /): ...
    def get_pstats_index(self, /): ...
    def get_python_index(self, /): ...
    def get_ref_count(self, /): ...
    def get_sync_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique_id(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isJoinable(self, /): ...
    def isOfType(self, object, /): ...
    def isSimpleThreads(): ...
    def isStarted(self, /): ...
    def isThreadingSupported(): ...
    def isTrueThreads(): ...
    def is_exact_type(self, object, /): ...
    def is_joinable(self, /): ...
    def is_of_type(self, object, /): ...
    def is_simple_threads(): ...
    def is_started(self, /): ...
    def is_threading_supported(): ...
    def is_true_threads(): ...
    def join(self, /): ...
    joinable = None
    main_thread = None
    name = None
    def output(self, object, /): ...
    def outputBlocker(self, object, /): ...
    def output_blocker(self, object, /): ...
    pipeline_stage = None
    def preempt(self, /): ...
    def prepareForExit(): ...
    def prepare_for_exit(): ...
    pstats_index = None
    python_index = None
    def ref(self, /): ...
    ref_count = None
    def setMinPipelineStage(self, object, /): ...
    def setName(self, object, /): ...
    def setPipelineStage(self, object, /): ...
    def setPythonIndex(self, object, /): ...
    def set_min_pipeline_stage(self, object, /): ...
    def set_name(self, object, /): ...
    def set_pipeline_stage(self, object, /): ...
    def set_python_index(self, object, /): ...
    simple_threads = None
    def sleep(object, /): ...
    def start(): ...
    started = None
    sync_name = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    threading_supported = None
    true_threads = None
    type = None
    unique_id = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def writeStatus(object, /): ...
    def write_status(object, /): ...
class Mat3:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class Mat3D:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class Mat3F:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def determinant(self, /): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol2(self, object, /): ...
    def getCol2s(self, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow2(self, object, /): ...
    def getRow2s(self, /): ...
    def getRows(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col2(self, object, /): ...
    def get_col2s(self, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row2(self, object, /): ...
    def get_row2s(self, /): ...
    def get_rows(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invertTransposeFrom(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def invert_transpose_from(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
class Mat4:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
class Mat4D:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
class Mat4F:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def operatorTypecast(self, /): ...
        def operator_typecast(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def accumulate(): ...
    def addHash(): ...
    def add_hash(): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    cols = None
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def convertMat(): ...
    def convert_mat(): ...
    def fill(self, object, /): ...
    def getCell(): ...
    def getClassType(): ...
    def getCol(self, object, /): ...
    def getCol3(self, object, /): ...
    def getCols(self, /): ...
    def getHash(): ...
    def getNumComponents(self, /): ...
    def getRow(): ...
    def getRow3(): ...
    def getRow3s(self, /): ...
    def getRows(self, /): ...
    def getUpper3(self, /): ...
    def get_cell(): ...
    def get_class_type(): ...
    def get_col(self, object, /): ...
    def get_col3(self, object, /): ...
    def get_cols(self, /): ...
    def get_hash(): ...
    def get_num_components(self, /): ...
    def get_row(): ...
    def get_row3(): ...
    def get_row3s(self, /): ...
    def get_rows(self, /): ...
    def get_upper_3(self, /): ...
    def identMat(): ...
    def ident_mat(): ...
    def invertAffineFrom(self, object, /): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_affine_from(self, object, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def multiply(): ...
    num_components:int = None
    def onesMat(): ...
    def ones_mat(): ...
    def output(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rotateMat(): ...
    def rotateMatNormaxis(): ...
    def rotate_mat(): ...
    def rotate_mat_normaxis(): ...
    rows = None
    def scaleMat(): ...
    def scaleShearMat(): ...
    def scale_mat(): ...
    def scale_shear_mat(): ...
    def set(): ...
    def setCell(): ...
    def setCol(): ...
    def setRotateMat(): ...
    def setRotateMatNormaxis(): ...
    def setRow(): ...
    def setScaleMat(self, object, /): ...
    def setScaleShearMat(): ...
    def setShearMat(): ...
    def setTranslateMat(self, object, /): ...
    def setUpper3(self, object, /): ...
    def set_cell(): ...
    def set_col(): ...
    def set_rotate_mat(): ...
    def set_rotate_mat_normaxis(): ...
    def set_row(): ...
    def set_scale_mat(self, object, /): ...
    def set_scale_shear_mat(): ...
    def set_shear_mat(): ...
    def set_translate_mat(self, object, /): ...
    def set_upper_3(self, object, /): ...
    def shearMat(): ...
    def shear_mat(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def translateMat(): ...
    def translate_mat(): ...
    def transposeFrom(self, object, /): ...
    def transposeInPlace(self, /): ...
    def transpose_from(self, object, /): ...
    def transpose_in_place(self, /): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    def xform(self, object, /): ...
    def xformInPlace(self, object, /): ...
    def xformPoint(self, object, /): ...
    def xformPointGeneral(self, object, /): ...
    def xformPointGeneralInPlace(self, object, /): ...
    def xformPointInPlace(self, object, /): ...
    def xformVec(self, object, /): ...
    def xformVecGeneral(self, object, /): ...
    def xformVecGeneralInPlace(self, object, /): ...
    def xformVecInPlace(self, object, /): ...
    def xform_in_place(self, object, /): ...
    def xform_point(self, object, /): ...
    def xform_point_general(self, object, /): ...
    def xform_point_general_in_place(self, object, /): ...
    def xform_point_in_place(self, object, /): ...
    def xform_vec(self, object, /): ...
    def xform_vec_general(self, object, /): ...
    def xform_vec_general_in_place(self, object, /): ...
    def xform_vec_in_place(self, object, /): ...
    def yToZUpMat(): ...
    def y_to_z_up_mat(): ...
    def zToYUpMat(): ...
    def z_to_y_up_mat(): ...
    def zerosMat(): ...
    def zeros_mat(): ...
class Material:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    ambient = None
    def assign(self, object, /): ...
    base_color = None
    def clearAmbient(self, /): ...
    def clearBaseColor(self, /): ...
    def clearDiffuse(self, /): ...
    def clearEmission(self, /): ...
    def clearMetallic(self, /): ...
    def clearName(self, /): ...
    def clearSpecular(self, /): ...
    def clear_ambient(self, /): ...
    def clear_base_color(self, /): ...
    def clear_diffuse(self, /): ...
    def clear_emission(self, /): ...
    def clear_metallic(self, /): ...
    def clear_name(self, /): ...
    def clear_specular(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    diffuse = None
    emission = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getAmbient(self, /): ...
    def getBamModified(self, /): ...
    def getBaseColor(self, /): ...
    def getClassType(): ...
    def getDefault(): ...
    def getDiffuse(self, /): ...
    def getEmission(self, /): ...
    def getLocal(self, /): ...
    def getMetallic(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getRefractiveIndex(self, /): ...
    def getRoughness(self, /): ...
    def getShininess(self, /): ...
    def getSpecular(self, /): ...
    def getTwoside(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_ambient(self, /): ...
    def get_bam_modified(self, /): ...
    def get_base_color(self, /): ...
    def get_class_type(): ...
    def get_default(): ...
    def get_diffuse(self, /): ...
    def get_emission(self, /): ...
    def get_local(self, /): ...
    def get_metallic(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_refractive_index(self, /): ...
    def get_roughness(self, /): ...
    def get_shininess(self, /): ...
    def get_specular(self, /): ...
    def get_twoside(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasAmbient(self, /): ...
    def hasBaseColor(self, /): ...
    def hasDiffuse(self, /): ...
    def hasEmission(self, /): ...
    def hasMetallic(self, /): ...
    def hasName(self, /): ...
    def hasRefractiveIndex(self, /): ...
    def hasRoughness(self, /): ...
    def hasSpecular(self, /): ...
    def has_ambient(self, /): ...
    def has_base_color(self, /): ...
    def has_diffuse(self, /): ...
    def has_emission(self, /): ...
    def has_metallic(self, /): ...
    def has_name(self, /): ...
    def has_refractive_index(self, /): ...
    def has_roughness(self, /): ...
    def has_specular(self, /): ...
    def isAttribLocked(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_attrib_locked(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    local = None
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    metallic = None
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    refractive_index = None
    roughness = None
    def setAmbient(self, object, /): ...
    def setAttribLock(self, /): ...
    def setBaseColor(self, object, /): ...
    def setDiffuse(self, object, /): ...
    def setEmission(self, object, /): ...
    def setLocal(self, object, /): ...
    def setMetallic(self, object, /): ...
    def setName(self, object, /): ...
    def setRefractiveIndex(self, object, /): ...
    def setRoughness(self, object, /): ...
    def setShininess(self, object, /): ...
    def setSpecular(self, object, /): ...
    def setTwoside(self, object, /): ...
    def set_ambient(self, object, /): ...
    def set_attrib_lock(self, /): ...
    def set_base_color(self, object, /): ...
    def set_diffuse(self, object, /): ...
    def set_emission(self, object, /): ...
    def set_local(self, object, /): ...
    def set_metallic(self, object, /): ...
    def set_name(self, object, /): ...
    def set_refractive_index(self, object, /): ...
    def set_roughness(self, object, /): ...
    def set_shininess(self, object, /): ...
    def set_specular(self, object, /): ...
    def set_twoside(self, object, /): ...
    shininess = None
    specular = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    twoside = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class MaterialAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMaterial(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_material(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    material = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class MaterialCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addMaterial(self, object, /): ...
    def addMaterialsFrom(self, object, /): ...
    def add_material(self, object, /): ...
    def add_materials_from(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def findMaterial(self, object, /): ...
    def find_material(self, object, /): ...
    def getMaterial(self, object, /): ...
    def getNumMaterials(self, /): ...
    def get_material(self, object, /): ...
    def get_num_materials(self, /): ...
    def hasMaterial(self, object, /): ...
    def has_material(self, object, /): ...
    def output(self, object, /): ...
    def removeDuplicateMaterials(self, /): ...
    def removeMaterial(self, object, /): ...
    def removeMaterialsFrom(self, object, /): ...
    def remove_duplicate_materials(self, /): ...
    def remove_material(self, object, /): ...
    def remove_materials_from(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class MaterialPool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getMaterial(object, /): ...
    def get_material(object, /): ...
    def listContents(object, /): ...
    def list_contents(object, /): ...
    def releaseAllMaterials(): ...
    def releaseMaterial(object, /): ...
    def release_all_materials(): ...
    def release_material(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(object, /): ...
class MathNumbers:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class MatrixLens:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FCAspectRatio:int = None
    FCCameraPlane:int = None
    FCKeystone:int = None
    FCOffAxis:int = None
    FCRoll:int = None
    FCShear:int = None
    FC_aspect_ratio:int = None
    FC_camera_plane:int = None
    FC_keystone:int = None
    FC_off_axis:int = None
    FC_roll:int = None
    FC_shear:int = None
    SCLeft:int = None
    SCMono:int = None
    SCRight:int = None
    SCStereo:int = None
    SC_left:int = None
    SC_mono:int = None
    SC_right:int = None
    SC_stereo:int = None
    aspect_ratio = None
    change_event = None
    def clear(self, /): ...
    def clearCustomFilmMat(self, /): ...
    def clearKeystone(self, /): ...
    def clearLeftEyeMat(self, /): ...
    def clearRightEyeMat(self, /): ...
    def clearViewMat(self, /): ...
    def clear_custom_film_mat(self, /): ...
    def clear_keystone(self, /): ...
    def clear_left_eye_mat(self, /): ...
    def clear_right_eye_mat(self, /): ...
    def clear_view_mat(self, /): ...
    convergence_distance = None
    coordinate_system = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def extrude(): ...
    def extrudeDepth(): ...
    def extrudeVec(): ...
    def extrude_depth(): ...
    def extrude_vec(): ...
    far = None
    def fillin(): ...
    film_offset = None
    film_size = None
    focal_length = None
    fov = None
    def getAspectRatio(self, /): ...
    def getBamModified(self, /): ...
    def getChangeEvent(self, /): ...
    def getClassType(): ...
    def getConvergenceDistance(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getCustomFilmMat(self, /): ...
    def getDefaultFar(): ...
    def getDefaultNear(): ...
    def getFar(self, /): ...
    def getFilmMat(self, /): ...
    def getFilmMatInv(self, /): ...
    def getFilmOffset(self, /): ...
    def getFilmSize(self, /): ...
    def getFocalLength(self, /): ...
    def getFov(self, /): ...
    def getHfov(self, /): ...
    def getInterocularDistance(self, /): ...
    def getKeystone(self, /): ...
    def getLastChange(self, /): ...
    def getLeftEyeMat(self, /): ...
    def getLensMat(self, /): ...
    def getLensMatInv(self, /): ...
    def getMinFov(self, /): ...
    def getNear(self, /): ...
    def getNodalPoint(self, /): ...
    def getProjectionMat(): ...
    def getProjectionMatInv(): ...
    def getRefCount(self, /): ...
    def getRightEyeMat(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUpVector(self, /): ...
    def getUserMat(self, /): ...
    def getVfov(self, /): ...
    def getViewHpr(self, /): ...
    def getViewMat(self, /): ...
    def getViewVector(self, /): ...
    def get_aspect_ratio(self, /): ...
    def get_bam_modified(self, /): ...
    def get_change_event(self, /): ...
    def get_class_type(): ...
    def get_convergence_distance(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_custom_film_mat(self, /): ...
    def get_default_far(): ...
    def get_default_near(): ...
    def get_far(self, /): ...
    def get_film_mat(self, /): ...
    def get_film_mat_inv(self, /): ...
    def get_film_offset(self, /): ...
    def get_film_size(self, /): ...
    def get_focal_length(self, /): ...
    def get_fov(self, /): ...
    def get_hfov(self, /): ...
    def get_interocular_distance(self, /): ...
    def get_keystone(self, /): ...
    def get_last_change(self, /): ...
    def get_left_eye_mat(self, /): ...
    def get_lens_mat(self, /): ...
    def get_lens_mat_inv(self, /): ...
    def get_min_fov(self, /): ...
    def get_near(self, /): ...
    def get_nodal_point(self, /): ...
    def get_projection_mat(): ...
    def get_projection_mat_inv(): ...
    def get_ref_count(self, /): ...
    def get_right_eye_mat(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_up_vector(self, /): ...
    def get_user_mat(self, /): ...
    def get_vfov(self, /): ...
    def get_view_hpr(self, /): ...
    def get_view_mat(self, /): ...
    def get_view_vector(self, /): ...
    def hasLeftEyeMat(self, /): ...
    def hasRightEyeMat(self, /): ...
    def has_left_eye_mat(self, /): ...
    def has_right_eye_mat(self, /): ...
    interocular_distance = None
    def isExactType(self, object, /): ...
    def isLinear(self, /): ...
    def isOfType(self, object, /): ...
    def isOrthographic(self, /): ...
    def isPerspective(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_linear(self, /): ...
    def is_of_type(self, object, /): ...
    def is_orthographic(self, /): ...
    def is_perspective(self, /): ...
    keystone = None
    def makeBounds(self, /): ...
    def makeCopy(self, /): ...
    def makeGeometry(self, /): ...
    def make_bounds(self, /): ...
    def make_copy(self, /): ...
    def make_geometry(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    min_fov = None
    near = None
    nodal_point = None
    def output(self, object, /): ...
    def project(): ...
    def recomputeAll(self, /): ...
    def recompute_all(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAspectRatio(self, object, /): ...
    def setChangeEvent(self, object, /): ...
    def setConvergenceDistance(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setCustomFilmMat(self, object, /): ...
    def setFar(self, object, /): ...
    def setFilmOffset(): ...
    def setFilmSize(): ...
    def setFocalLength(self, object, /): ...
    def setFov(): ...
    def setFrustumFromCorners(): ...
    def setInterocularDistance(self, object, /): ...
    def setKeystone(self, object, /): ...
    def setLeftEyeMat(self, object, /): ...
    def setMinFov(self, object, /): ...
    def setNear(self, object, /): ...
    def setNearFar(): ...
    def setRightEyeMat(self, object, /): ...
    def setUserMat(self, object, /): ...
    def setViewHpr(): ...
    def setViewMat(self, object, /): ...
    def setViewVector(): ...
    def set_aspect_ratio(self, object, /): ...
    def set_change_event(self, object, /): ...
    def set_convergence_distance(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_custom_film_mat(self, object, /): ...
    def set_far(self, object, /): ...
    def set_film_offset(): ...
    def set_film_size(): ...
    def set_focal_length(self, object, /): ...
    def set_fov(): ...
    def set_frustum_from_corners(): ...
    def set_interocular_distance(self, object, /): ...
    def set_keystone(self, object, /): ...
    def set_left_eye_mat(self, object, /): ...
    def set_min_fov(self, object, /): ...
    def set_near(self, object, /): ...
    def set_near_far(): ...
    def set_right_eye_mat(self, object, /): ...
    def set_user_mat(self, object, /): ...
    def set_view_hpr(): ...
    def set_view_mat(self, object, /): ...
    def set_view_vector(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    user_mat = None
    view_hpr = None
    view_mat = None
    def write(): ...
class MemoryUsage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    counting = None
    current_cpp_size:int = None
    external_size:int = None
    def freeze(): ...
    def getCurrentCppSize(): ...
    def getExternalSize(): ...
    def getNumPointers(): ...
    def getPandaHeapArraySize(): ...
    def getPandaHeapOverhead(): ...
    def getPandaHeapSingleSize(): ...
    def getPandaMmapSize(): ...
    def getPointers(object, /): ...
    def getPointersOfAge(): ...
    def getPointersOfType(): ...
    def getPointersWithZeroCount(object, /): ...
    def getTotalCppSize(): ...
    def getTotalSize(): ...
    def get_current_cpp_size(): ...
    def get_external_size(): ...
    def get_num_pointers(): ...
    def get_panda_heap_array_size(): ...
    def get_panda_heap_overhead(): ...
    def get_panda_heap_single_size(): ...
    def get_panda_mmap_size(): ...
    def get_pointers(object, /): ...
    def get_pointers_of_age(): ...
    def get_pointers_of_type(): ...
    def get_pointers_with_zero_count(object, /): ...
    def get_total_cpp_size(): ...
    def get_total_size(): ...
    def isCounting(): ...
    def isTracking(): ...
    def is_counting(): ...
    def is_tracking(): ...
    panda_heap_array_size:int = None
    panda_heap_overhead:int = None
    panda_heap_single_size:int = None
    panda_mmap_size:int = None
    def showCurrentAges(): ...
    def showCurrentTypes(): ...
    def showTrendAges(): ...
    def showTrendTypes(): ...
    def show_current_ages(): ...
    def show_current_types(): ...
    def show_trend_ages(): ...
    def show_trend_types(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    total_cpp_size:int = None
    total_size:int = None
    tracking = None
class MemoryUsagePointers:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getAge(self, object, /): ...
    def getNumPointers(self, /): ...
    def getPointer(self, object, /): ...
    def getPointers(self, /): ...
    def getPythonPointer(self, object, /): ...
    def getType(self, object, /): ...
    def getTypeName(self, object, /): ...
    def getTypedPointer(self, object, /): ...
    def getTypedPointers(self, /): ...
    def get_age(self, object, /): ...
    def get_num_pointers(self, /): ...
    def get_pointer(self, object, /): ...
    def get_pointers(self, /): ...
    def get_python_pointer(self, object, /): ...
    def get_type(self, object, /): ...
    def get_type_name(self, object, /): ...
    def get_typed_pointer(self, object, /): ...
    def get_typed_pointers(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Mersenne:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getUint31(self, /): ...
    def get_uint31(self, /): ...
    max_value:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class MeshDrawer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def begin(): ...
    def billboard(): ...
    def blendedParticle(): ...
    def blended_particle(): ...
    def crossSegment(): ...
    def cross_segment(): ...
    def end(self, /): ...
    def explosion(): ...
    def geometry(self, object, /): ...
    def getBudget(self, /): ...
    def getClassType(): ...
    def getRoot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_budget(self, /): ...
    def get_class_type(): ...
    def get_root(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def linkSegment(): ...
    def linkSegmentEnd(): ...
    def link_segment(): ...
    def link_segment_end(): ...
    def particle(): ...
    def segment(): ...
    def setBudget(self, object, /): ...
    def set_budget(self, object, /): ...
    def stream(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tri(): ...
    type = None
    def unevenSegment(): ...
    def uneven_segment(): ...
class MeshDrawer2D:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def begin(self, /): ...
    def end(self, /): ...
    def getBudget(self, /): ...
    def getClassType(): ...
    def getRoot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_budget(self, /): ...
    def get_class_type(): ...
    def get_root(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def quadRaw(): ...
    def quad_raw(): ...
    def rectangle(): ...
    def rectangleBorder(): ...
    def rectangleBorderTiled(): ...
    def rectangleRaw(): ...
    def rectangleTiled(): ...
    def rectangle_border(): ...
    def rectangle_border_tiled(): ...
    def rectangle_raw(): ...
    def rectangle_tiled(): ...
    def setBudget(self, object, /): ...
    def setClip(): ...
    def set_budget(self, object, /): ...
    def set_clip(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class MicrophoneAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    channels = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getChannels(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getNumOptions(): ...
    def getOption(object, /): ...
    def getOptions(): ...
    def getRate(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_channels(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_num_options(): ...
    def get_option(object, /): ...
    def get_options(): ...
    def get_rate(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    options = None
    def output(self, object, /): ...
    rate = None
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class ModelFlattenRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getModel(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getOrig(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_model(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_orig(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    manager = None
    max_dt = None
    name = None
    orig = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class ModelLoadRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    filename = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getFilename(self, /): ...
    def getLoader(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getModel(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getOptions(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_filename(self, /): ...
    def get_loader(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_model(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_options(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    loader = None
    manager = None
    max_dt = None
    name = None
    options = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class ModelNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    PTDropNode:int = None
    PTLocal:int = None
    PTNet:int = None
    PTNoTouch:int = None
    PTNone:int = None
    PT_drop_node:int = None
    PT_local:int = None
    PT_net:int = None
    PT_no_touch:int = None
    PT_none:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserveAttributes(self, /): ...
    def getPreserveTransform(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserve_attributes(self, /): ...
    def get_preserve_transform(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserveAttributes(self, object, /): ...
    def setPreserveTransform(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setTransformLimit(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserve_attributes(self, object, /): ...
    def set_preserve_transform(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_transform_limit(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ModelPool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addModel(): ...
    def add_model(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getModel(): ...
    def get_model(): ...
    def hasModel(object, /): ...
    def has_model(object, /): ...
    def listContents(): ...
    def list_contents(): ...
    def loadModel(): ...
    def load_model(): ...
    def releaseAllModels(): ...
    def releaseModel(object, /): ...
    def release_all_models(): ...
    def release_model(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def verifyModel(object, /): ...
    def verify_model(object, /): ...
    def write(object, /): ...
class ModelRoot:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class ModelReference:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getRefCount(self, /): ...
        def get_class_type(): ...
        def get_ref_count(self, /): ...
        def ref(self, /): ...
        ref_count = None
        def testRefCountIntegrity(self, /): ...
        def testRefCountNonzero(self, /): ...
        def test_ref_count_integrity(self, /): ...
        def test_ref_count_nonzero(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        def unref(self, /): ...
    PTDropNode:int = None
    PTLocal:int = None
    PTNet:int = None
    PTNoTouch:int = None
    PTNone:int = None
    PT_drop_node:int = None
    PT_local:int = None
    PT_net:int = None
    PT_no_touch:int = None
    PT_none:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    fullpath = None
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getFullpath(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getModelRefCount(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserveAttributes(self, /): ...
    def getPreserveTransform(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReference(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTimestamp(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_fullpath(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_model_ref_count(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserve_attributes(self, /): ...
    def get_preserve_transform(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_reference(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_timestamp(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    model_ref_count = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    reference = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFullpath(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserveAttributes(self, object, /): ...
    def setPreserveTransform(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setReference(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTimestamp(self, object, /): ...
    def setTransform(): ...
    def setTransformLimit(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_fullpath(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserve_attributes(self, object, /): ...
    def set_preserve_transform(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_reference(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_timestamp(self, object, /): ...
    def set_transform(): ...
    def set_transform_limit(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    timestamp = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ModelSaveRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    filename = None
    def gather(): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getFilename(self, /): ...
    def getLoader(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getNode(self, /): ...
    def getOptions(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getSuccess(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_filename(self, /): ...
    def get_loader(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_node(self, /): ...
    def get_options(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_success(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    loader = None
    manager = None
    max_dt = None
    name = None
    node = None
    options = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class ModifierButtons:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addButton(self, object, /): ...
    def add_button(self, object, /): ...
    def allButtonsUp(self, /): ...
    def all_buttons_up(self, /): ...
    def assign(self, object, /): ...
    def buttonDown(self, object, /): ...
    def buttonUp(self, object, /): ...
    def button_down(self, object, /): ...
    def button_up(self, object, /): ...
    buttons = None
    def getButton(self, object, /): ...
    def getButtons(self, /): ...
    def getNumButtons(self, /): ...
    def getPrefix(self, /): ...
    def get_button(self, object, /): ...
    def get_buttons(self, /): ...
    def get_num_buttons(self, /): ...
    def get_prefix(self, /): ...
    def hasButton(self, object, /): ...
    def has_button(self, object, /): ...
    def isAnyDown(self, /): ...
    def isDown(self, object, /): ...
    def is_any_down(self, /): ...
    def is_down(self, object, /): ...
    def matches(self, object, /): ...
    def output(self, object, /): ...
    def removeButton(self, object, /): ...
    def remove_button(self, object, /): ...
    def setButtonList(self, object, /): ...
    def set_button_list(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class MouseAndKeyboard:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSource(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_source(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class MouseButton:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def button(object, /): ...
    def five(): ...
    def four(): ...
    def isMouseButton(object, /): ...
    def is_mouse_button(object, /): ...
    def one(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def three(): ...
    def two(): ...
    def wheelDown(): ...
    def wheelLeft(): ...
    def wheelRight(): ...
    def wheelUp(): ...
    def wheel_down(): ...
    def wheel_left(): ...
    def wheel_right(): ...
    def wheel_up(): ...
class MouseData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getInWindow(self, /): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_in_window(self, /): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    id = None
    in_window = None
    pressure = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    x = None
    y = None
class MouseInterfaceNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAllButtons(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearButton(self, object, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_all_buttons(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_button(self, object, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def requireButton(): ...
    def require_button(): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class MouseRecorder:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isPlaying(self, /): ...
    def isRecording(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_playing(self, /): ...
    def is_recording(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToDataNode(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToRecorderBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_DataNode(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_RecorderBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class MouseSubregion:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAllButtons(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearButton(self, object, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_all_buttons(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_button(self, object, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBottom(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLeft(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRight(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTop(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bottom(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_left(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_right(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_top(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def requireButton(): ...
    def require_button(): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setDimensions(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_dimensions(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class MouseWatcher:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addGroup(self, object, /): ...
    def addRegion(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_group(self, object, /): ...
    def add_region(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearDisplayRegion(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearGeometry(self, /): ...
    def clearInactivityTimeout(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearRegions(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTrailLog(self, /): ...
    def clearTrailNode(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_display_region(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_geometry(self, /): ...
    def clear_inactivity_timeout(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_regions(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_trail_log(self, /): ...
    def clear_trail_node(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findRegion(self, object, /): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_region(self, object, /): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getButtonDownPattern(self, /): ...
    def getButtonRepeatPattern(self, /): ...
    def getButtonUpPattern(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDisplayRegion(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterPattern(self, /): ...
    def getExtraHandler(self, /): ...
    def getFancyBits(): ...
    def getFrame(self, /): ...
    def getGeometry(self, /): ...
    def getGroup(self, object, /): ...
    def getGroups(self, /): ...
    def getInactivityTimeout(self, /): ...
    def getInactivityTimeoutEvent(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLeavePattern(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getModifierButtons(self, /): ...
    def getMouse(self, /): ...
    def getMouseX(self, /): ...
    def getMouseY(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumGroups(self, /): ...
    def getNumParents(): ...
    def getNumRegions(self, /): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverRegion(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRegion(self, object, /): ...
    def getRegions(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTrailLog(self, /): ...
    def getTrailNode(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getWithinPattern(self, /): ...
    def getWithoutPattern(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_button_down_pattern(self, /): ...
    def get_button_repeat_pattern(self, /): ...
    def get_button_up_pattern(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_display_region(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_pattern(self, /): ...
    def get_extra_handler(self, /): ...
    def get_fancy_bits(): ...
    def get_frame(self, /): ...
    def get_geometry(self, /): ...
    def get_group(self, object, /): ...
    def get_groups(self, /): ...
    def get_inactivity_timeout(self, /): ...
    def get_inactivity_timeout_event(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_leave_pattern(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_modifier_buttons(self, /): ...
    def get_mouse(self, /): ...
    def get_mouse_x(self, /): ...
    def get_mouse_y(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_groups(self, /): ...
    def get_num_parents(): ...
    def get_num_regions(self, /): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_over_region(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_region(self, object, /): ...
    def get_regions(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_trail_log(self, /): ...
    def get_trail_node(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_within_pattern(self, /): ...
    def get_without_pattern(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasDisplayRegion(self, /): ...
    def hasEffect(self, object, /): ...
    def hasGeometry(self, /): ...
    def hasInactivityTimeout(self, /): ...
    def hasMouse(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasRegion(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_display_region(self, /): ...
    def has_effect(self, object, /): ...
    def has_geometry(self, /): ...
    def has_inactivity_timeout(self, /): ...
    def has_mouse(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_region(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def hideRegions(self, /): ...
    def hide_regions(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isButtonDown(self, object, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isMouseOpen(self, /): ...
    def isOfType(self, object, /): ...
    def isOverRegion(): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isSorted(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_button_down(self, object, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_mouse_open(self, /): ...
    def is_of_type(self, object, /): ...
    def is_over_region(): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_sorted(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def noteActivity(self, /): ...
    def note_activity(self, /): ...
    def numTrailRecent(self, /): ...
    def num_trail_recent(self, /): ...
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    regions = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeGroup(self, object, /): ...
    def removeRegion(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_group(self, object, /): ...
    def remove_region(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceGroup(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_group(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setButtonDownPattern(self, object, /): ...
    def setButtonRepeatPattern(self, object, /): ...
    def setButtonUpPattern(self, object, /): ...
    def setColor(self, object, /): ...
    def setDisplayRegion(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setEnterPattern(self, object, /): ...
    def setExtraHandler(self, object, /): ...
    def setFinal(self, object, /): ...
    def setFrame(): ...
    def setGeometry(self, object, /): ...
    def setInactivityTimeout(self, object, /): ...
    def setInactivityTimeoutEvent(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLeavePattern(self, object, /): ...
    def setModifierButtons(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTrailLogDuration(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setWithinPattern(self, object, /): ...
    def setWithoutPattern(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_button_down_pattern(self, object, /): ...
    def set_button_repeat_pattern(self, object, /): ...
    def set_button_up_pattern(self, object, /): ...
    def set_color(self, object, /): ...
    def set_display_region(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_enter_pattern(self, object, /): ...
    def set_extra_handler(self, object, /): ...
    def set_final(self, object, /): ...
    def set_frame(): ...
    def set_geometry(self, object, /): ...
    def set_inactivity_timeout(self, object, /): ...
    def set_inactivity_timeout_event(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_leave_pattern(self, object, /): ...
    def set_modifier_buttons(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_trail_log_duration(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_within_pattern(self, object, /): ...
    def set_without_pattern(self, object, /): ...
    def showRegions(): ...
    def show_regions(): ...
    def sortRegions(self, /): ...
    def sort_regions(self, /): ...
    sorted = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToDataNode(self, /): ...
    def upcastToMouseWatcherBase(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_DataNode(self, /): ...
    def upcast_to_MouseWatcherBase(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def updateRegions(self, /): ...
    def update_regions(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class MouseWatcherBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addRegion(self, object, /): ...
    def add_region(self, object, /): ...
    def clearRegions(self, /): ...
    def clear_regions(self, /): ...
    def findRegion(self, object, /): ...
    def find_region(self, object, /): ...
    def getClassType(): ...
    def getNumRegions(self, /): ...
    def getRegion(self, object, /): ...
    def getRegions(self, /): ...
    def get_class_type(): ...
    def get_num_regions(self, /): ...
    def get_region(self, object, /): ...
    def get_regions(self, /): ...
    def hasRegion(self, object, /): ...
    def has_region(self, object, /): ...
    def hideRegions(self, /): ...
    def hide_regions(self, /): ...
    def isSorted(self, /): ...
    def is_sorted(self, /): ...
    def output(self, object, /): ...
    regions = None
    def removeRegion(self, object, /): ...
    def remove_region(self, object, /): ...
    def setColor(self, object, /): ...
    def set_color(self, object, /): ...
    def showRegions(): ...
    def show_regions(): ...
    def sortRegions(self, /): ...
    def sort_regions(self, /): ...
    sorted = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def updateRegions(self, /): ...
    def update_regions(self, /): ...
    def write(): ...
class MouseWatcherGroup:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addRegion(self, object, /): ...
    def add_region(self, object, /): ...
    def clearRegions(self, /): ...
    def clear_regions(self, /): ...
    def findRegion(self, object, /): ...
    def find_region(self, object, /): ...
    def getClassType(): ...
    def getNumRegions(self, /): ...
    def getRefCount(self, /): ...
    def getRegion(self, object, /): ...
    def getRegions(self, /): ...
    def get_class_type(): ...
    def get_num_regions(self, /): ...
    def get_ref_count(self, /): ...
    def get_region(self, object, /): ...
    def get_regions(self, /): ...
    def hasRegion(self, object, /): ...
    def has_region(self, object, /): ...
    def hideRegions(self, /): ...
    def hide_regions(self, /): ...
    def isSorted(self, /): ...
    def is_sorted(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    regions = None
    def removeRegion(self, object, /): ...
    def remove_region(self, object, /): ...
    def setColor(self, object, /): ...
    def set_color(self, object, /): ...
    def showRegions(): ...
    def show_regions(): ...
    def sortRegions(self, /): ...
    def sort_regions(self, /): ...
    sorted = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
    def upcastToMouseWatcherBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcast_to_MouseWatcherBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def updateRegions(self, /): ...
    def update_regions(self, /): ...
    def write(): ...
class MouseWatcherParameter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getButton(self, /): ...
    def getCandidateStringEncoded(): ...
    def getCursorPos(self, /): ...
    def getHighlightEnd(self, /): ...
    def getHighlightStart(self, /): ...
    def getKeycode(self, /): ...
    def getModifierButtons(self, /): ...
    def getMouse(self, /): ...
    def get_button(self, /): ...
    def get_candidate_string_encoded(): ...
    def get_cursor_pos(self, /): ...
    def get_highlight_end(self, /): ...
    def get_highlight_start(self, /): ...
    def get_keycode(self, /): ...
    def get_modifier_buttons(self, /): ...
    def get_mouse(self, /): ...
    def hasButton(self, /): ...
    def hasCandidate(self, /): ...
    def hasKeycode(self, /): ...
    def hasMouse(self, /): ...
    def has_button(self, /): ...
    def has_candidate(self, /): ...
    def has_keycode(self, /): ...
    def has_mouse(self, /): ...
    def isKeyrepeat(self, /): ...
    def isOutside(self, /): ...
    def is_keyrepeat(self, /): ...
    def is_outside(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class MouseWatcherRegion:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SFAnyButton:int = None
    SFMouseButton:int = None
    SFMousePosition:int = None
    SFOtherButton:int = None
    SF_any_button:int = None
    SF_mouse_button:int = None
    SF_mouse_position:int = None
    SF_other_button:int = None
    active = None
    area = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    frame = None
    def getActive(self, /): ...
    def getArea(self, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFrame(self, /): ...
    def getKeyboard(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getSuppressFlags(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active(self, /): ...
    def get_area(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_frame(self, /): ...
    def get_keyboard(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    keyboard = None
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setActive(self, object, /): ...
    def setFrame(): ...
    def setKeyboard(self, object, /): ...
    def setName(self, object, /): ...
    def setSort(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def set_active(self, object, /): ...
    def set_frame(): ...
    def set_keyboard(self, object, /): ...
    def set_name(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    sort = None
    suppress_flags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class MovieAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class MovieAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class MovieTexture:
    ...
    CMDefault:int = None
    CMDxt1:int = None
    CMDxt2:int = None
    CMDxt3:int = None
    CMDxt4:int = None
    CMDxt5:int = None
    CMEac:int = None
    CMEtc1:int = None
    CMEtc2:int = None
    CMFxt1:int = None
    CMOff:int = None
    CMOn:int = None
    CMPvr12bpp:int = None
    CMPvr14bpp:int = None
    CMRgtc:int = None
    CM_default:int = None
    CM_dxt1:int = None
    CM_dxt2:int = None
    CM_dxt3:int = None
    CM_dxt4:int = None
    CM_dxt5:int = None
    CM_eac:int = None
    CM_etc1:int = None
    CM_etc2:int = None
    CM_fxt1:int = None
    CM_off:int = None
    CM_on:int = None
    CM_pvr1_2bpp:int = None
    CM_pvr1_4bpp:int = None
    CM_rgtc:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FAlpha:int = None
    FBlue:int = None
    FColorIndex:int = None
    FDepthComponent:int = None
    FDepthComponent16:int = None
    FDepthComponent24:int = None
    FDepthComponent32:int = None
    FDepthStencil:int = None
    FGreen:int = None
    FLuminance:int = None
    FLuminanceAlpha:int = None
    FLuminanceAlphamask:int = None
    FR11G11B10:int = None
    FR16:int = None
    FR16i:int = None
    FR32:int = None
    FR32i:int = None
    FR8i:int = None
    FRed:int = None
    FRg:int = None
    FRg16:int = None
    FRg16i:int = None
    FRg32:int = None
    FRg32i:int = None
    FRg8i:int = None
    FRgb:int = None
    FRgb10A2:int = None
    FRgb12:int = None
    FRgb16:int = None
    FRgb16i:int = None
    FRgb32:int = None
    FRgb32i:int = None
    FRgb332:int = None
    FRgb5:int = None
    FRgb8:int = None
    FRgb8i:int = None
    FRgb9E5:int = None
    FRgba:int = None
    FRgba12:int = None
    FRgba16:int = None
    FRgba16i:int = None
    FRgba32:int = None
    FRgba32i:int = None
    FRgba4:int = None
    FRgba5:int = None
    FRgba8:int = None
    FRgba8i:int = None
    FRgbm:int = None
    FSluminance:int = None
    FSluminanceAlpha:int = None
    FSrgb:int = None
    FSrgbAlpha:int = None
    FTDefault:int = None
    FTInvalid:int = None
    FTLinear:int = None
    FTLinearMipmapLinear:int = None
    FTLinearMipmapNearest:int = None
    FTNearest:int = None
    FTNearestMipmapLinear:int = None
    FTNearestMipmapNearest:int = None
    FTShadow:int = None
    FT_default:int = None
    FT_invalid:int = None
    FT_linear:int = None
    FT_linear_mipmap_linear:int = None
    FT_linear_mipmap_nearest:int = None
    FT_nearest:int = None
    FT_nearest_mipmap_linear:int = None
    FT_nearest_mipmap_nearest:int = None
    FT_shadow:int = None
    F_alpha:int = None
    F_blue:int = None
    F_color_index:int = None
    F_depth_component:int = None
    F_depth_component16:int = None
    F_depth_component24:int = None
    F_depth_component32:int = None
    F_depth_stencil:int = None
    F_green:int = None
    F_luminance:int = None
    F_luminance_alpha:int = None
    F_luminance_alphamask:int = None
    F_r11_g11_b10:int = None
    F_r16:int = None
    F_r16i:int = None
    F_r32:int = None
    F_r32i:int = None
    F_r8i:int = None
    F_red:int = None
    F_rg:int = None
    F_rg16:int = None
    F_rg16i:int = None
    F_rg32:int = None
    F_rg32i:int = None
    F_rg8i:int = None
    F_rgb:int = None
    F_rgb10_a2:int = None
    F_rgb12:int = None
    F_rgb16:int = None
    F_rgb16i:int = None
    F_rgb32:int = None
    F_rgb32i:int = None
    F_rgb332:int = None
    F_rgb5:int = None
    F_rgb8:int = None
    F_rgb8i:int = None
    F_rgb9_e5:int = None
    F_rgba:int = None
    F_rgba12:int = None
    F_rgba16:int = None
    F_rgba16i:int = None
    F_rgba32:int = None
    F_rgba32i:int = None
    F_rgba4:int = None
    F_rgba5:int = None
    F_rgba8:int = None
    F_rgba8i:int = None
    F_rgbm:int = None
    F_sluminance:int = None
    F_sluminance_alpha:int = None
    F_srgb:int = None
    F_srgb_alpha:int = None
    QLBest:int = None
    QLDefault:int = None
    QLFastest:int = None
    QLNormal:int = None
    QL_best:int = None
    QL_default:int = None
    QL_fastest:int = None
    QL_normal:int = None
    TByte:int = None
    TFloat:int = None
    THalfFloat:int = None
    TInt:int = None
    TShort:int = None
    TT1dTexture:int = None
    TT1dTextureArray:int = None
    TT2dTexture:int = None
    TT2dTextureArray:int = None
    TT3dTexture:int = None
    TTBufferTexture:int = None
    TTCubeMap:int = None
    TTCubeMapArray:int = None
    TT_1d_texture:int = None
    TT_1d_texture_array:int = None
    TT_2d_texture:int = None
    TT_2d_texture_array:int = None
    TT_3d_texture:int = None
    TT_buffer_texture:int = None
    TT_cube_map:int = None
    TT_cube_map_array:int = None
    TUnsignedByte:int = None
    TUnsignedInt:int = None
    TUnsignedInt248:int = None
    TUnsignedShort:int = None
    T_byte:int = None
    T_float:int = None
    T_half_float:int = None
    T_int:int = None
    T_short:int = None
    T_unsigned_byte:int = None
    T_unsigned_int:int = None
    T_unsigned_int_24_8:int = None
    T_unsigned_short:int = None
    WMBorderColor:int = None
    WMClamp:int = None
    WMInvalid:int = None
    WMMirror:int = None
    WMMirrorOnce:int = None
    WMRepeat:int = None
    WM_border_color:int = None
    WM_clamp:int = None
    WM_invalid:int = None
    WM_mirror:int = None
    WM_mirror_once:int = None
    WM_repeat:int = None
    alpha_filename = None
    alpha_fullpath = None
    anisotropic_degree = None
    auto_texture_scale = None
    aux_data = None
    border_color = None
    cacheable = None
    def clear(self, /): ...
    def clearAlphaFilename(self, /): ...
    def clearAlphaFullpath(self, /): ...
    def clearAuxData(self, object, /): ...
    def clearClearColor(self, /): ...
    def clearFilename(self, /): ...
    def clearFullpath(self, /): ...
    def clearImage(self, /): ...
    def clearName(self, /): ...
    def clearRamImage(self, /): ...
    def clearRamMipmapImage(self, object, /): ...
    def clearRamMipmapImages(self, /): ...
    def clearSimpleRamImage(self, /): ...
    def clear_alpha_filename(self, /): ...
    def clear_alpha_fullpath(self, /): ...
    def clear_aux_data(self, object, /): ...
    def clear_clear_color(self, /): ...
    clear_color = None
    def clear_filename(self, /): ...
    def clear_fullpath(self, /): ...
    def clear_image(self, /): ...
    def clear_name(self, /): ...
    def clear_ram_image(self, /): ...
    def clear_ram_mipmap_image(self, object, /): ...
    def clear_ram_mipmap_images(self, /): ...
    def clear_simple_ram_image(self, /): ...
    component_type = None
    component_width = None
    def compressRamImage(): ...
    def compress_ram_image(): ...
    compression = None
    def considerRescale(): ...
    def consider_rescale(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default_sampler = None
    def downToPower2(object, /): ...
    def down_to_power_2(object, /): ...
    effective_anisotropic_degree = None
    effective_magfilter = None
    effective_minfilter = None
    effective_quality_level = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def estimateTextureMemory(self, /): ...
    def estimate_texture_memory(self, /): ...
    expected_num_mipmap_levels = None
    expected_ram_image_size = None
    expected_ram_page_size = None
    filename = None
    def fillin(): ...
    format = None
    def formatComponentType(object, /): ...
    def formatCompressionMode(object, /): ...
    def formatFormat(object, /): ...
    def formatQualityLevel(object, /): ...
    def formatTextureType(object, /): ...
    def format_component_type(object, /): ...
    def format_compression_mode(object, /): ...
    def format_format(object, /): ...
    def format_quality_level(object, /): ...
    def format_texture_type(object, /): ...
    fullpath = None
    def generateAlphaScaleMap(self, /): ...
    def generateNormalizationCubeMap(self, object, /): ...
    def generateRamMipmapImages(self, /): ...
    def generateSimpleRamImage(self, /): ...
    def generate_alpha_scale_map(self, /): ...
    def generate_normalization_cube_map(self, object, /): ...
    def generate_ram_mipmap_images(self, /): ...
    def generate_simple_ram_image(self, /): ...
    def getActive(self, object, /): ...
    def getAlphaCursor(self, object, /): ...
    def getAlphaFilename(self, /): ...
    def getAlphaFullpath(self, /): ...
    def getAnisotropicDegree(self, /): ...
    def getAutoTextureScale(self, /): ...
    def getAuxData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBorderColor(self, /): ...
    def getClassType(): ...
    def getClearColor(self, /): ...
    def getClearData(self, /): ...
    def getColorCursor(self, object, /): ...
    def getComponentType(self, /): ...
    def getComponentWidth(self, /): ...
    def getCompression(self, /): ...
    def getDataSizeBytes(self, object, /): ...
    def getDefaultSampler(self, /): ...
    def getEffectiveAnisotropicDegree(self, /): ...
    def getEffectiveMagfilter(self, /): ...
    def getEffectiveMinfilter(self, /): ...
    def getEffectiveQualityLevel(self, /): ...
    def getExpectedMipmapNumPages(self, object, /): ...
    def getExpectedMipmapXSize(self, object, /): ...
    def getExpectedMipmapYSize(self, object, /): ...
    def getExpectedMipmapZSize(self, object, /): ...
    def getExpectedNumMipmapLevels(self, /): ...
    def getExpectedRamImageSize(self, /): ...
    def getExpectedRamMipmapImageSize(self, object, /): ...
    def getExpectedRamMipmapPageSize(self, object, /): ...
    def getExpectedRamMipmapViewSize(self, object, /): ...
    def getExpectedRamPageSize(self, /): ...
    def getFilename(self, /): ...
    def getFormat(self, /): ...
    def getFullpath(self, /): ...
    def getImageModified(self, /): ...
    def getKeepRamImage(self, /): ...
    def getLoadedFromImage(self, /): ...
    def getLoadedFromTxo(self, /): ...
    def getLoop(self, /): ...
    def getLoopCount(self, /): ...
    def getMagfilter(self, /): ...
    def getMatchFramebufferFormat(self, /): ...
    def getMinfilter(self, /): ...
    def getName(self, /): ...
    def getNumComponents(self, /): ...
    def getNumLoadableRamMipmapImages(self, /): ...
    def getNumPages(self, /): ...
    def getNumRamMipmapImages(self, /): ...
    def getNumViews(self, /): ...
    def getOrigFileXSize(self, /): ...
    def getOrigFileYSize(self, /): ...
    def getOrigFileZSize(self, /): ...
    def getPadXSize(self, /): ...
    def getPadYSize(self, /): ...
    def getPadZSize(self, /): ...
    def getPlayRate(self, /): ...
    def getPostLoadStoreCache(self, /): ...
    def getPropertiesModified(self, /): ...
    def getQualityLevel(self, /): ...
    def getRamImage(self, /): ...
    def getRamImageAs(self, object, /): ...
    def getRamImageCompression(self, /): ...
    def getRamImageSize(self, /): ...
    def getRamMipmapImage(self, object, /): ...
    def getRamMipmapImageSize(self, object, /): ...
    def getRamMipmapPageSize(self, object, /): ...
    def getRamMipmapViewSize(self, object, /): ...
    def getRamPageSize(self, /): ...
    def getRamViewSize(self, /): ...
    def getRefCount(self, /): ...
    def getRenderToTexture(self, /): ...
    def getResident(self, object, /): ...
    def getSimpleImageModified(self, /): ...
    def getSimpleRamImage(self, /): ...
    def getSimpleRamImageSize(self, /): ...
    def getSimpleXSize(self, /): ...
    def getSimpleYSize(self, /): ...
    def getTexScale(self, /): ...
    def getTextureType(self, /): ...
    def getTexturesPower2(): ...
    def getTime(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUncompressedRamImage(self, /): ...
    def getUsageHint(self, /): ...
    def getVideoHeight(self, /): ...
    def getVideoLength(self, /): ...
    def getVideoWidth(self, /): ...
    def getWrapU(self, /): ...
    def getWrapV(self, /): ...
    def getWrapW(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def getZSize(self, /): ...
    def get_active(self, object, /): ...
    def get_alpha_cursor(self, object, /): ...
    def get_alpha_filename(self, /): ...
    def get_alpha_fullpath(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_auto_texture_scale(self, /): ...
    def get_aux_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_border_color(self, /): ...
    def get_class_type(): ...
    def get_clear_color(self, /): ...
    def get_clear_data(self, /): ...
    def get_color_cursor(self, object, /): ...
    def get_component_type(self, /): ...
    def get_component_width(self, /): ...
    def get_compression(self, /): ...
    def get_data_size_bytes(self, object, /): ...
    def get_default_sampler(self, /): ...
    def get_effective_anisotropic_degree(self, /): ...
    def get_effective_magfilter(self, /): ...
    def get_effective_minfilter(self, /): ...
    def get_effective_quality_level(self, /): ...
    def get_expected_mipmap_num_pages(self, object, /): ...
    def get_expected_mipmap_x_size(self, object, /): ...
    def get_expected_mipmap_y_size(self, object, /): ...
    def get_expected_mipmap_z_size(self, object, /): ...
    def get_expected_num_mipmap_levels(self, /): ...
    def get_expected_ram_image_size(self, /): ...
    def get_expected_ram_mipmap_image_size(self, object, /): ...
    def get_expected_ram_mipmap_page_size(self, object, /): ...
    def get_expected_ram_mipmap_view_size(self, object, /): ...
    def get_expected_ram_page_size(self, /): ...
    def get_filename(self, /): ...
    def get_format(self, /): ...
    def get_fullpath(self, /): ...
    def get_image_modified(self, /): ...
    def get_keep_ram_image(self, /): ...
    def get_loaded_from_image(self, /): ...
    def get_loaded_from_txo(self, /): ...
    def get_loop(self, /): ...
    def get_loop_count(self, /): ...
    def get_magfilter(self, /): ...
    def get_match_framebuffer_format(self, /): ...
    def get_minfilter(self, /): ...
    def get_name(self, /): ...
    def get_num_components(self, /): ...
    def get_num_loadable_ram_mipmap_images(self, /): ...
    def get_num_pages(self, /): ...
    def get_num_ram_mipmap_images(self, /): ...
    def get_num_views(self, /): ...
    def get_orig_file_x_size(self, /): ...
    def get_orig_file_y_size(self, /): ...
    def get_orig_file_z_size(self, /): ...
    def get_pad_x_size(self, /): ...
    def get_pad_y_size(self, /): ...
    def get_pad_z_size(self, /): ...
    def get_play_rate(self, /): ...
    def get_post_load_store_cache(self, /): ...
    def get_properties_modified(self, /): ...
    def get_quality_level(self, /): ...
    def get_ram_image(self, /): ...
    def get_ram_image_as(self, object, /): ...
    def get_ram_image_compression(self, /): ...
    def get_ram_image_size(self, /): ...
    def get_ram_mipmap_image(self, object, /): ...
    def get_ram_mipmap_image_size(self, object, /): ...
    def get_ram_mipmap_page_size(self, object, /): ...
    def get_ram_mipmap_view_size(self, object, /): ...
    def get_ram_page_size(self, /): ...
    def get_ram_view_size(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_to_texture(self, /): ...
    def get_resident(self, object, /): ...
    def get_simple_image_modified(self, /): ...
    def get_simple_ram_image(self, /): ...
    def get_simple_ram_image_size(self, /): ...
    def get_simple_x_size(self, /): ...
    def get_simple_y_size(self, /): ...
    def get_tex_scale(self, /): ...
    def get_texture_type(self, /): ...
    def get_textures_power_2(): ...
    def get_time(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uncompressed_ram_image(self, /): ...
    def get_usage_hint(self, /): ...
    def get_video_height(self, /): ...
    def get_video_length(self, /): ...
    def get_video_width(self, /): ...
    def get_wrap_u(self, /): ...
    def get_wrap_v(self, /): ...
    def get_wrap_w(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def get_z_size(self, /): ...
    def hasAllRamMipmapImages(self, /): ...
    def hasAlphaFilename(self, /): ...
    def hasAlphaFullpath(self, /): ...
    def hasAutoTextureScale(self, /): ...
    def hasClearColor(self, /): ...
    def hasCompression(self, /): ...
    def hasFilename(self, /): ...
    def hasFullpath(self, /): ...
    def hasName(self, /): ...
    def hasRamImage(self, /): ...
    def hasRamMipmapImage(self, object, /): ...
    def hasSimpleRamImage(self, /): ...
    def hasTexturesPower2(): ...
    def hasUncompressedRamImage(self, /): ...
    def has_all_ram_mipmap_images(self, /): ...
    def has_alpha_filename(self, /): ...
    def has_alpha_fullpath(self, /): ...
    def has_auto_texture_scale(self, /): ...
    def has_clear_color(self, /): ...
    def has_compression(self, /): ...
    def has_filename(self, /): ...
    def has_fullpath(self, /): ...
    def has_name(self, /): ...
    def has_ram_image(self, /): ...
    def has_ram_mipmap_image(self, object, /): ...
    def has_simple_ram_image(self, /): ...
    def has_textures_power_2(): ...
    def has_uncompressed_ram_image(self, /): ...
    image_modified = None
    def isCacheable(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPlaying(self, /): ...
    def isPrepared(self, object, /): ...
    def is_cacheable(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_playing(self, /): ...
    def is_prepared(self, object, /): ...
    keep_ram_image = None
    def load(): ...
    def loadRelated(self, object, /): ...
    def loadSubImage(): ...
    def load_related(self, object, /): ...
    def load_sub_image(): ...
    loaded_from_image = None
    loaded_from_txo = None
    loop = None
    loop_count = None
    magfilter = None
    def makeCopy(self, /): ...
    def makeFromTxo(): ...
    def makeRamImage(self, /): ...
    def makeRamMipmapImage(self, object, /): ...
    def make_copy(self, /): ...
    def make_from_txo(): ...
    def make_ram_image(self, /): ...
    def make_ram_mipmap_image(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    match_framebuffer_format = None
    def mightHaveRamImage(self, /): ...
    def might_have_ram_image(self, /): ...
    minfilter = None
    def modifyRamImage(self, /): ...
    def modifyRamMipmapImage(self, object, /): ...
    def modifySimpleRamImage(self, /): ...
    def modify_ram_image(self, /): ...
    def modify_ram_mipmap_image(self, object, /): ...
    def modify_simple_ram_image(self, /): ...
    name = None
    def newSimpleRamImage(): ...
    def new_simple_ram_image(): ...
    num_components = None
    num_loadable_ram_mipmap_images = None
    num_pages = None
    num_ram_mipmap_images = None
    num_views = None
    orig_file_x_size = None
    orig_file_y_size = None
    orig_file_z_size = None
    def output(self, object, /): ...
    def peek(self, /): ...
    def play(self, /): ...
    play_rate = None
    playing = None
    post_load_store_cache = None
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    properties_modified = None
    quality_level = None
    ram_image_compression = None
    ram_image_size = None
    ram_page_size = None
    ram_view_size = None
    def read(): ...
    def readDds(): ...
    def readKtx(): ...
    def readTxo(): ...
    def read_dds(): ...
    def read_ktx(): ...
    def read_txo(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def reload(self, /): ...
    render_to_texture = None
    def rescaleTexture(self, /): ...
    def rescale_texture(self, /): ...
    def restart(self, /): ...
    def setAlphaFilename(self, object, /): ...
    def setAlphaFullpath(self, object, /): ...
    def setAnisotropicDegree(self, object, /): ...
    def setAutoTextureScale(self, object, /): ...
    def setAuxData(): ...
    def setBorderColor(self, object, /): ...
    def setClearColor(self, object, /): ...
    def setComponentType(self, object, /): ...
    def setCompression(self, object, /): ...
    def setDefaultSampler(self, object, /): ...
    def setFilename(self, object, /): ...
    def setFormat(self, object, /): ...
    def setFullpath(self, object, /): ...
    def setKeepRamImage(self, object, /): ...
    def setLoadedFromImage(): ...
    def setLoadedFromTxo(): ...
    def setLoop(self, object, /): ...
    def setLoopCount(self, object, /): ...
    def setMagfilter(self, object, /): ...
    def setMatchFramebufferFormat(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setName(self, object, /): ...
    def setNumViews(self, object, /): ...
    def setOrigFileSize(): ...
    def setPadSize(): ...
    def setPlayRate(self, object, /): ...
    def setPostLoadStoreCache(self, object, /): ...
    def setQualityLevel(self, object, /): ...
    def setRamImage(): ...
    def setRamImageAs(): ...
    def setRamMipmapImage(): ...
    def setRamMipmapPointerFromInt(): ...
    def setRenderToTexture(self, object, /): ...
    def setSimpleRamImage(): ...
    def setSizePadded(): ...
    def setTexturesPower2(object, /): ...
    def setTime(self, object, /): ...
    def setWrapU(self, object, /): ...
    def setWrapV(self, object, /): ...
    def setWrapW(self, object, /): ...
    def setXSize(self, object, /): ...
    def setYSize(self, object, /): ...
    def setZSize(self, object, /): ...
    def set_alpha_filename(self, object, /): ...
    def set_alpha_fullpath(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_auto_texture_scale(self, object, /): ...
    def set_aux_data(): ...
    def set_border_color(self, object, /): ...
    def set_clear_color(self, object, /): ...
    def set_component_type(self, object, /): ...
    def set_compression(self, object, /): ...
    def set_default_sampler(self, object, /): ...
    def set_filename(self, object, /): ...
    def set_format(self, object, /): ...
    def set_fullpath(self, object, /): ...
    def set_keep_ram_image(self, object, /): ...
    def set_loaded_from_image(): ...
    def set_loaded_from_txo(): ...
    def set_loop(self, object, /): ...
    def set_loop_count(self, object, /): ...
    def set_magfilter(self, object, /): ...
    def set_match_framebuffer_format(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_views(self, object, /): ...
    def set_orig_file_size(): ...
    def set_pad_size(): ...
    def set_play_rate(self, object, /): ...
    def set_post_load_store_cache(self, object, /): ...
    def set_quality_level(self, object, /): ...
    def set_ram_image(): ...
    def set_ram_image_as(): ...
    def set_ram_mipmap_image(): ...
    def set_ram_mipmap_pointer_from_int(): ...
    def set_render_to_texture(self, object, /): ...
    def set_simple_ram_image(): ...
    def set_size_padded(): ...
    def set_textures_power_2(object, /): ...
    def set_time(self, object, /): ...
    def set_wrap_u(self, object, /): ...
    def set_wrap_v(self, object, /): ...
    def set_wrap_w(self, object, /): ...
    def set_x_size(self, object, /): ...
    def set_y_size(self, object, /): ...
    def set_z_size(self, object, /): ...
    def setup1dTexture(): ...
    def setup2dTexture(): ...
    def setup2dTextureArray(): ...
    def setup3dTexture(): ...
    def setupBufferTexture(): ...
    def setupCubeMap(): ...
    def setupCubeMapArray(): ...
    def setupTexture(): ...
    def setup_1d_texture(): ...
    def setup_2d_texture(): ...
    def setup_2d_texture_array(): ...
    def setup_3d_texture(): ...
    def setup_buffer_texture(): ...
    def setup_cube_map(): ...
    def setup_cube_map_array(): ...
    def setup_texture(): ...
    simple_image_modified = None
    simple_ram_image = None
    simple_x_size = None
    simple_y_size = None
    def stop(self, /): ...
    def store(): ...
    def stringComponentType(object, /): ...
    def stringCompressionMode(object, /): ...
    def stringFormat(object, /): ...
    def stringQualityLevel(object, /): ...
    def stringTextureType(object, /): ...
    def string_component_type(object, /): ...
    def string_compression_mode(object, /): ...
    def string_format(object, /): ...
    def string_quality_level(object, /): ...
    def string_texture_type(object, /): ...
    def synchronizeTo(self, object, /): ...
    def synchronize_to(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture_type = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    time = None
    type = None
    def uncompressRamImage(self, /): ...
    def uncompress_ram_image(self, /): ...
    def unref(self, /): ...
    def unsynchronize(self, /): ...
    def upToPower2(object, /): ...
    def up_to_power_2(object, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    usage_hint = None
    def usesMipmaps(self, /): ...
    def uses_mipmaps(self, /): ...
    video_height = None
    video_length = None
    video_width = None
    def wasImageModified(self, object, /): ...
    def was_image_modified(self, object, /): ...
    wrap_u = None
    wrap_v = None
    wrap_w = None
    def write(): ...
    def writeTxo(): ...
    def write_txo(): ...
    x_size = None
    y_size = None
    z_size = None
class MovieVideo:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSubfileInfo(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_subfile_info(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    subfile_info = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class MovieVideoCursor:
    ...
    class Buffer:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def compareTimestamp(self, object, /): ...
        def compare_timestamp(self, object, /): ...
        def getClassType(): ...
        def getRefCount(self, /): ...
        def getTimestamp(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def get_class_type(): ...
        def get_ref_count(self, /): ...
        def get_timestamp(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def ref(self, /): ...
        ref_count = None
        def testRefCountIntegrity(self, /): ...
        def testRefCountNonzero(self, /): ...
        def test_ref_count_integrity(self, /): ...
        def test_ref_count_nonzero(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def unref(self, /): ...
        def upcastToReferenceCount(self, /): ...
        def upcastToTypedObject(self, /): ...
        def upcast_to_ReferenceCount(self, /): ...
        def upcast_to_TypedObject(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def applyToTexture(): ...
    def applyToTextureAlpha(): ...
    def applyToTextureRgb(): ...
    def apply_to_texture(): ...
    def apply_to_texture_alpha(): ...
    def apply_to_texture_rgb(): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fetchBuffer(self, /): ...
    def fetch_buffer(self, /): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumComponents(self, /): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_components(self, /): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setTime(): ...
    def set_time(): ...
    def setupTexture(self, object, /): ...
    def setup_texture(self, object, /): ...
    def sizeX(self, /): ...
    def sizeY(self, /): ...
    def size_x(self, /): ...
    def size_y(self, /): ...
    def streaming(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class MovingPartACMatrixSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPartACScalarSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPartBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPartMatrix:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPartScalar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPart_ACMatrixSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class MovingPart_ACScalarSwitchType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getBound(self, object, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDefaultValue(self, /): ...
    def getForcedChannel(self, /): ...
    def getMaxBound(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bound(self, object, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_default_value(self, /): ...
    def get_forced_channel(self, /): ...
    def get_max_bound(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def outputValue(self, object, /): ...
    def output_value(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class Multifile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addSignature(): ...
    def addSubfile(): ...
    def add_signature(): ...
    def add_subfile(): ...
    def close(self, /): ...
    def closeReadSubfile(object, /): ...
    def close_read_subfile(object, /): ...
    def compareSubfile(): ...
    def compare_subfile(): ...
    def extractSubfile(): ...
    def extractSubfileTo(): ...
    def extract_subfile(): ...
    def extract_subfile_to(): ...
    def findSubfile(self, object, /): ...
    def find_subfile(self, object, /): ...
    def flush(self, /): ...
    def getClassType(): ...
    def getEncryptionAlgorithm(self, /): ...
    def getEncryptionFlag(self, /): ...
    def getEncryptionIterationCount(self, /): ...
    def getEncryptionKeyLength(self, /): ...
    def getEncryptionPassword(self, /): ...
    def getHeaderPrefix(self, /): ...
    def getIndexEnd(self, /): ...
    def getMagicNumber(): ...
    def getMultifileName(self, /): ...
    def getNumSignatures(self, /): ...
    def getNumSubfiles(self, /): ...
    def getRecordTimestamp(self, /): ...
    def getRefCount(self, /): ...
    def getScaleFactor(self, /): ...
    def getSignatureFriendlyName(self, object, /): ...
    def getSignaturePublicKey(self, object, /): ...
    def getSignatureSubjectName(self, object, /): ...
    def getSubfileInternalLength(self, object, /): ...
    def getSubfileInternalStart(self, object, /): ...
    def getSubfileLength(self, object, /): ...
    def getSubfileName(self, object, /): ...
    def getSubfileNames(self, /): ...
    def getSubfileTimestamp(self, object, /): ...
    def getTimestamp(self, /): ...
    def get_class_type(): ...
    def get_encryption_algorithm(self, /): ...
    def get_encryption_flag(self, /): ...
    def get_encryption_iteration_count(self, /): ...
    def get_encryption_key_length(self, /): ...
    def get_encryption_password(self, /): ...
    def get_header_prefix(self, /): ...
    def get_index_end(self, /): ...
    def get_magic_number(): ...
    def get_multifile_name(self, /): ...
    def get_num_signatures(self, /): ...
    def get_num_subfiles(self, /): ...
    def get_record_timestamp(self, /): ...
    def get_ref_count(self, /): ...
    def get_scale_factor(self, /): ...
    def get_signature_friendly_name(self, object, /): ...
    def get_signature_public_key(self, object, /): ...
    def get_signature_subject_name(self, object, /): ...
    def get_subfile_internal_length(self, object, /): ...
    def get_subfile_internal_start(self, object, /): ...
    def get_subfile_length(self, object, /): ...
    def get_subfile_name(self, object, /): ...
    def get_subfile_names(self, /): ...
    def get_subfile_timestamp(self, object, /): ...
    def get_timestamp(self, /): ...
    def hasDirectory(self, object, /): ...
    def has_directory(self, object, /): ...
    def isReadValid(self, /): ...
    def isSubfileCompressed(self, object, /): ...
    def isSubfileEncrypted(self, object, /): ...
    def isSubfileText(self, object, /): ...
    def isWriteValid(self, /): ...
    def is_read_valid(self, /): ...
    def is_subfile_compressed(self, object, /): ...
    def is_subfile_encrypted(self, object, /): ...
    def is_subfile_text(self, object, /): ...
    def is_write_valid(self, /): ...
    def ls(): ...
    magic_number:str = None
    def needsRepack(self, /): ...
    def needs_repack(self, /): ...
    def openRead(): ...
    def openReadSubfile(self, object, /): ...
    def openReadWrite(): ...
    def openWrite(): ...
    def open_read(): ...
    def open_read_subfile(self, object, /): ...
    def open_read_write(): ...
    def open_write(): ...
    def output(self, object, /): ...
    def printSignatureCertificate(): ...
    def print_signature_certificate(): ...
    def readSubfile(self, object, /): ...
    def read_subfile(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeSubfile(self, object, /): ...
    def remove_subfile(self, object, /): ...
    def repack(self, /): ...
    def setEncryptionAlgorithm(self, object, /): ...
    def setEncryptionFlag(self, object, /): ...
    def setEncryptionIterationCount(self, object, /): ...
    def setEncryptionKeyLength(self, object, /): ...
    def setEncryptionPassword(self, object, /): ...
    def setHeaderPrefix(self, object, /): ...
    def setMultifileName(self, object, /): ...
    def setRecordTimestamp(self, object, /): ...
    def setScaleFactor(self, object, /): ...
    def setTimestamp(self, object, /): ...
    def set_encryption_algorithm(self, object, /): ...
    def set_encryption_flag(self, object, /): ...
    def set_encryption_iteration_count(self, object, /): ...
    def set_encryption_key_length(self, object, /): ...
    def set_encryption_password(self, object, /): ...
    def set_header_prefix(self, object, /): ...
    def set_multifile_name(self, object, /): ...
    def set_record_timestamp(self, object, /): ...
    def set_scale_factor(self, object, /): ...
    def set_timestamp(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
    def updateSubfile(): ...
    def update_subfile(): ...
    def validateSignatureCertificate(self, object, /): ...
    def validate_signature_certificate(self, object, /): ...
    def writeSignatureCertificate(): ...
    def write_signature_certificate(): ...
class MultiplexStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def addFile(self, object, /): ...
    def addOstream(): ...
    def addStandardOutput(self, /): ...
    def addSystemDebug(self, /): ...
    def add_file(self, object, /): ...
    def add_ostream(): ...
    def add_standard_output(self, /): ...
    def add_system_debug(self, /): ...
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class MultitexReducer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def flatten(self, object, /): ...
    def scan(): ...
    def setAllowTexMat(self, object, /): ...
    def setTarget(self, object, /): ...
    def setUseGeom(self, object, /): ...
    def set_allow_tex_mat(self, object, /): ...
    def set_target(self, object, /): ...
    def set_use_geom(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Mutex:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tryAcquire(self, /): ...
    def try_acquire(self, /): ...
class MutexDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tryAcquire(self, /): ...
    def try_acquire(self, /): ...
NSDebug:int = None
NSError:int = None
NSFatal:int = None
NSInfo:int = None
NSSpam:int = None
NSUnspecified:int = None
NSWarning:int = None
NS_debug:int = None
NS_error:int = None
NS_fatal:int = None
NS_info:int = None
NS_spam:int = None
NS_unspecified:int = None
NS_warning:int = None
class Namable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class NativeWindowHandle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class OSHandle:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getIntHandle(self, /): ...
        def getRefCount(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def get_class_type(): ...
        def get_int_handle(self, /): ...
        def get_ref_count(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        def ref(self, /): ...
        ref_count = None
        def testRefCountIntegrity(self, /): ...
        def testRefCountNonzero(self, /): ...
        def test_ref_count_integrity(self, /): ...
        def test_ref_count_nonzero(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def unref(self, /): ...
        def upcastToReferenceCount(self, /): ...
        def upcastToTypedObject(self, /): ...
        def upcast_to_ReferenceCount(self, /): ...
        def upcast_to_TypedObject(self, /): ...
    def getClassType(): ...
    def getIntHandle(self, /): ...
    def getOsHandle(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_int_handle(self, /): ...
    def get_os_handle(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeInt(object, /): ...
    def makeSubprocess(object, /): ...
    def make_int(object, /): ...
    def make_subprocess(object, /): ...
    os_handle = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def sendWindowsMessage(): ...
    def send_windows_message(): ...
    def setOsHandle(self, object, /): ...
    def set_os_handle(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class NetAddress:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getAddr(self, /): ...
    def getHash(self, /): ...
    def getIp(self, /): ...
    def getIpComponent(self, object, /): ...
    def getIpString(self, /): ...
    def getPort(self, /): ...
    def get_addr(self, /): ...
    def get_hash(self, /): ...
    def get_ip(self, /): ...
    def get_ip_component(self, object, /): ...
    def get_ip_string(self, /): ...
    def get_port(self, /): ...
    def isAny(self, /): ...
    def is_any(self, /): ...
    def output(self, object, /): ...
    def setAny(self, object, /): ...
    def setBroadcast(self, object, /): ...
    def setHost(): ...
    def setLocalhost(self, object, /): ...
    def setPort(self, object, /): ...
    def set_any(self, object, /): ...
    def set_broadcast(self, object, /): ...
    def set_host(): ...
    def set_localhost(self, object, /): ...
    def set_port(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class NetDatagram:
    ...
    def Bytes(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addBeFloat32(self, object, /): ...
    def addBeFloat64(self, object, /): ...
    def addBeInt16(self, object, /): ...
    def addBeInt32(self, object, /): ...
    def addBeInt64(self, object, /): ...
    def addBeUint16(self, object, /): ...
    def addBeUint32(self, object, /): ...
    def addBeUint64(self, object, /): ...
    def addBlob(self, object, /): ...
    def addBlob32(self, object, /): ...
    def addBool(self, object, /): ...
    def addFixedString(): ...
    def addFloat32(self, object, /): ...
    def addFloat64(self, object, /): ...
    def addInt16(self, object, /): ...
    def addInt32(self, object, /): ...
    def addInt64(self, object, /): ...
    def addInt8(self, object, /): ...
    def addStdfloat(self, object, /): ...
    def addString(self, object, /): ...
    def addString32(self, object, /): ...
    def addUint16(self, object, /): ...
    def addUint32(self, object, /): ...
    def addUint64(self, object, /): ...
    def addUint8(self, object, /): ...
    def addWstring(self, object, /): ...
    def addZString(self, object, /): ...
    def add_be_float32(self, object, /): ...
    def add_be_float64(self, object, /): ...
    def add_be_int16(self, object, /): ...
    def add_be_int32(self, object, /): ...
    def add_be_int64(self, object, /): ...
    def add_be_uint16(self, object, /): ...
    def add_be_uint32(self, object, /): ...
    def add_be_uint64(self, object, /): ...
    def add_blob(self, object, /): ...
    def add_blob32(self, object, /): ...
    def add_bool(self, object, /): ...
    def add_fixed_string(): ...
    def add_float32(self, object, /): ...
    def add_float64(self, object, /): ...
    def add_int16(self, object, /): ...
    def add_int32(self, object, /): ...
    def add_int64(self, object, /): ...
    def add_int8(self, object, /): ...
    def add_stdfloat(self, object, /): ...
    def add_string(self, object, /): ...
    def add_string32(self, object, /): ...
    def add_uint16(self, object, /): ...
    def add_uint32(self, object, /): ...
    def add_uint64(self, object, /): ...
    def add_uint8(self, object, /): ...
    def add_wstring(self, object, /): ...
    def add_z_string(self, object, /): ...
    def appendData(self, object, /): ...
    def append_data(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def copyArray(self, object, /): ...
    def copy_array(self, object, /): ...
    def dumpHex(): ...
    def dump_hex(): ...
    def getAddress(self, /): ...
    def getArray(self, /): ...
    def getClassType(): ...
    def getConnection(self, /): ...
    def getLength(self, /): ...
    def getMessage(self, /): ...
    def getStdfloatDouble(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_address(self, /): ...
    def get_array(self, /): ...
    def get_class_type(): ...
    def get_connection(self, /): ...
    def get_length(self, /): ...
    def get_message(self, /): ...
    def get_stdfloat_double(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def modifyArray(self, /): ...
    def modify_array(self, /): ...
    def output(self, object, /): ...
    def padBytes(self, object, /): ...
    def pad_bytes(self, object, /): ...
    def setAddress(self, object, /): ...
    def setArray(self, object, /): ...
    def setConnection(self, object, /): ...
    def setStdfloatDouble(self, object, /): ...
    def set_address(self, object, /): ...
    def set_array(self, object, /): ...
    def set_connection(self, object, /): ...
    def set_stdfloat_double(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def write(): ...
class NeverFreeMemory:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getTotalAlloc(): ...
    def getTotalUnused(): ...
    def getTotalUsed(): ...
    def get_total_alloc(): ...
    def get_total_unused(): ...
    def get_total_used(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class NodeCachedReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RCache:int = None
    RNode:int = None
    R_cache:int = None
    R_node:int = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getReferencedBits(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_referenced_bits(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def nodeRef(self, /): ...
    def nodeUnref(self, /): ...
    def node_ref(self, /): ...
    def node_unref(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class NodeCullCallbackData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getData(self, /): ...
    def getTrav(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_data(self, /): ...
    def get_trav(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcall(self, /): ...
class NodePath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    ETFail:int = None
    ETNotFound:int = None
    ETOk:int = None
    ETRemoved:int = None
    ET_fail:int = None
    ET_not_found:int = None
    ET_ok:int = None
    ET_removed:int = None
    def addHash(self, object, /): ...
    def add_hash(self, object, /): ...
    def adjustAllPriorities(self, object, /): ...
    def adjust_all_priorities(self, object, /): ...
    ancestors = None
    def anyPath(): ...
    def any_path(): ...
    def applyTextureColors(self, /): ...
    def apply_texture_colors(self, /): ...
    def assign(self, object, /): ...
    def attachNewNode(): ...
    def attach_new_node(): ...
    def calcTightBounds(): ...
    def calc_tight_bounds(): ...
    children = None
    def clear(self, /): ...
    def clearAntialias(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearAudioVolume(self, /): ...
    def clearBillboard(self, /): ...
    def clearBin(self, /): ...
    def clearClipPlane(): ...
    def clearColor(self, /): ...
    def clearColorScale(self, /): ...
    def clearCompass(self, /): ...
    def clearDepthOffset(self, /): ...
    def clearDepthTest(self, /): ...
    def clearDepthWrite(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(self, /): ...
    def clearFog(self, /): ...
    def clearLight(): ...
    def clearLogicOp(self, /): ...
    def clearMat(self, /): ...
    def clearMaterial(self, /): ...
    def clearModelNodes(self, /): ...
    def clearOccluder(): ...
    def clearProjectTexture(self, object, /): ...
    def clearPythonTag(self, object, /): ...
    def clearRenderMode(self, /): ...
    def clearScissor(self, /): ...
    def clearShader(self, /): ...
    def clearShaderInput(self, object, /): ...
    def clearTag(self, object, /): ...
    def clearTexGen(): ...
    def clearTexProjector(): ...
    def clearTexTransform(): ...
    def clearTexture(): ...
    def clearTransform(): ...
    def clearTransparency(self, /): ...
    def clearTwoSided(self, /): ...
    def clear_antialias(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_audio_volume(self, /): ...
    def clear_billboard(self, /): ...
    def clear_bin(self, /): ...
    def clear_clip_plane(): ...
    def clear_color(self, /): ...
    def clear_color_scale(self, /): ...
    def clear_compass(self, /): ...
    def clear_depth_offset(self, /): ...
    def clear_depth_test(self, /): ...
    def clear_depth_write(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(self, /): ...
    def clear_fog(self, /): ...
    def clear_light(): ...
    def clear_logic_op(self, /): ...
    def clear_mat(self, /): ...
    def clear_material(self, /): ...
    def clear_model_nodes(self, /): ...
    def clear_occluder(): ...
    def clear_project_texture(self, object, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_render_mode(self, /): ...
    def clear_scissor(self, /): ...
    def clear_shader(self, /): ...
    def clear_shader_input(self, object, /): ...
    def clear_tag(self, object, /): ...
    def clear_tex_gen(): ...
    def clear_tex_projector(): ...
    def clear_tex_transform(): ...
    def clear_texture(): ...
    def clear_transform(): ...
    def clear_transparency(self, /): ...
    def clear_two_sided(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def composeColorScale(): ...
    def compose_color_scale(): ...
    def copyTo(): ...
    def copy_to(): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def detachNode(): ...
    def detach_node(): ...
    def doBillboardAxis(): ...
    def doBillboardPointEye(): ...
    def doBillboardPointWorld(): ...
    def do_billboard_axis(): ...
    def do_billboard_point_eye(): ...
    def do_billboard_point_world(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    error_type = None
    def fail(): ...
    def find(self, object, /): ...
    def findAllMatches(self, object, /): ...
    def findAllMaterials(): ...
    def findAllPathsTo(self, object, /): ...
    def findAllTexcoords(): ...
    def findAllTextureStages(): ...
    def findAllTextures(): ...
    def findAllVertexColumns(): ...
    def findMaterial(self, object, /): ...
    def findNetPythonTag(self, object, /): ...
    def findNetTag(self, object, /): ...
    def findPathTo(self, object, /): ...
    def findTexture(self, object, /): ...
    def findTextureStage(self, object, /): ...
    def find_all_matches(self, object, /): ...
    def find_all_materials(): ...
    def find_all_paths_to(self, object, /): ...
    def find_all_texcoords(): ...
    def find_all_texture_stages(): ...
    def find_all_textures(): ...
    def find_all_vertex_columns(): ...
    def find_material(self, object, /): ...
    def find_net_python_tag(self, object, /): ...
    def find_net_tag(self, object, /): ...
    def find_path_to(self, object, /): ...
    def find_texture(self, object, /): ...
    def find_texture_stage(self, object, /): ...
    def flattenLight(self, /): ...
    def flattenMedium(self, /): ...
    def flattenStrong(self, /): ...
    def flatten_light(self, /): ...
    def flatten_medium(self, /): ...
    def flatten_strong(self, /): ...
    def forceRecomputeBounds(self, /): ...
    def force_recompute_bounds(self, /): ...
    def getAncestor(): ...
    def getAncestors(self, /): ...
    def getAntialias(self, /): ...
    def getAttrib(self, object, /): ...
    def getAudioVolume(self, /): ...
    def getBinDrawOrder(self, /): ...
    def getBinName(self, /): ...
    def getBounds(): ...
    def getChild(): ...
    def getChildren(): ...
    def getClassType(): ...
    def getCollideMask(self, /): ...
    def getColor(self, /): ...
    def getColorScale(self, /): ...
    def getCommonAncestor(): ...
    def getDepthOffset(self, /): ...
    def getDepthTest(self, /): ...
    def getDepthWrite(self, /): ...
    def getDistance(self, object, /): ...
    def getEffect(self, object, /): ...
    def getEffects(self, /): ...
    def getErrorType(self, /): ...
    def getFog(self, /): ...
    def getH(): ...
    def getHiddenAncestor(): ...
    def getHpr(): ...
    def getInstanceCount(self, /): ...
    def getKey(self, /): ...
    def getLogicOp(self, /): ...
    def getMat(): ...
    def getMaterial(self, /): ...
    def getMaxSearchDepth(): ...
    def getName(self, /): ...
    def getNetAudioVolume(self, /): ...
    def getNetPrevTransform(): ...
    def getNetPythonTag(self, object, /): ...
    def getNetState(): ...
    def getNetTag(self, object, /): ...
    def getNetTransform(): ...
    def getNode(): ...
    def getNodes(self, /): ...
    def getNumChildren(): ...
    def getNumNodes(): ...
    def getP(): ...
    def getParent(): ...
    def getPos(): ...
    def getPosDelta(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getQuat(): ...
    def getR(): ...
    def getRelativePoint(): ...
    def getRelativeVector(): ...
    def getRenderMode(self, /): ...
    def getRenderModePerspective(self, /): ...
    def getRenderModeThickness(self, /): ...
    def getSa(self, /): ...
    def getSb(self, /): ...
    def getScale(): ...
    def getSg(self, /): ...
    def getShader(self, /): ...
    def getShaderInput(self, object, /): ...
    def getShear(): ...
    def getShxy(): ...
    def getShxz(): ...
    def getShyz(): ...
    def getSort(): ...
    def getSr(self, /): ...
    def getStashedAncestor(): ...
    def getStashedChildren(): ...
    def getState(): ...
    def getSx(): ...
    def getSy(): ...
    def getSz(): ...
    def getTag(self, object, /): ...
    def getTagKeys(): ...
    def getTags(self, /): ...
    def getTexGen(self, object, /): ...
    def getTexHpr(): ...
    def getTexOffset(): ...
    def getTexPos(): ...
    def getTexProjectorFrom(self, object, /): ...
    def getTexProjectorTo(self, object, /): ...
    def getTexRotate(): ...
    def getTexScale(): ...
    def getTexScale3d(): ...
    def getTexTransform(): ...
    def getTexture(): ...
    def getTextureSampler(): ...
    def getTightBounds(): ...
    def getTop(): ...
    def getTopNode(): ...
    def getTransform(): ...
    def getTransparency(self, /): ...
    def getTwoSided(self, /): ...
    def getX(): ...
    def getY(): ...
    def getZ(): ...
    def get_ancestor(): ...
    def get_ancestors(self, /): ...
    def get_antialias(self, /): ...
    def get_attrib(self, object, /): ...
    def get_audio_volume(self, /): ...
    def get_bin_draw_order(self, /): ...
    def get_bin_name(self, /): ...
    def get_bounds(): ...
    def get_child(): ...
    def get_children(): ...
    def get_class_type(): ...
    def get_collide_mask(self, /): ...
    def get_color(self, /): ...
    def get_color_scale(self, /): ...
    def get_common_ancestor(): ...
    def get_depth_offset(self, /): ...
    def get_depth_test(self, /): ...
    def get_depth_write(self, /): ...
    def get_distance(self, object, /): ...
    def get_effect(self, object, /): ...
    def get_effects(self, /): ...
    def get_error_type(self, /): ...
    def get_fog(self, /): ...
    def get_h(): ...
    def get_hidden_ancestor(): ...
    def get_hpr(): ...
    def get_instance_count(self, /): ...
    def get_key(self, /): ...
    def get_logic_op(self, /): ...
    def get_mat(): ...
    def get_material(self, /): ...
    def get_max_search_depth(): ...
    def get_name(self, /): ...
    def get_net_audio_volume(self, /): ...
    def get_net_prev_transform(): ...
    def get_net_python_tag(self, object, /): ...
    def get_net_state(): ...
    def get_net_tag(self, object, /): ...
    def get_net_transform(): ...
    def get_node(): ...
    def get_nodes(self, /): ...
    def get_num_children(): ...
    def get_num_nodes(): ...
    def get_p(): ...
    def get_parent(): ...
    def get_pos(): ...
    def get_pos_delta(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_quat(): ...
    def get_r(): ...
    def get_relative_point(): ...
    def get_relative_vector(): ...
    def get_render_mode(self, /): ...
    def get_render_mode_perspective(self, /): ...
    def get_render_mode_thickness(self, /): ...
    def get_sa(self, /): ...
    def get_sb(self, /): ...
    def get_scale(): ...
    def get_sg(self, /): ...
    def get_shader(self, /): ...
    def get_shader_input(self, object, /): ...
    def get_shear(): ...
    def get_shxy(): ...
    def get_shxz(): ...
    def get_shyz(): ...
    def get_sort(): ...
    def get_sr(self, /): ...
    def get_stashed_ancestor(): ...
    def get_stashed_children(): ...
    def get_state(): ...
    def get_sx(): ...
    def get_sy(): ...
    def get_sz(): ...
    def get_tag(self, object, /): ...
    def get_tag_keys(): ...
    def get_tags(self, /): ...
    def get_tex_gen(self, object, /): ...
    def get_tex_hpr(): ...
    def get_tex_offset(): ...
    def get_tex_pos(): ...
    def get_tex_projector_from(self, object, /): ...
    def get_tex_projector_to(self, object, /): ...
    def get_tex_rotate(): ...
    def get_tex_scale(): ...
    def get_tex_scale_3d(): ...
    def get_tex_transform(): ...
    def get_texture(): ...
    def get_texture_sampler(): ...
    def get_tight_bounds(): ...
    def get_top(): ...
    def get_top_node(): ...
    def get_transform(): ...
    def get_transparency(self, /): ...
    def get_two_sided(self, /): ...
    def get_x(): ...
    def get_y(): ...
    def get_z(): ...
    def hasAntialias(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasAudioVolume(self, /): ...
    def hasBillboard(self, /): ...
    def hasBin(self, /): ...
    def hasClipPlane(self, object, /): ...
    def hasClipPlaneOff(): ...
    def hasColor(self, /): ...
    def hasColorScale(self, /): ...
    def hasCompass(self, /): ...
    def hasDepthOffset(self, /): ...
    def hasDepthTest(self, /): ...
    def hasDepthWrite(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFog(self, /): ...
    def hasFogOff(self, /): ...
    def hasLight(self, object, /): ...
    def hasLightOff(): ...
    def hasLogicOp(self, /): ...
    def hasMat(self, /): ...
    def hasMaterial(self, /): ...
    def hasNetPythonTag(self, object, /): ...
    def hasNetTag(self, object, /): ...
    def hasOccluder(self, object, /): ...
    def hasParent(): ...
    def hasPythonTag(self, object, /): ...
    def hasRenderMode(self, /): ...
    def hasScissor(self, /): ...
    def hasTag(self, object, /): ...
    def hasTexGen(self, object, /): ...
    def hasTexProjector(self, object, /): ...
    def hasTexTransform(self, object, /): ...
    def hasTexcoord(self, object, /): ...
    def hasTexture(): ...
    def hasTextureOff(): ...
    def hasTransparency(self, /): ...
    def hasTwoSided(self, /): ...
    def hasVertexColumn(self, object, /): ...
    def has_antialias(self, /): ...
    def has_attrib(self, object, /): ...
    def has_audio_volume(self, /): ...
    def has_billboard(self, /): ...
    def has_bin(self, /): ...
    def has_clip_plane(self, object, /): ...
    def has_clip_plane_off(): ...
    def has_color(self, /): ...
    def has_color_scale(self, /): ...
    def has_compass(self, /): ...
    def has_depth_offset(self, /): ...
    def has_depth_test(self, /): ...
    def has_depth_write(self, /): ...
    def has_effect(self, object, /): ...
    def has_fog(self, /): ...
    def has_fog_off(self, /): ...
    def has_light(self, object, /): ...
    def has_light_off(): ...
    def has_logic_op(self, /): ...
    def has_mat(self, /): ...
    def has_material(self, /): ...
    def has_net_python_tag(self, object, /): ...
    def has_net_tag(self, object, /): ...
    def has_occluder(self, object, /): ...
    def has_parent(): ...
    def has_python_tag(self, object, /): ...
    def has_render_mode(self, /): ...
    def has_scissor(self, /): ...
    def has_tag(self, object, /): ...
    def has_tex_gen(self, object, /): ...
    def has_tex_projector(self, object, /): ...
    def has_tex_transform(self, object, /): ...
    def has_texcoord(self, object, /): ...
    def has_texture(): ...
    def has_texture_off(): ...
    def has_transparency(self, /): ...
    def has_two_sided(self, /): ...
    def has_vertex_column(self, object, /): ...
    def headsUp(): ...
    def heads_up(): ...
    def hide(): ...
    def hideBounds(self, /): ...
    def hide_bounds(self, /): ...
    def instanceTo(): ...
    def instanceUnderNode(): ...
    def instance_to(): ...
    def instance_under_node(): ...
    def isAncestorOf(): ...
    def isEmpty(self, /): ...
    def isHidden(): ...
    def isSameGraph(): ...
    def isSingleton(): ...
    def isStashed(self, /): ...
    def is_ancestor_of(): ...
    def is_empty(self, /): ...
    def is_hidden(): ...
    def is_same_graph(): ...
    def is_singleton(): ...
    def is_stashed(self, /): ...
    def listTags(self, /): ...
    def list_tags(self, /): ...
    def lookAt(): ...
    def look_at(): ...
    def ls(): ...
    name = None
    net_tags = None
    def node(self, /): ...
    nodes = None
    def notFound(): ...
    def not_found(): ...
    def output(self, object, /): ...
    parent = None
    def premungeScene(): ...
    def premunge_scene(): ...
    def prepareScene(self, object, /): ...
    def prepare_scene(self, object, /): ...
    def projectTexture(): ...
    def project_texture(): ...
    python_tags = None
    def removeNode(): ...
    def remove_node(): ...
    def removed(): ...
    def reparentTo(): ...
    def reparent_to(): ...
    def replaceMaterial(): ...
    def replaceTexture(): ...
    def replace_material(): ...
    def replace_texture(): ...
    def reverseLs(): ...
    def reverse_ls(): ...
    def setAllColorScale(): ...
    def setAlphaScale(): ...
    def setAntialias(): ...
    def setAttrib(): ...
    def setAudioVolume(): ...
    def setAudioVolumeOff(): ...
    def setBillboardAxis(): ...
    def setBillboardPointEye(): ...
    def setBillboardPointWorld(): ...
    def setBin(): ...
    def setClipPlane(): ...
    def setClipPlaneOff(): ...
    def setCollideMask(): ...
    def setColor(): ...
    def setColorOff(): ...
    def setColorScale(): ...
    def setColorScaleOff(): ...
    def setCompass(): ...
    def setDepthOffset(): ...
    def setDepthTest(): ...
    def setDepthWrite(): ...
    def setEffect(self, object, /): ...
    def setEffects(self, object, /): ...
    def setFluidPos(): ...
    def setFluidX(): ...
    def setFluidY(): ...
    def setFluidZ(): ...
    def setFog(): ...
    def setFogOff(): ...
    def setH(): ...
    def setHpr(): ...
    def setHprScale(): ...
    def setInstanceCount(self, object, /): ...
    def setLight(): ...
    def setLightOff(): ...
    def setLogicOp(): ...
    def setMat(): ...
    def setMaterial(): ...
    def setMaterialOff(): ...
    def setMaxSearchDepth(object, /): ...
    def setName(self, object, /): ...
    def setOccluder(self, object, /): ...
    def setP(): ...
    def setPos(): ...
    def setPosHpr(): ...
    def setPosHprScale(): ...
    def setPosHprScaleShear(): ...
    def setPosQuat(): ...
    def setPosQuatScale(): ...
    def setPosQuatScaleShear(): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setQuat(): ...
    def setQuatScale(): ...
    def setR(): ...
    def setRenderMode(): ...
    def setRenderModeFilled(): ...
    def setRenderModeFilledWireframe(): ...
    def setRenderModePerspective(): ...
    def setRenderModeThickness(): ...
    def setRenderModeWireframe(): ...
    def setSa(self, object, /): ...
    def setSb(self, object, /): ...
    def setScale(): ...
    def setScissor(): ...
    def setSg(self, object, /): ...
    def setShader(): ...
    def setShaderAuto(): ...
    def setShaderInput(): ...
    def setShaderInputs(): ...
    def setShaderOff(): ...
    def setShear(): ...
    def setShxy(): ...
    def setShxz(): ...
    def setShyz(): ...
    def setSr(self, object, /): ...
    def setState(): ...
    def setSx(): ...
    def setSy(): ...
    def setSz(): ...
    def setTag(): ...
    def setTexGen(): ...
    def setTexHpr(): ...
    def setTexOffset(): ...
    def setTexPos(): ...
    def setTexProjector(): ...
    def setTexRotate(): ...
    def setTexScale(): ...
    def setTexTransform(): ...
    def setTexture(): ...
    def setTextureOff(): ...
    def setTransform(): ...
    def setTransparency(): ...
    def setTwoSided(): ...
    def setX(): ...
    def setY(): ...
    def setZ(): ...
    def set_all_color_scale(): ...
    def set_alpha_scale(): ...
    def set_antialias(): ...
    def set_attrib(): ...
    def set_audio_volume(): ...
    def set_audio_volume_off(): ...
    def set_billboard_axis(): ...
    def set_billboard_point_eye(): ...
    def set_billboard_point_world(): ...
    def set_bin(): ...
    def set_clip_plane(): ...
    def set_clip_plane_off(): ...
    def set_collide_mask(): ...
    def set_color(): ...
    def set_color_off(): ...
    def set_color_scale(): ...
    def set_color_scale_off(): ...
    def set_compass(): ...
    def set_depth_offset(): ...
    def set_depth_test(): ...
    def set_depth_write(): ...
    def set_effect(self, object, /): ...
    def set_effects(self, object, /): ...
    def set_fluid_pos(): ...
    def set_fluid_x(): ...
    def set_fluid_y(): ...
    def set_fluid_z(): ...
    def set_fog(): ...
    def set_fog_off(): ...
    def set_h(): ...
    def set_hpr(): ...
    def set_hpr_scale(): ...
    def set_instance_count(self, object, /): ...
    def set_light(): ...
    def set_light_off(): ...
    def set_logic_op(): ...
    def set_mat(): ...
    def set_material(): ...
    def set_material_off(): ...
    def set_max_search_depth(object, /): ...
    def set_name(self, object, /): ...
    def set_occluder(self, object, /): ...
    def set_p(): ...
    def set_pos(): ...
    def set_pos_hpr(): ...
    def set_pos_hpr_scale(): ...
    def set_pos_hpr_scale_shear(): ...
    def set_pos_quat(): ...
    def set_pos_quat_scale(): ...
    def set_pos_quat_scale_shear(): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_quat(): ...
    def set_quat_scale(): ...
    def set_r(): ...
    def set_render_mode(): ...
    def set_render_mode_filled(): ...
    def set_render_mode_filled_wireframe(): ...
    def set_render_mode_perspective(): ...
    def set_render_mode_thickness(): ...
    def set_render_mode_wireframe(): ...
    def set_sa(self, object, /): ...
    def set_sb(self, object, /): ...
    def set_scale(): ...
    def set_scissor(): ...
    def set_sg(self, object, /): ...
    def set_shader(): ...
    def set_shader_auto(): ...
    def set_shader_input(): ...
    def set_shader_inputs(): ...
    def set_shader_off(): ...
    def set_shear(): ...
    def set_shxy(): ...
    def set_shxz(): ...
    def set_shyz(): ...
    def set_sr(self, object, /): ...
    def set_state(): ...
    def set_sx(): ...
    def set_sy(): ...
    def set_sz(): ...
    def set_tag(): ...
    def set_tex_gen(): ...
    def set_tex_hpr(): ...
    def set_tex_offset(): ...
    def set_tex_pos(): ...
    def set_tex_projector(): ...
    def set_tex_rotate(): ...
    def set_tex_scale(): ...
    def set_tex_transform(): ...
    def set_texture(): ...
    def set_texture_off(): ...
    def set_transform(): ...
    def set_transparency(): ...
    def set_two_sided(): ...
    def set_x(): ...
    def set_y(): ...
    def set_z(): ...
    def show(): ...
    def showBounds(self, /): ...
    def showThrough(): ...
    def showTightBounds(self, /): ...
    def show_bounds(self, /): ...
    def show_through(): ...
    def show_tight_bounds(self, /): ...
    sort = None
    def stash(): ...
    def stashTo(): ...
    def stash_to(): ...
    stashed_children = None
    tags = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unifyTextureStages(self, object, /): ...
    def unify_texture_stages(self, object, /): ...
    def unstash(): ...
    def unstashAll(): ...
    def unstash_all(): ...
    def verifyComplete(): ...
    def verify_complete(): ...
    def writeBamFile(self, object, /): ...
    def writeBamStream(self, object, /): ...
    def writeBounds(self, object, /): ...
    def write_bam_file(self, object, /): ...
    def write_bam_stream(self, object, /): ...
    def write_bounds(self, object, /): ...
    def wrtReparentTo(): ...
    def wrt_reparent_to(): ...
class NodePathCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addPath(self, object, /): ...
    def addPathsFrom(self, object, /): ...
    def add_path(self, object, /): ...
    def add_paths_from(self, object, /): ...
    def append(self, object, /): ...
    def calcTightBounds(): ...
    def calc_tight_bounds(): ...
    def clear(self, /): ...
    def composeColorScale(): ...
    def compose_color_scale(): ...
    def detach(self, /): ...
    def extend(self, object, /): ...
    def findAllMatches(self, object, /): ...
    def find_all_matches(self, object, /): ...
    def getCollideMask(self, /): ...
    def getNumPaths(self, /): ...
    def getPath(self, object, /): ...
    def getPaths(self, /): ...
    def getTightBounds(self, /): ...
    def get_collide_mask(self, /): ...
    def get_num_paths(self, /): ...
    def get_path(self, object, /): ...
    def get_paths(self, /): ...
    def get_tight_bounds(self, /): ...
    def hasPath(self, object, /): ...
    def has_path(self, object, /): ...
    def hide(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def ls(): ...
    def output(self, object, /): ...
    def removeDuplicatePaths(self, /): ...
    def removePath(self, object, /): ...
    def removePathsFrom(self, object, /): ...
    def remove_duplicate_paths(self, /): ...
    def remove_path(self, object, /): ...
    def remove_paths_from(self, object, /): ...
    def reparentTo(self, object, /): ...
    def reparent_to(self, object, /): ...
    def reserve(self, object, /): ...
    def setAttrib(): ...
    def setCollideMask(): ...
    def setColor(): ...
    def setColorScale(): ...
    def setTexture(): ...
    def setTextureOff(): ...
    def set_attrib(): ...
    def set_collide_mask(): ...
    def set_color(): ...
    def set_color_scale(): ...
    def set_texture(): ...
    def set_texture_off(): ...
    def show(self, /): ...
    def stash(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unstash(self, /): ...
    def write(): ...
    def wrtReparentTo(self, object, /): ...
    def wrt_reparent_to(self, object, /): ...
class NodeReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def nodeRef(self, /): ...
    def nodeUnref(self, /): ...
    def nodeUnrefOnly(self, /): ...
    def node_ref(self, /): ...
    def node_unref(self, /): ...
    def node_unref_only(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class NodeVertexTransform:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def accumulateMatrix(): ...
    def accumulate_matrix(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getGlobalModified(object, /): ...
    def getMatrix(self, object, /): ...
    def getModified(): ...
    def getNextModified(object, /): ...
    def getNode(self, /): ...
    def getPrev(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_global_modified(object, /): ...
    def get_matrix(self, object, /): ...
    def get_modified(): ...
    def get_next_modified(object, /): ...
    def get_node(self, /): ...
    def get_prev(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def multMatrix(): ...
    def mult_matrix(): ...
    node = None
    def output(self, object, /): ...
    prev = None
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class Notify:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearAssertFailed(self, /): ...
    def clearAssertHandler(self, /): ...
    def clear_assert_failed(self, /): ...
    def clear_assert_handler(self, /): ...
    def getAssertErrorMessage(self, /): ...
    def getCategory(): ...
    def getOstreamPtr(self, /): ...
    def getTopCategory(self, /): ...
    def get_assert_error_message(self, /): ...
    def get_category(): ...
    def get_ostream_ptr(self, /): ...
    def get_top_category(self, /): ...
    def hasAssertFailed(self, /): ...
    def hasAssertHandler(self, /): ...
    def has_assert_failed(self, /): ...
    def has_assert_handler(self, /): ...
    def null(): ...
    def out(): ...
    def ptr(): ...
    def setOstreamPtr(): ...
    def set_ostream_ptr(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeString(object, /): ...
    def write_string(object, /): ...
class NotifyCategory:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FClosed:int = None
    FDconfig:int = None
    FDynamic:int = None
    FOpen:int = None
    FTrustLevelMask:int = None
    F_closed:int = None
    F_dconfig:int = None
    F_dynamic:int = None
    F_open:int = None
    F_trust_level_mask:int = None
    VTBool:int = None
    VTColor:int = None
    VTDouble:int = None
    VTEnum:int = None
    VTFilename:int = None
    VTInt:int = None
    VTInt64:int = None
    VTList:int = None
    VTSearchPath:int = None
    VTString:int = None
    VTUndefined:int = None
    VT_bool:int = None
    VT_color:int = None
    VT_double:int = None
    VT_enum:int = None
    VT_filename:int = None
    VT_int:int = None
    VT_int64:int = None
    VT_list:int = None
    VT_search_path:int = None
    VT_string:int = None
    VT_undefined:int = None
    basename = None
    children = None
    def debug(): ...
    def error(): ...
    def fatal(): ...
    fullname = None
    def getBasename(self, /): ...
    def getChild(self, object, /): ...
    def getChildren(self, /): ...
    def getFullname(self, /): ...
    def getNumChildren(self, /): ...
    def getSeverity(self, /): ...
    def get_basename(self, /): ...
    def get_child(self, object, /): ...
    def get_children(self, /): ...
    def get_fullname(self, /): ...
    def get_num_children(self, /): ...
    def get_severity(self, /): ...
    def info(): ...
    def isDebug(self, /): ...
    def isError(self, /): ...
    def isFatal(self, /): ...
    def isInfo(self, /): ...
    def isOn(self, object, /): ...
    def isSpam(self, /): ...
    def isWarning(self, /): ...
    def is_debug(self, /): ...
    def is_error(self, /): ...
    def is_fatal(self, /): ...
    def is_info(self, /): ...
    def is_on(self, object, /): ...
    def is_spam(self, /): ...
    def is_warning(self, /): ...
    def out(): ...
    def setServerDelta(object, /): ...
    def setSeverity(self, object, /): ...
    def set_server_delta(object, /): ...
    def set_severity(self, object, /): ...
    severity = None
    def spam(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConfigFlags(self, /): ...
    def upcast_to_ConfigFlags(self, /): ...
    def warning(): ...
class NurbsCurve:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjustPoint(): ...
    def adjustPt(): ...
    def adjustTangent(): ...
    def adjust_draw_mask(): ...
    def adjust_point(): ...
    def adjust_pt(): ...
    def adjust_tangent(): ...
    all_camera_mask = None
    def appendCv(): ...
    def append_cv(): ...
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def calcLength(): ...
    def calc_length(): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findLength(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_length(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def get2ndtangent(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurveType(self, /): ...
    def getCv(self, object, /): ...
    def getCvPoint(self, object, /): ...
    def getCvWeight(self, object, /): ...
    def getCvs(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKnot(self, object, /): ...
    def getKnots(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxT(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumCvs(self, /): ...
    def getNumDimensions(self, /): ...
    def getNumKnots(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOrder(self, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(): ...
    def getPrevTransform(): ...
    def getPt(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTangent(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_2ndtangent(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve_type(self, /): ...
    def get_cv(self, object, /): ...
    def get_cv_point(self, object, /): ...
    def get_cv_weight(self, object, /): ...
    def get_cvs(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_knot(self, object, /): ...
    def get_knots(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_t(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_cvs(self, /): ...
    def get_num_dimensions(self, /): ...
    def get_num_knots(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_order(self, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(): ...
    def get_prev_transform(): ...
    def get_pt(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tangent(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def insertCv(self, object, /): ...
    def insert_cv(self, object, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeAllCvs(self, /): ...
    def removeChild(): ...
    def removeCv(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_all_cvs(self, /): ...
    def remove_child(): ...
    def remove_cv(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurveType(self, object, /): ...
    def setCv(): ...
    def setCvPoint(): ...
    def setCvWeight(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setKnot(): ...
    def setName(self, object, /): ...
    def setNumDimensions(self, object, /): ...
    def setOrder(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve_type(self, object, /): ...
    def set_cv(): ...
    def set_cv_point(): ...
    def set_cv_weight(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_knot(): ...
    def set_name(self, object, /): ...
    def set_num_dimensions(self, object, /): ...
    def set_order(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stitch(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToNurbsCurveInterface(self, /): ...
    def upcastToPiecewiseCurve(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_NurbsCurveInterface(self, /): ...
    def upcast_to_PiecewiseCurve(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeCv(): ...
    def writeEgg(): ...
    def write_cv(): ...
    def write_egg(): ...
class NurbsCurveEvaluator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def evaluate(): ...
    def getClassType(): ...
    def getExtendedVertex(): ...
    def getKnot(self, object, /): ...
    def getKnots(self, /): ...
    def getNumKnots(self, /): ...
    def getNumSegments(self, /): ...
    def getNumVertices(self, /): ...
    def getOrder(self, /): ...
    def getRefCount(self, /): ...
    def getVertex(): ...
    def getVertexSpace(): ...
    def getVertices(self, /): ...
    def get_class_type(): ...
    def get_extended_vertex(): ...
    def get_knot(self, object, /): ...
    def get_knots(self, /): ...
    def get_num_knots(self, /): ...
    def get_num_segments(self, /): ...
    def get_num_vertices(self, /): ...
    def get_order(self, /): ...
    def get_ref_count(self, /): ...
    def get_vertex(): ...
    def get_vertex_space(): ...
    def get_vertices(self, /): ...
    def normalizeKnots(self, /): ...
    def normalize_knots(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def reset(self, object, /): ...
    def setExtendedVertex(): ...
    def setExtendedVertices(): ...
    def setKnot(): ...
    def setOrder(self, object, /): ...
    def setVertex(): ...
    def setVertexSpace(): ...
    def set_extended_vertex(): ...
    def set_extended_vertices(): ...
    def set_knot(): ...
    def set_order(self, object, /): ...
    def set_vertex(): ...
    def set_vertex_space(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class NurbsCurveInterface:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def appendCv(): ...
    def append_cv(): ...
    def getClassType(): ...
    def getCv(self, object, /): ...
    def getCvPoint(self, object, /): ...
    def getCvWeight(self, object, /): ...
    def getCvs(self, /): ...
    def getKnot(self, object, /): ...
    def getKnots(self, /): ...
    def getNumCvs(self, /): ...
    def getNumKnots(self, /): ...
    def getOrder(self, /): ...
    def get_class_type(): ...
    def get_cv(self, object, /): ...
    def get_cv_point(self, object, /): ...
    def get_cv_weight(self, object, /): ...
    def get_cvs(self, /): ...
    def get_knot(self, object, /): ...
    def get_knots(self, /): ...
    def get_num_cvs(self, /): ...
    def get_num_knots(self, /): ...
    def get_order(self, /): ...
    def insertCv(self, object, /): ...
    def insert_cv(self, object, /): ...
    def removeAllCvs(self, /): ...
    def removeCv(self, object, /): ...
    def remove_all_cvs(self, /): ...
    def remove_cv(self, object, /): ...
    def setCv(): ...
    def setCvPoint(): ...
    def setCvWeight(): ...
    def setKnot(): ...
    def setOrder(self, object, /): ...
    def set_cv(): ...
    def set_cv_point(): ...
    def set_cv_weight(): ...
    def set_knot(): ...
    def set_order(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def writeCv(): ...
    def write_cv(): ...
class NurbsCurveResult:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def adaptiveSample(self, object, /): ...
    def adaptive_sample(self, object, /): ...
    def evalExtendedPoint(): ...
    def evalExtendedPoints(): ...
    def evalPoint(): ...
    def evalSegmentExtendedPoint(): ...
    def evalSegmentExtendedPoints(): ...
    def evalSegmentPoint(): ...
    def evalSegmentTangent(): ...
    def evalTangent(): ...
    def eval_extended_point(): ...
    def eval_extended_points(): ...
    def eval_point(): ...
    def eval_segment_extended_point(): ...
    def eval_segment_extended_points(): ...
    def eval_segment_point(): ...
    def eval_segment_tangent(): ...
    def eval_tangent(): ...
    def getClassType(): ...
    def getEndT(self, /): ...
    def getNumSamples(self, /): ...
    def getNumSegments(self, /): ...
    def getRefCount(self, /): ...
    def getSamplePoint(self, object, /): ...
    def getSamplePoints(self, /): ...
    def getSampleT(self, object, /): ...
    def getSampleTs(self, /): ...
    def getSegmentT(): ...
    def getStartT(self, /): ...
    def get_class_type(): ...
    def get_end_t(self, /): ...
    def get_num_samples(self, /): ...
    def get_num_segments(self, /): ...
    def get_ref_count(self, /): ...
    def get_sample_point(self, object, /): ...
    def get_sample_points(self, /): ...
    def get_sample_t(self, object, /): ...
    def get_sample_ts(self, /): ...
    def get_segment_t(): ...
    def get_start_t(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class NurbsSurfaceEvaluator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def evaluate(): ...
    def getClassType(): ...
    def getExtendedVertex(): ...
    def getNumUKnots(self, /): ...
    def getNumUSegments(self, /): ...
    def getNumUVertices(self, /): ...
    def getNumVKnots(self, /): ...
    def getNumVSegments(self, /): ...
    def getNumVVertices(self, /): ...
    def getRefCount(self, /): ...
    def getUKnot(self, object, /): ...
    def getUKnots(self, /): ...
    def getUOrder(self, /): ...
    def getVKnot(self, object, /): ...
    def getVKnots(self, /): ...
    def getVOrder(self, /): ...
    def getVertex(): ...
    def getVertexSpace(): ...
    def get_class_type(): ...
    def get_extended_vertex(): ...
    def get_num_u_knots(self, /): ...
    def get_num_u_segments(self, /): ...
    def get_num_u_vertices(self, /): ...
    def get_num_v_knots(self, /): ...
    def get_num_v_segments(self, /): ...
    def get_num_v_vertices(self, /): ...
    def get_ref_count(self, /): ...
    def get_u_knot(self, object, /): ...
    def get_u_knots(self, /): ...
    def get_u_order(self, /): ...
    def get_v_knot(self, object, /): ...
    def get_v_knots(self, /): ...
    def get_v_order(self, /): ...
    def get_vertex(): ...
    def get_vertex_space(): ...
    def normalizeUKnots(self, /): ...
    def normalizeVKnots(self, /): ...
    def normalize_u_knots(self, /): ...
    def normalize_v_knots(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def reset(): ...
    def setExtendedVertex(): ...
    def setExtendedVertices(): ...
    def setUKnot(): ...
    def setUOrder(self, object, /): ...
    def setVKnot(): ...
    def setVOrder(self, object, /): ...
    def setVertex(): ...
    def setVertexSpace(): ...
    def set_extended_vertex(): ...
    def set_extended_vertices(): ...
    def set_u_knot(): ...
    def set_u_order(self, object, /): ...
    def set_v_knot(): ...
    def set_v_order(self, object, /): ...
    def set_vertex(): ...
    def set_vertex_space(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    u_knots = None
    u_order = None
    def unref(self, /): ...
    v_knots = None
    v_order = None
class NurbsSurfaceResult:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def evalExtendedPoint(): ...
    def evalExtendedPoints(): ...
    def evalNormal(): ...
    def evalPoint(): ...
    def evalSegmentExtendedPoint(): ...
    def evalSegmentExtendedPoints(): ...
    def evalSegmentNormal(): ...
    def evalSegmentPoint(): ...
    def eval_extended_point(): ...
    def eval_extended_points(): ...
    def eval_normal(): ...
    def eval_point(): ...
    def eval_segment_extended_point(): ...
    def eval_segment_extended_points(): ...
    def eval_segment_normal(): ...
    def eval_segment_point(): ...
    def getClassType(): ...
    def getEndU(self, /): ...
    def getEndV(self, /): ...
    def getNumUSegments(self, /): ...
    def getNumVSegments(self, /): ...
    def getRefCount(self, /): ...
    def getSegmentU(): ...
    def getSegmentV(): ...
    def getStartU(self, /): ...
    def getStartV(self, /): ...
    def get_class_type(): ...
    def get_end_u(self, /): ...
    def get_end_v(self, /): ...
    def get_num_u_segments(self, /): ...
    def get_num_v_segments(self, /): ...
    def get_ref_count(self, /): ...
    def get_segment_u(): ...
    def get_segment_v(): ...
    def get_start_u(self, /): ...
    def get_start_v(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class OCompressStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class OEncryptStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    algorithm = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    iteration_count = None
    key_length = None
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def setAlgorithm(self, object, /): ...
    def setIterationCount(self, object, /): ...
    def setKeyLength(self, object, /): ...
    def set_algorithm(self, object, /): ...
    def set_iteration_count(self, object, /): ...
    def set_key_length(self, object, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class OFileStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class OSocketStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    def considerFlush(self, /): ...
    def consider_flush(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def getCollectTcp(self, /): ...
    def getCollectTcpInterval(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_collect_tcp(self, /): ...
    def get_collect_tcp_interval(self, /): ...
    def get_tcp_header_size(self, /): ...
    def good(self, /): ...
    def isClosed(self, /): ...
    def is_closed(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def sendDatagram(self, object, /): ...
    def send_datagram(self, object, /): ...
    def setCollectTcp(self, object, /): ...
    def setCollectTcpInterval(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_collect_tcp(self, object, /): ...
    def set_collect_tcp_interval(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToOstream(self, /): ...
    def upcastToSSWriter(self, /): ...
    def upcast_to_SSWriter(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_ostream(self, /): ...
class OStreamWrapper:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def getOstream(self, /): ...
    def get_ostream(self, /): ...
    ostream = None
    def release(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToStreamWrapperBase(self, /): ...
    def upcast_to_StreamWrapperBase(self, /): ...
class OSubStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class OccluderEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addOnOccluder(self, object, /): ...
    def add_on_occluder(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getNumOnOccluders(self, /): ...
    def getOnOccluder(self, object, /): ...
    def getOnOccluders(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_num_on_occluders(self, /): ...
    def get_on_occluder(self, object, /): ...
    def get_on_occluders(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasOnOccluder(self, object, /): ...
    def has_on_occluder(self, object, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeOnOccluder(self, object, /): ...
    def remove_on_occluder(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class OccluderNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    double_sided = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMinCoverage(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumVertices(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVertex(self, object, /): ...
    def getVertices(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_min_coverage(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_vertices(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_vertex(self, object, /): ...
    def get_vertices(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isDoubleSided(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_double_sided(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    min_coverage = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setDoubleSided(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMinCoverage(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVertex(): ...
    def setVertices(): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_double_sided(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_min_coverage(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_vertex(): ...
    def set_vertices(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    vertices = None
    def write(): ...
class Ofstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class OmniBoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class OpenSSLWrapper:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearCertificates(self, /): ...
    def clear_certificates(self, /): ...
    def getGlobalPtr(): ...
    def get_global_ptr(): ...
    def loadCertificates(self, object, /): ...
    def loadCertificatesFromDerRam(): ...
    def loadCertificatesFromPemRam(): ...
    def load_certificates(self, object, /): ...
    def load_certificates_from_der_ram(): ...
    def load_certificates_from_pem_ram(): ...
    def notifyDebugSslErrors(self, /): ...
    def notifySslErrors(self, /): ...
    def notify_debug_ssl_errors(self, /): ...
    def notify_ssl_errors(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class OpusAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class OpusAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class OrthographicLens:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FCAspectRatio:int = None
    FCCameraPlane:int = None
    FCKeystone:int = None
    FCOffAxis:int = None
    FCRoll:int = None
    FCShear:int = None
    FC_aspect_ratio:int = None
    FC_camera_plane:int = None
    FC_keystone:int = None
    FC_off_axis:int = None
    FC_roll:int = None
    FC_shear:int = None
    SCLeft:int = None
    SCMono:int = None
    SCRight:int = None
    SCStereo:int = None
    SC_left:int = None
    SC_mono:int = None
    SC_right:int = None
    SC_stereo:int = None
    aspect_ratio = None
    change_event = None
    def clear(self, /): ...
    def clearCustomFilmMat(self, /): ...
    def clearKeystone(self, /): ...
    def clearViewMat(self, /): ...
    def clear_custom_film_mat(self, /): ...
    def clear_keystone(self, /): ...
    def clear_view_mat(self, /): ...
    convergence_distance = None
    coordinate_system = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def extrude(): ...
    def extrudeDepth(): ...
    def extrudeVec(): ...
    def extrude_depth(): ...
    def extrude_vec(): ...
    far = None
    def fillin(): ...
    film_offset = None
    film_size = None
    focal_length = None
    fov = None
    def getAspectRatio(self, /): ...
    def getBamModified(self, /): ...
    def getChangeEvent(self, /): ...
    def getClassType(): ...
    def getConvergenceDistance(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getCustomFilmMat(self, /): ...
    def getDefaultFar(): ...
    def getDefaultNear(): ...
    def getFar(self, /): ...
    def getFilmMat(self, /): ...
    def getFilmMatInv(self, /): ...
    def getFilmOffset(self, /): ...
    def getFilmSize(self, /): ...
    def getFocalLength(self, /): ...
    def getFov(self, /): ...
    def getHfov(self, /): ...
    def getInterocularDistance(self, /): ...
    def getKeystone(self, /): ...
    def getLastChange(self, /): ...
    def getLensMat(self, /): ...
    def getLensMatInv(self, /): ...
    def getMinFov(self, /): ...
    def getNear(self, /): ...
    def getNodalPoint(self, /): ...
    def getProjectionMat(): ...
    def getProjectionMatInv(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUpVector(self, /): ...
    def getVfov(self, /): ...
    def getViewHpr(self, /): ...
    def getViewMat(self, /): ...
    def getViewVector(self, /): ...
    def get_aspect_ratio(self, /): ...
    def get_bam_modified(self, /): ...
    def get_change_event(self, /): ...
    def get_class_type(): ...
    def get_convergence_distance(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_custom_film_mat(self, /): ...
    def get_default_far(): ...
    def get_default_near(): ...
    def get_far(self, /): ...
    def get_film_mat(self, /): ...
    def get_film_mat_inv(self, /): ...
    def get_film_offset(self, /): ...
    def get_film_size(self, /): ...
    def get_focal_length(self, /): ...
    def get_fov(self, /): ...
    def get_hfov(self, /): ...
    def get_interocular_distance(self, /): ...
    def get_keystone(self, /): ...
    def get_last_change(self, /): ...
    def get_lens_mat(self, /): ...
    def get_lens_mat_inv(self, /): ...
    def get_min_fov(self, /): ...
    def get_near(self, /): ...
    def get_nodal_point(self, /): ...
    def get_projection_mat(): ...
    def get_projection_mat_inv(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_up_vector(self, /): ...
    def get_vfov(self, /): ...
    def get_view_hpr(self, /): ...
    def get_view_mat(self, /): ...
    def get_view_vector(self, /): ...
    interocular_distance = None
    def isExactType(self, object, /): ...
    def isLinear(self, /): ...
    def isOfType(self, object, /): ...
    def isOrthographic(self, /): ...
    def isPerspective(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_linear(self, /): ...
    def is_of_type(self, object, /): ...
    def is_orthographic(self, /): ...
    def is_perspective(self, /): ...
    keystone = None
    def makeBounds(self, /): ...
    def makeCopy(self, /): ...
    def makeGeometry(self, /): ...
    def make_bounds(self, /): ...
    def make_copy(self, /): ...
    def make_geometry(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    min_fov = None
    near = None
    nodal_point = None
    def output(self, object, /): ...
    def project(): ...
    def recomputeAll(self, /): ...
    def recompute_all(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAspectRatio(self, object, /): ...
    def setChangeEvent(self, object, /): ...
    def setConvergenceDistance(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setCustomFilmMat(self, object, /): ...
    def setFar(self, object, /): ...
    def setFilmOffset(): ...
    def setFilmSize(): ...
    def setFocalLength(self, object, /): ...
    def setFov(): ...
    def setFrustumFromCorners(): ...
    def setInterocularDistance(self, object, /): ...
    def setKeystone(self, object, /): ...
    def setMinFov(self, object, /): ...
    def setNear(self, object, /): ...
    def setNearFar(): ...
    def setViewHpr(): ...
    def setViewMat(self, object, /): ...
    def setViewVector(): ...
    def set_aspect_ratio(self, object, /): ...
    def set_change_event(self, object, /): ...
    def set_convergence_distance(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_custom_film_mat(self, object, /): ...
    def set_far(self, object, /): ...
    def set_film_offset(): ...
    def set_film_size(): ...
    def set_focal_length(self, object, /): ...
    def set_fov(): ...
    def set_frustum_from_corners(): ...
    def set_interocular_distance(self, object, /): ...
    def set_keystone(self, object, /): ...
    def set_min_fov(self, object, /): ...
    def set_near(self, object, /): ...
    def set_near_far(): ...
    def set_view_hpr(): ...
    def set_view_mat(self, object, /): ...
    def set_view_vector(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    view_hpr = None
    view_mat = None
    def write(): ...
class Ostream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
PCTHPR:int = None
PCTNONE:int = None
PCTT:int = None
PCTXYZ:int = None
PCT_HPR:int = None
PCT_NONE:int = None
PCT_T:int = None
PCT_XYZ:int = None
class PGButton:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    SDepressed:int = None
    SInactive:int = None
    SReady:int = None
    SRollover:int = None
    S_depressed:int = None
    S_inactive:int = None
    S_ready:int = None
    S_rollover:int = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addClickButton(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_click_button(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    click_prefix:str = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getClickEvent(self, object, /): ...
    def getClickPrefix(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_click_event(self, object, /): ...
    def get_click_prefix(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasClickButton(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_click_button(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isButtonDown(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_button_down(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeClickButton(self, object, /): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_click_button(self, object, /): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setBackgroundFocus(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_background_focus(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def setup(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGEntry:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    SFocus:int = None
    SInactive:int = None
    SNoFocus:int = None
    S_focus:int = None
    S_inactive:int = None
    S_no_focus:int = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearCursorDef(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_cursor_def(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAcceptEvent(self, object, /): ...
    def getAcceptFailedEvent(self, object, /): ...
    def getAcceptFailedPrefix(): ...
    def getAcceptPrefix(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBlinkRate(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCandidateActive(self, /): ...
    def getCandidateInactive(self, /): ...
    def getCharacter(self, object, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCursorDef(self, /): ...
    def getCursorKeysActive(self, /): ...
    def getCursorPosition(self, /): ...
    def getCursorX(self, /): ...
    def getCursorY(self, /): ...
    def getCursormoveEvent(self, /): ...
    def getCursormovePrefix(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getEraseEvent(self, /): ...
    def getErasePrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getGraphic(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getMaxChars(self, /): ...
    def getMaxWidth(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumCharacters(self, /): ...
    def getNumChildren(): ...
    def getNumLines(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getObscureMode(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getOverflowEvent(self, /): ...
    def getOverflowMode(self, /): ...
    def getOverflowPrefix(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPlainText(self, /): ...
    def getPlainWtext(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getProperties(self, object, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getText(self, /): ...
    def getTextDef(self, object, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeEvent(self, /): ...
    def getTypeIndex(self, /): ...
    def getTypePrefix(): ...
    def getUnexpectedChange(self, object, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def getWtext(self, /): ...
    def get_accept_event(self, object, /): ...
    def get_accept_failed_event(self, object, /): ...
    def get_accept_failed_prefix(): ...
    def get_accept_prefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_blink_rate(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_candidate_active(self, /): ...
    def get_candidate_inactive(self, /): ...
    def get_character(self, object, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_cursor_X(self, /): ...
    def get_cursor_Y(self, /): ...
    def get_cursor_def(self, /): ...
    def get_cursor_keys_active(self, /): ...
    def get_cursor_position(self, /): ...
    def get_cursormove_event(self, /): ...
    def get_cursormove_prefix(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_erase_event(self, /): ...
    def get_erase_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_graphic(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_chars(self, /): ...
    def get_max_width(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_characters(self, /): ...
    def get_num_children(): ...
    def get_num_lines(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_obscure_mode(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_overflow_event(self, /): ...
    def get_overflow_mode(self, /): ...
    def get_overflow_prefix(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_plain_text(self, /): ...
    def get_plain_wtext(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_properties(self, object, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text(self, /): ...
    def get_text_def(self, object, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_event(self, /): ...
    def get_type_index(self, /): ...
    def get_type_prefix(): ...
    def get_unexpected_change(self, object, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def get_wtext(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isWtext(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_wtext(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAcceptEnabled(self, object, /): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setBackgroundFocus(self, object, /): ...
    def setBlinkRate(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCandidateActive(self, object, /): ...
    def setCandidateInactive(self, object, /): ...
    def setCursorKeysActive(self, object, /): ...
    def setCursorPosition(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMaxChars(self, object, /): ...
    def setMaxWidth(self, object, /): ...
    def setName(self, object, /): ...
    def setNumLines(self, object, /): ...
    def setObscureMode(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setOverflowMode(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setText(self, object, /): ...
    def setTextDef(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setWtext(self, object, /): ...
    def set_accept_enabled(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_background_focus(self, object, /): ...
    def set_blink_rate(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_candidate_active(self, object, /): ...
    def set_candidate_inactive(self, object, /): ...
    def set_cursor_keys_active(self, object, /): ...
    def set_cursor_position(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_max_chars(self, object, /): ...
    def set_max_width(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_lines(self, object, /): ...
    def set_obscure_mode(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_overflow_mode(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text(self, object, /): ...
    def set_text_def(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_wtext(self, object, /): ...
    def setup(): ...
    def setupMinimal(): ...
    def setup_minimal(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGFrameStyle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    TBevelIn:int = None
    TBevelOut:int = None
    TFlat:int = None
    TGroove:int = None
    TNone:int = None
    TRidge:int = None
    TTextureBorder:int = None
    T_bevel_in:int = None
    T_bevel_out:int = None
    T_flat:int = None
    T_groove:int = None
    T_none:int = None
    T_ridge:int = None
    T_texture_border:int = None
    def assign(self, object, /): ...
    def clearTexture(self, /): ...
    def clear_texture(self, /): ...
    def getColor(self, /): ...
    def getInternalFrame(self, object, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getUvWidth(self, /): ...
    def getVisibleScale(self, /): ...
    def getWidth(self, /): ...
    def get_color(self, /): ...
    def get_internal_frame(self, object, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_uv_width(self, /): ...
    def get_visible_scale(self, /): ...
    def get_width(self, /): ...
    def hasTexture(self, /): ...
    def has_texture(self, /): ...
    def output(self, object, /): ...
    def setColor(): ...
    def setTexture(self, object, /): ...
    def setType(self, object, /): ...
    def setUvWidth(): ...
    def setVisibleScale(): ...
    def setWidth(): ...
    def set_color(): ...
    def set_texture(self, object, /): ...
    def set_type(self, object, /): ...
    def set_uv_width(): ...
    def set_visible_scale(): ...
    def set_width(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PGItem:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setBackgroundFocus(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_background_focus(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGMouseWatcherBackground:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SFAnyButton:int = None
    SFMouseButton:int = None
    SFMousePosition:int = None
    SFOtherButton:int = None
    SF_any_button:int = None
    SF_mouse_button:int = None
    SF_mouse_position:int = None
    SF_other_button:int = None
    active = None
    area = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    frame = None
    def getActive(self, /): ...
    def getArea(self, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFrame(self, /): ...
    def getKeyboard(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getSuppressFlags(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active(self, /): ...
    def get_area(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_frame(self, /): ...
    def get_keyboard(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    keyboard = None
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setActive(self, object, /): ...
    def setFrame(): ...
    def setKeyboard(self, object, /): ...
    def setName(self, object, /): ...
    def setSort(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def set_active(self, object, /): ...
    def set_frame(): ...
    def set_keyboard(self, object, /): ...
    def set_name(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    sort = None
    suppress_flags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGMouseWatcherParameter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getButton(self, /): ...
    def getCandidateStringEncoded(): ...
    def getClassType(): ...
    def getCursorPos(self, /): ...
    def getHighlightEnd(self, /): ...
    def getHighlightStart(self, /): ...
    def getKeycode(self, /): ...
    def getModifierButtons(self, /): ...
    def getMouse(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_button(self, /): ...
    def get_candidate_string_encoded(): ...
    def get_class_type(): ...
    def get_cursor_pos(self, /): ...
    def get_highlight_end(self, /): ...
    def get_highlight_start(self, /): ...
    def get_keycode(self, /): ...
    def get_modifier_buttons(self, /): ...
    def get_mouse(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasButton(self, /): ...
    def hasCandidate(self, /): ...
    def hasKeycode(self, /): ...
    def hasMouse(self, /): ...
    def has_button(self, /): ...
    def has_candidate(self, /): ...
    def has_keycode(self, /): ...
    def has_mouse(self, /): ...
    def isExactType(self, object, /): ...
    def isKeyrepeat(self, /): ...
    def isOfType(self, object, /): ...
    def isOutside(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_keyrepeat(self, /): ...
    def is_of_type(self, object, /): ...
    def is_outside(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToMouseWatcherParameter(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_MouseWatcherParameter(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class PGScrollFrame:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearClipFrame(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearHorizontalSlider(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clearVerticalSlider(self, /): ...
    def clearVirtualFrame(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_clip_frame(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_horizontal_slider(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def clear_vertical_slider(self, /): ...
    def clear_virtual_frame(self, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getAutoHide(self, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCanvasNode(self, /): ...
    def getCanvasParent(self, /): ...
    def getCanvasTransform(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getClipFrame(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getHorizontalSlider(self, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getManagePieces(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVerticalSlider(self, /): ...
    def getVirtualFrame(self, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_auto_hide(self, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_canvas_node(self, /): ...
    def get_canvas_parent(self, /): ...
    def get_canvas_transform(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_clip_frame(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_horizontal_slider(self, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_manage_pieces(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_vertical_slider(self, /): ...
    def get_virtual_frame(self, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasClipFrame(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasVirtualFrame(self, /): ...
    def has_attrib(self, object, /): ...
    def has_clip_frame(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_virtual_frame(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remanage(self, /): ...
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAutoHide(self, object, /): ...
    def setBackgroundFocus(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCanvasTransform(self, object, /): ...
    def setClipFrame(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setHorizontalSlider(self, object, /): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setManagePieces(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVerticalSlider(self, object, /): ...
    def setVirtualFrame(): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_auto_hide(self, object, /): ...
    def set_background_focus(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_canvas_transform(self, object, /): ...
    def set_clip_frame(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_horizontal_slider(self, object, /): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_manage_pieces(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_vertical_slider(self, object, /): ...
    def set_virtual_frame(): ...
    def setup(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToPGVirtualFrame(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PGVirtualFrame(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGSliderBar:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearLeftButton(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearRightButton(self, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearThumbButton(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_left_button(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_right_button(self, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_thumb_button(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAdjustEvent(self, /): ...
    def getAdjustPrefix(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getAxis(self, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLeftButton(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getManagePieces(self, /): ...
    def getMaxValue(self, /): ...
    def getMinValue(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getPageSize(self, /): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRatio(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getResizeThumb(self, /): ...
    def getRightButton(self, /): ...
    def getScrollSize(self, /): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getThumbButton(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getValue(self, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_adjust_event(self, /): ...
    def get_adjust_prefix(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_axis(self, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_left_button(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_manage_pieces(self, /): ...
    def get_max_value(self, /): ...
    def get_min_value(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_page_size(self, /): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ratio(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_resize_thumb(self, /): ...
    def get_right_button(self, /): ...
    def get_scroll_size(self, /): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_thumb_button(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_value(self, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isButtonDown(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_button_down(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remanage(self, /): ...
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAxis(self, object, /): ...
    def setBackgroundFocus(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLeftButton(self, object, /): ...
    def setManagePieces(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPageSize(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRange(): ...
    def setRatio(self, object, /): ...
    def setResizeThumb(self, object, /): ...
    def setRightButton(self, object, /): ...
    def setScrollSize(self, object, /): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setThumbButton(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setValue(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_axis(self, object, /): ...
    def set_background_focus(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_left_button(self, object, /): ...
    def set_manage_pieces(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_page_size(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_range(): ...
    def set_ratio(self, object, /): ...
    def set_resize_thumb(self, object, /): ...
    def set_right_button(self, object, /): ...
    def set_scroll_size(self, object, /): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_thumb_button(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_value(self, object, /): ...
    def setupScrollBar(): ...
    def setupSlider(): ...
    def setup_scroll_bar(): ...
    def setup_slider(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToPGItem(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PGItem(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGTop:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getGroup(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMouseWatcher(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStartSort(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_group(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_mouse_watcher(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_start_sort(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMouseWatcher(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setStartSort(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_mouse_watcher(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_start_sort(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGVirtualFrame:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearClipFrame(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_clip_frame(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCanvasNode(self, /): ...
    def getCanvasParent(self, /): ...
    def getCanvasTransform(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getClipFrame(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_canvas_node(self, /): ...
    def get_canvas_parent(self, /): ...
    def get_canvas_transform(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_clip_frame(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasClipFrame(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_clip_frame(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setBackgroundFocus(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCanvasTransform(self, object, /): ...
    def setClipFrame(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_background_focus(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_canvas_transform(self, object, /): ...
    def set_clip_frame(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def setup(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PGWaitBar:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFrame(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSound(self, object, /): ...
    def clearState(): ...
    def clearStateDef(self, object, /): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_frame(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_sound(self, object, /): ...
    def clear_state(): ...
    def clear_state_def(self, object, /): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getActive(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBackgroundFocus(self, /): ...
    def getBamModified(self, /): ...
    def getBarStyle(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEnterEvent(self, /): ...
    def getEnterPrefix(): ...
    def getExitEvent(self, /): ...
    def getExitPrefix(): ...
    def getFancyBits(): ...
    def getFocus(self, /): ...
    def getFocusInEvent(self, /): ...
    def getFocusInPrefix(): ...
    def getFocusItem(): ...
    def getFocusOutEvent(self, /): ...
    def getFocusOutPrefix(): ...
    def getFrame(self, /): ...
    def getFrameInvXform(self, /): ...
    def getFrameStyle(self, object, /): ...
    def getId(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getKeystrokeEvent(self, /): ...
    def getKeystrokePrefix(): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumStateDefs(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPercent(self, /): ...
    def getPressEvent(self, object, /): ...
    def getPressPrefix(): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRange(self, /): ...
    def getRefCount(self, /): ...
    def getReleaseEvent(self, object, /): ...
    def getReleasePrefix(): ...
    def getRepeatEvent(self, object, /): ...
    def getRepeatPrefix(): ...
    def getSound(self, object, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(self, /): ...
    def getStateDef(self, object, /): ...
    def getStateDefs(self, /): ...
    def getSuppressFlags(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTextNode(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getValue(self, /): ...
    def getWithinEvent(self, /): ...
    def getWithinPrefix(): ...
    def getWithoutEvent(self, /): ...
    def getWithoutPrefix(): ...
    def get_active(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_background_focus(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bar_style(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_enter_event(self, /): ...
    def get_enter_prefix(): ...
    def get_exit_event(self, /): ...
    def get_exit_prefix(): ...
    def get_fancy_bits(): ...
    def get_focus(self, /): ...
    def get_focus_in_event(self, /): ...
    def get_focus_in_prefix(): ...
    def get_focus_item(): ...
    def get_focus_out_event(self, /): ...
    def get_focus_out_prefix(): ...
    def get_frame(self, /): ...
    def get_frame_inv_xform(self, /): ...
    def get_frame_style(self, object, /): ...
    def get_id(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_keystroke_event(self, /): ...
    def get_keystroke_prefix(): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_state_defs(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_percent(self, /): ...
    def get_press_event(self, object, /): ...
    def get_press_prefix(): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_range(self, /): ...
    def get_ref_count(self, /): ...
    def get_release_event(self, object, /): ...
    def get_release_prefix(): ...
    def get_repeat_event(self, object, /): ...
    def get_repeat_prefix(): ...
    def get_sound(self, object, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(self, /): ...
    def get_state_def(self, object, /): ...
    def get_state_defs(self, /): ...
    def get_suppress_flags(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text_node(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_value(self, /): ...
    def get_within_event(self, /): ...
    def get_within_prefix(): ...
    def get_without_event(self, /): ...
    def get_without_prefix(): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasFrame(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSound(self, object, /): ...
    def hasStateDef(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_frame(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_sound(self, object, /): ...
    def has_state_def(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def instanceToStateDef(): ...
    def instance_to_state_def(): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setBackgroundFocus(self, object, /): ...
    def setBarStyle(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFocus(self, object, /): ...
    def setFrame(): ...
    def setFrameStyle(): ...
    def setId(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRange(self, object, /): ...
    def setSound(): ...
    def setState(self, object, /): ...
    def setSuppressFlags(self, object, /): ...
    def setTag(): ...
    def setTextNode(object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setValue(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_background_focus(self, object, /): ...
    def set_bar_style(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_focus(self, object, /): ...
    def set_frame(): ...
    def set_frame_style(): ...
    def set_id(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_range(self, object, /): ...
    def set_sound(): ...
    def set_state(self, object, /): ...
    def set_suppress_flags(self, object, /): ...
    def set_tag(): ...
    def set_text_node(object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_value(self, object, /): ...
    def setup(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PNMBrush:
    ...
    BEBlend:int = None
    BEDarken:int = None
    BELighten:int = None
    BESet:int = None
    BE_blend:int = None
    BE_darken:int = None
    BE_lighten:int = None
    BE_set:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def makeImage(): ...
    def makePixel(): ...
    def makeSpot(): ...
    def makeTransparent(): ...
    def make_image(): ...
    def make_pixel(): ...
    def make_spot(): ...
    def make_transparent(): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class PNMFileType:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    extensions = None
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getExtension(self, object, /): ...
    def getExtensions(self, /): ...
    def getName(self, /): ...
    def getNumExtensions(self, /): ...
    def getSuggestedExtension(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_extension(self, object, /): ...
    def get_extensions(self, /): ...
    def get_name(self, /): ...
    def get_num_extensions(self, /): ...
    def get_suggested_extension(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    suggested_extension = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class PNMFileTypeRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getGlobalPtr(): ...
    def getNumTypes(self, /): ...
    def getType(self, object, /): ...
    def getTypeByHandle(self, object, /): ...
    def getTypeFromExtension(self, object, /): ...
    def getTypeFromMagicNumber(self, object, /): ...
    def getTypes(self, /): ...
    def get_global_ptr(): ...
    def get_num_types(self, /): ...
    def get_type(self, object, /): ...
    def get_type_by_handle(self, object, /): ...
    def get_type_from_extension(self, object, /): ...
    def get_type_from_magic_number(self, object, /): ...
    def get_types(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    types = None
    def write(): ...
class PNMImage:
    ...
    class CRow:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getAlphaVal(self, object, /): ...
        def getXelVal(self, object, /): ...
        def get_alpha_val(self, object, /): ...
        def get_xel_val(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    CTColor:int = None
    CTFourChannel:int = None
    CTGrayscale:int = None
    CTInvalid:int = None
    CTTwoChannel:int = None
    CT_color:int = None
    CT_four_channel:int = None
    CT_grayscale:int = None
    CT_invalid:int = None
    CT_two_channel:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Histogram:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getCount(self, object, /): ...
        def getNumPixels(self, /): ...
        def getPixel(self, object, /): ...
        def getPixels(self, /): ...
        def get_count(self, object, /): ...
        def get_num_pixels(self, /): ...
        def get_pixel(self, object, /): ...
        def get_pixels(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        def write(self, object, /): ...
    class PixelSpec:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def compareTo(self, object, /): ...
        def compare_to(self, object, /): ...
        def getAlpha(self, /): ...
        def getBlue(self, /): ...
        def getGreen(self, /): ...
        def getRed(self, /): ...
        def get_alpha(self, /): ...
        def get_blue(self, /): ...
        def get_green(self, /): ...
        def get_red(self, /): ...
        def output(self, object, /): ...
        def setAlpha(self, object, /): ...
        def setBlue(self, object, /): ...
        def setGreen(self, object, /): ...
        def setRed(self, object, /): ...
        def set_alpha(self, object, /): ...
        def set_blue(self, object, /): ...
        def set_green(self, object, /): ...
        def set_red(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class PixelSpecCount:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Row:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getAlphaVal(self, object, /): ...
        def getXelVal(self, object, /): ...
        def get_alpha_val(self, object, /): ...
        def get_xel_val(self, object, /): ...
        def setAlphaVal(): ...
        def setXelVal(): ...
        def set_alpha_val(): ...
        def set_xel_val(): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addAlpha(self, /): ...
    def addSubImage(): ...
    def add_alpha(self, /): ...
    def add_sub_image(): ...
    def alphaFill(): ...
    def alphaFillVal(): ...
    def alpha_fill(): ...
    def alpha_fill_val(): ...
    def applyExponent(): ...
    def apply_exponent(): ...
    def assign(self, object, /): ...
    def blend(): ...
    def blendSubImage(): ...
    def blend_sub_image(): ...
    def boxFilter(): ...
    def boxFilterFrom(): ...
    def box_filter(): ...
    def box_filter_from(): ...
    def clampVal(self, object, /): ...
    def clamp_val(self, object, /): ...
    def clear(): ...
    def clearReadSize(self, /): ...
    def clear_read_size(self, /): ...
    color_space = None
    comment = None
    def copyChannel(): ...
    def copyChannelBits(): ...
    def copyFrom(self, object, /): ...
    def copyHeaderFrom(self, object, /): ...
    def copySubImage(): ...
    def copy_channel(): ...
    def copy_channel_bits(): ...
    def copy_from(self, object, /): ...
    def copy_header_from(self, object, /): ...
    def copy_sub_image(): ...
    def darkenSubImage(): ...
    def darken_sub_image(): ...
    def doFillDistance(): ...
    def do_fill_distance(): ...
    def expandBorder(): ...
    def expand_border(): ...
    def fill(): ...
    def fillDistanceInside(): ...
    def fillDistanceOutside(): ...
    def fillVal(): ...
    def fill_distance_inside(): ...
    def fill_distance_outside(): ...
    def fill_val(): ...
    def flip(): ...
    def fromAlphaVal(self, object, /): ...
    def fromVal(self, object, /): ...
    def from_alpha_val(self, object, /): ...
    def from_val(self, object, /): ...
    def gammaCorrect(): ...
    def gammaCorrectAlpha(): ...
    def gamma_correct(): ...
    def gamma_correct_alpha(): ...
    def gaussianFilter(): ...
    def gaussianFilterFrom(): ...
    def gaussian_filter(): ...
    def gaussian_filter_from(): ...
    def getAlpha(): ...
    def getAlphaVal(): ...
    def getAverageGray(self, /): ...
    def getAverageXel(self, /): ...
    def getAverageXelA(self, /): ...
    def getBlue(): ...
    def getBlueVal(): ...
    def getBright(): ...
    def getChannel(): ...
    def getChannelVal(): ...
    def getColorSpace(self, /): ...
    def getColorType(self, /): ...
    def getComment(self, /): ...
    def getGray(): ...
    def getGrayVal(): ...
    def getGreen(): ...
    def getGreenVal(): ...
    def getMaxval(self, /): ...
    def getNumChannels(self, /): ...
    def getPixel(): ...
    def getReadXSize(self, /): ...
    def getReadYSize(self, /): ...
    def getRed(): ...
    def getRedVal(): ...
    def getSize(self, /): ...
    def getType(self, /): ...
    def getXSize(self, /): ...
    def getXel(): ...
    def getXelA(): ...
    def getXelVal(): ...
    def getYSize(self, /): ...
    def get_alpha(): ...
    def get_alpha_val(): ...
    def get_average_gray(self, /): ...
    def get_average_xel(self, /): ...
    def get_average_xel_a(self, /): ...
    def get_blue(): ...
    def get_blue_val(): ...
    def get_bright(): ...
    def get_channel(): ...
    def get_channel_val(): ...
    def get_color_space(self, /): ...
    def get_color_type(self, /): ...
    def get_comment(self, /): ...
    def get_gray(): ...
    def get_gray_val(): ...
    def get_green(): ...
    def get_green_val(): ...
    def get_maxval(self, /): ...
    def get_num_channels(self, /): ...
    def get_pixel(): ...
    def get_read_x_size(self, /): ...
    def get_read_y_size(self, /): ...
    def get_red(): ...
    def get_red_val(): ...
    def get_size(self, /): ...
    def get_type(self, /): ...
    def get_x_size(self, /): ...
    def get_xel(): ...
    def get_xel_a(): ...
    def get_xel_val(): ...
    def get_y_size(self, /): ...
    def hasAlpha(): ...
    def hasReadSize(self, /): ...
    def hasType(self, /): ...
    def has_alpha(): ...
    def has_read_size(self, /): ...
    def has_type(self, /): ...
    def indirect1dLookup(): ...
    def indirect_1d_lookup(): ...
    def isGrayscale(): ...
    def isValid(self, /): ...
    def is_grayscale(): ...
    def is_valid(self, /): ...
    def lightenSubImage(): ...
    def lighten_sub_image(): ...
    def makeGrayscale(): ...
    def makeHistogram(self, object, /): ...
    def makeRgb(self, /): ...
    def make_grayscale(): ...
    def make_histogram(self, object, /): ...
    def make_rgb(self, /): ...
    maxval = None
    def multSubImage(): ...
    def mult_sub_image(): ...
    num_channels = None
    def output(self, object, /): ...
    def perlinNoiseFill(): ...
    def perlin_noise_fill(): ...
    def premultiplyAlpha(self, /): ...
    def premultiply_alpha(self, /): ...
    def quantize(self, object, /): ...
    def quickFilterFrom(): ...
    def quick_filter_from(): ...
    def read(): ...
    def readHeader(): ...
    def read_header(): ...
    def remixChannels(self, object, /): ...
    def remix_channels(self, object, /): ...
    def removeAlpha(self, /): ...
    def remove_alpha(self, /): ...
    def renderSpot(): ...
    def render_spot(): ...
    def rescale(): ...
    def reverseRows(self, /): ...
    def reverse_rows(self, /): ...
    def setAlpha(): ...
    def setAlphaVal(): ...
    def setBlue(): ...
    def setBlueVal(): ...
    def setChannel(): ...
    def setChannelVal(): ...
    def setColorSpace(self, object, /): ...
    def setColorType(self, object, /): ...
    def setComment(self, object, /): ...
    def setGray(): ...
    def setGrayVal(): ...
    def setGreen(): ...
    def setGreenVal(): ...
    def setMaxval(self, object, /): ...
    def setNumChannels(self, object, /): ...
    def setPixel(): ...
    def setReadSize(): ...
    def setRed(): ...
    def setRedVal(): ...
    def setType(self, object, /): ...
    def setXel(): ...
    def setXelA(): ...
    def setXelVal(): ...
    def set_alpha(): ...
    def set_alpha_val(): ...
    def set_blue(): ...
    def set_blue_val(): ...
    def set_channel(): ...
    def set_channel_val(): ...
    def set_color_space(self, object, /): ...
    def set_color_type(self, object, /): ...
    def set_comment(self, object, /): ...
    def set_gray(): ...
    def set_gray_val(): ...
    def set_green(): ...
    def set_green_val(): ...
    def set_maxval(self, object, /): ...
    def set_num_channels(self, object, /): ...
    def set_pixel(): ...
    def set_read_size(): ...
    def set_red(): ...
    def set_red_val(): ...
    def set_type(self, object, /): ...
    def set_xel(): ...
    def set_xel_a(): ...
    def set_xel_val(): ...
    size = None
    def takeFrom(self, object, /): ...
    def take_from(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def threshold(): ...
    def toAlphaVal(self, object, /): ...
    def toVal(self, object, /): ...
    def to_alpha_val(self, object, /): ...
    def to_val(self, object, /): ...
    type = None
    def unfilteredStretchFrom(self, object, /): ...
    def unfiltered_stretch_from(self, object, /): ...
    def unpremultiplyAlpha(self, /): ...
    def unpremultiply_alpha(self, /): ...
    def write(): ...
class PNMImageHeader:
    ...
    CTColor:int = None
    CTFourChannel:int = None
    CTGrayscale:int = None
    CTInvalid:int = None
    CTTwoChannel:int = None
    CT_color:int = None
    CT_four_channel:int = None
    CT_grayscale:int = None
    CT_invalid:int = None
    CT_two_channel:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Histogram:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getCount(self, object, /): ...
        def getNumPixels(self, /): ...
        def getPixel(self, object, /): ...
        def getPixels(self, /): ...
        def get_count(self, object, /): ...
        def get_num_pixels(self, /): ...
        def get_pixel(self, object, /): ...
        def get_pixels(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        def write(self, object, /): ...
    class PixelSpec:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def compareTo(self, object, /): ...
        def compare_to(self, object, /): ...
        def getAlpha(self, /): ...
        def getBlue(self, /): ...
        def getGreen(self, /): ...
        def getRed(self, /): ...
        def get_alpha(self, /): ...
        def get_blue(self, /): ...
        def get_green(self, /): ...
        def get_red(self, /): ...
        def output(self, object, /): ...
        def setAlpha(self, object, /): ...
        def setBlue(self, object, /): ...
        def setGreen(self, object, /): ...
        def setRed(self, object, /): ...
        def set_alpha(self, object, /): ...
        def set_blue(self, object, /): ...
        def set_green(self, object, /): ...
        def set_red(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class PixelSpecCount:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def assign(self, object, /): ...
    color_space = None
    comment = None
    def getColorSpace(self, /): ...
    def getColorType(self, /): ...
    def getComment(self, /): ...
    def getMaxval(self, /): ...
    def getNumChannels(self, /): ...
    def getSize(self, /): ...
    def getType(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_color_space(self, /): ...
    def get_color_type(self, /): ...
    def get_comment(self, /): ...
    def get_maxval(self, /): ...
    def get_num_channels(self, /): ...
    def get_size(self, /): ...
    def get_type(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def hasAlpha(): ...
    def hasType(self, /): ...
    def has_alpha(): ...
    def has_type(self, /): ...
    def isGrayscale(): ...
    def is_grayscale(): ...
    maxval = None
    num_channels = None
    def output(self, object, /): ...
    def readHeader(): ...
    def read_header(): ...
    def setComment(self, object, /): ...
    def setType(self, object, /): ...
    def set_comment(self, object, /): ...
    def set_type(self, object, /): ...
    size = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class PNMPainter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def drawLine(): ...
    def drawPoint(): ...
    def drawRectangle(): ...
    def draw_line(): ...
    def draw_point(): ...
    def draw_rectangle(): ...
    fill = None
    def getFill(self, /): ...
    def getPen(self, /): ...
    def get_fill(self, /): ...
    def get_pen(self, /): ...
    pen = None
    def setFill(self, object, /): ...
    def setPen(self, object, /): ...
    def set_fill(self, object, /): ...
    def set_pen(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PNMTextGlyph:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getAdvance(self, /): ...
    def getBottom(self, /): ...
    def getHeight(self, /): ...
    def getInteriorFlag(): ...
    def getLeft(self, /): ...
    def getRight(self, /): ...
    def getTop(self, /): ...
    def getValue(): ...
    def getWidth(self, /): ...
    def get_advance(self, /): ...
    def get_bottom(self, /): ...
    def get_height(self, /): ...
    def get_interior_flag(): ...
    def get_left(self, /): ...
    def get_right(self, /): ...
    def get_top(self, /): ...
    def get_value(): ...
    def get_width(self, /): ...
    def place(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PNMTextMaker:
    ...
    ACenter:int = None
    ALeft:int = None
    ARight:int = None
    A_center:int = None
    A_left:int = None
    A_right:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    WODefault:int = None
    WOInvalid:int = None
    WOLeft:int = None
    WORight:int = None
    WO_default:int = None
    WO_invalid:int = None
    WO_left:int = None
    WO_right:int = None
    def calcWidth(self, object, /): ...
    def calc_width(self, object, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def generateInto(): ...
    def generate_into(): ...
    def getAlign(self, /): ...
    def getClassType(): ...
    def getDistanceFieldRadius(self, /): ...
    def getFg(self, /): ...
    def getFontPixelSize(self, /): ...
    def getGlyph(self, object, /): ...
    def getInterior(self, /): ...
    def getInteriorFlag(self, /): ...
    def getLineHeight(self, /): ...
    def getName(self, /): ...
    def getNativeAntialias(self, /): ...
    def getPixelSize(self, /): ...
    def getPixelsPerUnit(self, /): ...
    def getPointSize(self, /): ...
    def getPointsPerInch(): ...
    def getPointsPerUnit(): ...
    def getScaleFactor(self, /): ...
    def getSpaceAdvance(self, /): ...
    def getWindingOrder(self, /): ...
    def get_align(self, /): ...
    def get_class_type(): ...
    def get_distance_field_radius(self, /): ...
    def get_fg(self, /): ...
    def get_font_pixel_size(self, /): ...
    def get_glyph(self, object, /): ...
    def get_interior(self, /): ...
    def get_interior_flag(self, /): ...
    def get_line_height(self, /): ...
    def get_name(self, /): ...
    def get_native_antialias(self, /): ...
    def get_pixel_size(self, /): ...
    def get_pixels_per_unit(self, /): ...
    def get_point_size(self, /): ...
    def get_points_per_inch(): ...
    def get_points_per_unit(): ...
    def get_scale_factor(self, /): ...
    def get_space_advance(self, /): ...
    def get_winding_order(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isValid(self, /): ...
    def is_valid(self, /): ...
    name = None
    def output(self, object, /): ...
    def setAlign(self, object, /): ...
    def setDistanceFieldRadius(self, object, /): ...
    def setFg(self, object, /): ...
    def setInterior(self, object, /): ...
    def setInteriorFlag(self, object, /): ...
    def setName(self, object, /): ...
    def setNativeAntialias(self, object, /): ...
    def setPixelSize(self, object, /): ...
    def setPixelsPerUnit(self, object, /): ...
    def setPointSize(self, object, /): ...
    def setScaleFactor(self, object, /): ...
    def setWindingOrder(self, object, /): ...
    def set_align(self, object, /): ...
    def set_distance_field_radius(self, object, /): ...
    def set_fg(self, object, /): ...
    def set_interior(self, object, /): ...
    def set_interior_flag(self, object, /): ...
    def set_name(self, object, /): ...
    def set_native_antialias(self, object, /): ...
    def set_pixel_size(self, object, /): ...
    def set_pixels_per_unit(self, object, /): ...
    def set_point_size(self, object, /): ...
    def set_scale_factor(self, object, /): ...
    def set_winding_order(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    winding_order = None
class PStatClient:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clientConnect(): ...
    def clientDisconnect(self, /): ...
    def clientIsConnected(self, /): ...
    def clientMainTick(self, /): ...
    def clientResumeAfterPause(self, /): ...
    def clientThreadTick(self, object, /): ...
    def client_connect(): ...
    def client_disconnect(self, /): ...
    def client_is_connected(self, /): ...
    def client_main_tick(self, /): ...
    client_name = None
    def client_resume_after_pause(self, /): ...
    def client_thread_tick(self, object, /): ...
    collectors = None
    def connect(): ...
    current_thread = None
    def disconnect(): ...
    def getClientName(self, /): ...
    def getCollector(self, object, /): ...
    def getCollectorFullname(self, object, /): ...
    def getCollectorName(self, object, /): ...
    def getCollectors(self, /): ...
    def getCurrentThread(self, /): ...
    def getGlobalPstats(): ...
    def getMainThread(self, /): ...
    def getMaxRate(self, /): ...
    def getNumCollectors(self, /): ...
    def getNumThreads(self, /): ...
    def getRealTime(self, /): ...
    def getThread(self, object, /): ...
    def getThreadName(self, object, /): ...
    def getThreadObject(self, object, /): ...
    def getThreadSyncName(self, object, /): ...
    def getThreads(self, /): ...
    def get_client_name(self, /): ...
    def get_collector(self, object, /): ...
    def get_collector_fullname(self, object, /): ...
    def get_collector_name(self, object, /): ...
    def get_collectors(self, /): ...
    def get_current_thread(self, /): ...
    def get_global_pstats(): ...
    def get_main_thread(self, /): ...
    def get_max_rate(self, /): ...
    def get_num_collectors(self, /): ...
    def get_num_threads(self, /): ...
    def get_real_time(self, /): ...
    def get_thread(self, object, /): ...
    def get_thread_name(self, object, /): ...
    def get_thread_object(self, object, /): ...
    def get_thread_sync_name(self, object, /): ...
    def get_threads(self, /): ...
    def isConnected(): ...
    def is_connected(): ...
    def mainTick(): ...
    main_thread = None
    def main_tick(): ...
    max_rate = None
    real_time = None
    def resumeAfterPause(): ...
    def resume_after_pause(): ...
    def setClientName(self, object, /): ...
    def setMaxRate(self, object, /): ...
    def set_client_name(self, object, /): ...
    def set_max_rate(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def threadTick(object, /): ...
    def thread_tick(object, /): ...
    threads = None
class PStatCollector:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLevel(): ...
    def addLevelNow(self, object, /): ...
    def addThreadLevel(self, object, /): ...
    def add_level(): ...
    def add_level_now(self, object, /): ...
    def add_thread_level(self, object, /): ...
    def assign(self, object, /): ...
    def clearLevel(): ...
    def clearThreadLevel(self, /): ...
    def clear_level(): ...
    def clear_thread_level(self, /): ...
    def flushLevel(self, /): ...
    def flush_level(self, /): ...
    def getFullname(self, /): ...
    def getIndex(self, /): ...
    def getLevel(): ...
    def getName(self, /): ...
    def getThreadLevel(self, /): ...
    def get_fullname(self, /): ...
    def get_index(self, /): ...
    def get_level(): ...
    def get_name(self, /): ...
    def get_thread_level(self, /): ...
    def isActive(): ...
    def isStarted(): ...
    def isValid(self, /): ...
    def is_active(): ...
    def is_started(): ...
    def is_valid(self, /): ...
    def output(self, object, /): ...
    def setLevel(): ...
    def setThreadLevel(self, object, /): ...
    def set_level(): ...
    def set_thread_level(self, object, /): ...
    def start(): ...
    def stop(): ...
    def subLevel(): ...
    def subLevelNow(self, object, /): ...
    def subThreadLevel(self, object, /): ...
    def sub_level(): ...
    def sub_level_now(self, object, /): ...
    def sub_thread_level(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PStatCollectorForward:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLevel(self, object, /): ...
    def add_level(self, object, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class PStatCollectorForwardBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLevel(self, object, /): ...
    def add_level(self, object, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class PStatThread:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getIndex(self, /): ...
    def getThread(self, /): ...
    def get_index(self, /): ...
    def get_thread(self, /): ...
    index = None
    def newFrame(self, /): ...
    def new_frame(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    thread = None
class PTADouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTALVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAMat3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAMat3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAMat4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAMat4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAStdfloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAUchar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTAVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_LVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_stdfloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PTA_uchar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PandaNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PandaSystem:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addSystem(self, object, /): ...
    def add_system(self, object, /): ...
    build_date:str = None
    compiler:str = None
    distributor:str = None
    def getBuildDate(): ...
    def getClassType(): ...
    def getCompiler(): ...
    def getDistributor(): ...
    def getGitCommit(): ...
    def getGlobalPtr(): ...
    def getMajorVersion(): ...
    def getMemoryAlignment(): ...
    def getMinorVersion(): ...
    def getNumSystems(self, /): ...
    def getP3dCoreapiVersionString(): ...
    def getPackageHostUrl(): ...
    def getPackageVersionString(): ...
    def getPlatform(): ...
    def getSequenceVersion(): ...
    def getSystem(self, object, /): ...
    def getSystemTag(): ...
    def getSystems(self, /): ...
    def getVersionString(): ...
    def get_build_date(): ...
    def get_class_type(): ...
    def get_compiler(): ...
    def get_distributor(): ...
    def get_git_commit(): ...
    def get_global_ptr(): ...
    def get_major_version(): ...
    def get_memory_alignment(): ...
    def get_minor_version(): ...
    def get_num_systems(self, /): ...
    def get_p3d_coreapi_version_string(): ...
    def get_package_host_url(): ...
    def get_package_version_string(): ...
    def get_platform(): ...
    def get_sequence_version(): ...
    def get_system(self, object, /): ...
    def get_system_tag(): ...
    def get_systems(self, /): ...
    def get_version_string(): ...
    git_commit:str = None
    def hasSystem(self, object, /): ...
    def has_system(self, object, /): ...
    def heapTrim(self, object, /): ...
    def heap_trim(self, object, /): ...
    def isOfficialVersion(): ...
    def is_official_version(): ...
    major_version:int = None
    memory_alignment:int = None
    minor_version:int = None
    official_version = None
    def output(self, object, /): ...
    platform:str = None
    sequence_version:int = None
    def setSystemTag(): ...
    def set_system_tag(): ...
    systems = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    version_string:str = None
    def write(self, object, /): ...
class ParamMatrix3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamNodePath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class ParamString:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamTextureImage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bind_layer = None
    bind_level = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBindLayer(self, /): ...
    def getBindLayered(self, /): ...
    def getBindLevel(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_bind_layer(self, /): ...
    def get_bind_layered(self, /): ...
    def get_bind_level(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def hasReadAccess(self, /): ...
    def hasWriteAccess(self, /): ...
    def has_read_access(self, /): ...
    def has_write_access(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    read_access = None
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    write_access = None
class ParamTextureSampler:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSampler(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_sampler(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    sampler = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class ParamTypedRefCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class ParamValueLMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueString:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValueWstring:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_LVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_string:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamValue_wstring:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParamWstring:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValue(self, /): ...
    def getValueType(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value(self, /): ...
    def get_value_type(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setValue(self, object, /): ...
    def set_value(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    value = None
class ParametricCurve:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjustPoint(): ...
    def adjustPt(): ...
    def adjustTangent(): ...
    def adjust_draw_mask(): ...
    def adjust_point(): ...
    def adjust_pt(): ...
    def adjust_tangent(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def calcLength(): ...
    def calc_length(): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findLength(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_length(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def get2ndtangent(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurveType(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxT(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDimensions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(): ...
    def getPrevTransform(): ...
    def getPt(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTangent(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_2ndtangent(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve_type(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_t(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_dimensions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(): ...
    def get_prev_transform(): ...
    def get_pt(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tangent(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurveType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNumDimensions(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_dimensions(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stitch(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeEgg(): ...
    def write_egg(): ...
class ParametricCurveCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addCurve(): ...
    def addCurves(self, object, /): ...
    def add_curve(): ...
    def add_curves(self, object, /): ...
    def adjustHpr(): ...
    def adjustXyz(): ...
    def adjust_hpr(): ...
    def adjust_xyz(): ...
    def clear(self, /): ...
    def clearTimewarps(self, /): ...
    def clear_timewarps(self, /): ...
    curves = None
    default_curve = None
    def evaluate(): ...
    def evaluateHpr(): ...
    def evaluateT(self, object, /): ...
    def evaluateXyz(): ...
    def evaluate_hpr(): ...
    def evaluate_t(self, object, /): ...
    def evaluate_xyz(): ...
    def faceForward(self, object, /): ...
    def face_forward(self, object, /): ...
    def getClassType(): ...
    def getCurve(self, object, /): ...
    def getCurves(self, /): ...
    def getDefaultCurve(self, /): ...
    def getHprCurve(self, /): ...
    def getMaxT(self, /): ...
    def getNumCurves(self, /): ...
    def getNumTimewarps(self, /): ...
    def getRefCount(self, /): ...
    def getTimewarpCurve(self, object, /): ...
    def getTimewarpCurves(self, /): ...
    def getXyzCurve(self, /): ...
    def get_class_type(): ...
    def get_curve(self, object, /): ...
    def get_curves(self, /): ...
    def get_default_curve(self, /): ...
    def get_hpr_curve(self, /): ...
    def get_max_t(self, /): ...
    def get_num_curves(self, /): ...
    def get_num_timewarps(self, /): ...
    def get_ref_count(self, /): ...
    def get_timewarp_curve(self, object, /): ...
    def get_timewarp_curves(self, /): ...
    def get_xyz_curve(self, /): ...
    def hasCurve(self, object, /): ...
    def has_curve(self, object, /): ...
    hpr_curve = None
    def insertCurve(): ...
    def insert_curve(): ...
    def makeEven(): ...
    def make_even(): ...
    max_t = None
    def output(self, object, /): ...
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeCurve(self, object, /): ...
    def remove_curve(self, object, /): ...
    def resetMaxT(self, object, /): ...
    def reset_max_t(self, object, /): ...
    def setCurve(): ...
    def set_curve(): ...
    def stitch(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    timewarp_curves = None
    def unref(self, /): ...
    def write(): ...
    def writeEgg(): ...
    def write_egg(): ...
    xyz_curve = None
class ParasiteBuffer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FMParasite:int = None
    FMRefresh:int = None
    FMRender:int = None
    FM_parasite:int = None
    FM_refresh:int = None
    FM_render:int = None
    RTMBindLayered:int = None
    RTMBindOrCopy:int = None
    RTMCopyRam:int = None
    RTMCopyTexture:int = None
    RTMNone:int = None
    RTMTriggeredCopyRam:int = None
    RTMTriggeredCopyTexture:int = None
    RTM_bind_layered:int = None
    RTM_bind_or_copy:int = None
    RTM_copy_ram:int = None
    RTM_copy_texture:int = None
    RTM_none:int = None
    RTM_triggered_copy_ram:int = None
    RTM_triggered_copy_texture:int = None
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    active_display_regions = None
    def addRenderTexture(): ...
    def add_render_texture(): ...
    child_sort = None
    def clearChildSort(self, /): ...
    def clearDeleteFlag(self, /): ...
    def clearRenderTextures(self, /): ...
    def clear_child_sort(self, /): ...
    clear_color = None
    def clear_delete_flag(self, /): ...
    clear_depth = None
    def clear_render_textures(self, /): ...
    clear_stencil = None
    def countTextures(self, /): ...
    def count_textures(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    display_regions = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    engine = None
    fb_size = None
    def fillin(): ...
    def flipReady(self, /): ...
    def flip_ready(self, /): ...
    def getActiveDisplayRegion(self, object, /): ...
    def getActiveDisplayRegions(self, /): ...
    def getBamModified(self, /): ...
    def getChildSort(self, /): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getDeleteFlag(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getEngine(self, /): ...
    def getFbProperties(self, /): ...
    def getFbSize(self, /): ...
    def getFbXSize(self, /): ...
    def getFbYSize(self, /): ...
    def getGsg(self, /): ...
    def getHost(self, /): ...
    def getInverted(self, /): ...
    def getLeftEyeColorMask(self, /): ...
    def getName(self, /): ...
    def getNumActiveDisplayRegions(self, /): ...
    def getNumDisplayRegions(self, /): ...
    def getOneShot(self, /): ...
    def getOverlayDisplayRegion(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelZoom(self, /): ...
    def getRedBlueStereo(self, /): ...
    def getRefCount(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRightEyeColorMask(self, /): ...
    def getRtmMode(): ...
    def getSbsLeftDimensions(self, /): ...
    def getSbsLeftSize(self, /): ...
    def getSbsLeftXSize(self, /): ...
    def getSbsLeftYSize(self, /): ...
    def getSbsRightDimensions(self, /): ...
    def getSbsRightSize(self, /): ...
    def getSbsRightXSize(self, /): ...
    def getSbsRightYSize(self, /): ...
    def getScreenshot(): ...
    def getSideBySideStereo(self, /): ...
    def getSize(self, /): ...
    def getSort(self, /): ...
    def getSupportsRenderTexture(self, /): ...
    def getSwapEyes(self, /): ...
    def getTexture(): ...
    def getTextureCard(self, /): ...
    def getTexturePlane(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_active_display_region(self, object, /): ...
    def get_active_display_regions(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child_sort(self, /): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_delete_flag(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_engine(self, /): ...
    def get_fb_properties(self, /): ...
    def get_fb_size(self, /): ...
    def get_fb_x_size(self, /): ...
    def get_fb_y_size(self, /): ...
    def get_gsg(self, /): ...
    def get_host(self, /): ...
    def get_inverted(self, /): ...
    def get_left_eye_color_mask(self, /): ...
    def get_name(self, /): ...
    def get_num_active_display_regions(self, /): ...
    def get_num_display_regions(self, /): ...
    def get_one_shot(self, /): ...
    def get_overlay_display_region(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_zoom(self, /): ...
    def get_red_blue_stereo(self, /): ...
    def get_ref_count(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_right_eye_color_mask(self, /): ...
    def get_rtm_mode(): ...
    def get_sbs_left_dimensions(self, /): ...
    def get_sbs_left_size(self, /): ...
    def get_sbs_left_x_size(self, /): ...
    def get_sbs_left_y_size(self, /): ...
    def get_sbs_right_dimensions(self, /): ...
    def get_sbs_right_size(self, /): ...
    def get_sbs_right_x_size(self, /): ...
    def get_sbs_right_y_size(self, /): ...
    def get_screenshot(): ...
    def get_side_by_side_stereo(self, /): ...
    def get_size(self, /): ...
    def get_sort(self, /): ...
    def get_supports_render_texture(self, /): ...
    def get_swap_eyes(self, /): ...
    def get_texture(): ...
    def get_texture_card(self, /): ...
    def get_texture_plane(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    gsg = None
    def hasSize(self, /): ...
    def hasTexture(self, /): ...
    def has_size(self, /): ...
    def has_texture(self, /): ...
    inverted = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isExactType(self, object, /): ...
    def isNonzeroSize(self, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def isValid(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_nonzero_size(self, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    def is_valid(self, /): ...
    def makeCubeMap(): ...
    def makeDisplayRegion(): ...
    def makeMonoDisplayRegion(): ...
    def makeScreenshotFilename(): ...
    def makeStereoDisplayRegion(): ...
    def makeTextureBuffer(): ...
    def make_cube_map(): ...
    def make_display_region(): ...
    def make_mono_display_region(): ...
    def make_screenshot_filename(): ...
    def make_stereo_display_region(): ...
    def make_texture_buffer(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    one_shot = None
    pipe = None
    pixel_factor = None
    pixel_zoom = None
    def ref(self, /): ...
    ref_count = None
    def removeAllDisplayRegions(self, /): ...
    def removeDisplayRegion(self, object, /): ...
    def remove_all_display_regions(self, /): ...
    def remove_display_region(self, object, /): ...
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    sbs_left_size = None
    sbs_right_size = None
    def setActive(self, object, /): ...
    def setChildSort(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setInverted(self, object, /): ...
    def setOneShot(self, object, /): ...
    def setOverlayDisplayRegion(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setRedBlueStereo(): ...
    def setSideBySideStereo(): ...
    def setSize(): ...
    def setSort(self, object, /): ...
    def setSwapEyes(self, object, /): ...
    def set_active(self, object, /): ...
    def set_child_sort(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_inverted(self, object, /): ...
    def set_one_shot(self, object, /): ...
    def set_overlay_display_region(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_red_blue_stereo(): ...
    def set_side_by_side_stereo(): ...
    def set_size(): ...
    def set_sort(self, object, /): ...
    def set_swap_eyes(self, object, /): ...
    def setupRenderTexture(): ...
    def setup_render_texture(): ...
    def shareDepthBuffer(self, object, /): ...
    def share_depth_buffer(self, object, /): ...
    size = None
    sort = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    supports_render_texture = None
    swap_eyes = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triggerCopy(self, /): ...
    def trigger_copy(self, /): ...
    type = None
    def unref(self, /): ...
    def unshareDepthBuffer(self, /): ...
    def unshare_depth_buffer(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToGraphicsOutputBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_GraphicsOutputBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class PartBundle:
    ...
    BTComponentwise:int = None
    BTComponentwiseQuat:int = None
    BTLinear:int = None
    BTNormalizedLinear:int = None
    BT_componentwise:int = None
    BT_componentwise_quat:int = None
    BT_linear:int = None
    BT_normalized_linear:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    anim_blend_flag = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def applyTransform(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    def apply_transform(self, object, /): ...
    def bindAnim(): ...
    def bind_anim(): ...
    blend_type = None
    children = None
    def clearAnimPreload(self, /): ...
    def clearControlEffects(self, /): ...
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_anim_preload(self, /): ...
    def clear_control_effects(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def controlJoint(): ...
    def control_joint(): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    frame_blend_flag = None
    def freezeJoint(): ...
    def freeze_joint(): ...
    def getAnimBlendFlag(self, /): ...
    def getAnimPreload(self, /): ...
    def getBamModified(self, /): ...
    def getBlendType(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getControlEffect(self, object, /): ...
    def getForcedChannel(self, /): ...
    def getFrameBlendFlag(self, /): ...
    def getName(self, /): ...
    def getNode(self, object, /): ...
    def getNodes(self, /): ...
    def getNumChildren(self, /): ...
    def getNumNodes(self, /): ...
    def getRefCount(self, /): ...
    def getRootXform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_anim_blend_flag(self, /): ...
    def get_anim_preload(self, /): ...
    def get_bam_modified(self, /): ...
    def get_blend_type(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_control_effect(self, object, /): ...
    def get_forced_channel(self, /): ...
    def get_frame_blend_flag(self, /): ...
    def get_name(self, /): ...
    def get_node(self, object, /): ...
    def get_nodes(self, /): ...
    def get_num_children(self, /): ...
    def get_num_nodes(self, /): ...
    def get_ref_count(self, /): ...
    def get_root_xform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def loadBindAnim(): ...
    def load_bind_anim(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def mergeAnimPreloads(self, object, /): ...
    def merge_anim_preloads(self, object, /): ...
    def modifyAnimPreload(self, /): ...
    def modify_anim_preload(self, /): ...
    name = None
    nodes = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def releaseJoint(self, object, /): ...
    def release_joint(self, object, /): ...
    root_xform = None
    def setAnimBlendFlag(self, object, /): ...
    def setAnimPreload(self, object, /): ...
    def setBlendType(self, object, /): ...
    def setControlEffect(): ...
    def setFrameBlendFlag(self, object, /): ...
    def setName(self, object, /): ...
    def setRootXform(self, object, /): ...
    def set_anim_blend_flag(self, object, /): ...
    def set_anim_preload(self, object, /): ...
    def set_blend_type(self, object, /): ...
    def set_control_effect(): ...
    def set_frame_blend_flag(self, object, /): ...
    def set_name(self, object, /): ...
    def set_root_xform(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def waitPending(self, /): ...
    def wait_pending(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
    def xform(self, object, /): ...
class PartBundleHandle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    bundle = None
    def getBundle(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_bundle(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setBundle(self, object, /): ...
    def set_bundle(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class PartBundleNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    bundle_handles = None
    bundles = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getBundle(self, object, /): ...
    def getBundleHandle(self, object, /): ...
    def getBundleHandles(self, /): ...
    def getBundles(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumBundles(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_bundle(self, object, /): ...
    def get_bundle_handle(self, object, /): ...
    def get_bundle_handles(self, /): ...
    def get_bundles(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_bundles(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PartGroup:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    HMFOkAnimExtra:int = None
    HMFOkPartExtra:int = None
    HMFOkWrongRootName:int = None
    HMF_ok_anim_extra:int = None
    HMF_ok_part_extra:int = None
    HMF_ok_wrong_root_name:int = None
    def applyControl(self, object, /): ...
    def applyFreeze(self, object, /): ...
    def applyFreezeMatrix(): ...
    def applyFreezeScalar(self, object, /): ...
    def apply_control(self, object, /): ...
    def apply_freeze(self, object, /): ...
    def apply_freeze_matrix(): ...
    def apply_freeze_scalar(self, object, /): ...
    children = None
    def clearForcedChannel(self, /): ...
    def clearName(self, /): ...
    def clear_forced_channel(self, /): ...
    def clear_name(self, /): ...
    def copySubgraph(self, /): ...
    def copy_subgraph(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findChild(self, object, /): ...
    def find_child(self, object, /): ...
    def getBamModified(self, /): ...
    def getChild(self, object, /): ...
    def getChildNamed(self, object, /): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getForcedChannel(self, /): ...
    def getName(self, /): ...
    def getNumChildren(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_child(self, object, /): ...
    def get_child_named(self, object, /): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_forced_channel(self, /): ...
    def get_name(self, /): ...
    def get_num_children(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isCharacterJoint(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_character_joint(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def sortDescendants(self, /): ...
    def sort_descendants(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeWithValue(): ...
    def write_with_value(): ...
class PartSubset:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addExcludeJoint(self, object, /): ...
    def addIncludeJoint(self, object, /): ...
    def add_exclude_joint(self, object, /): ...
    def add_include_joint(self, object, /): ...
    def append(self, object, /): ...
    def assign(self, object, /): ...
    def isIncludeEmpty(self, /): ...
    def is_include_empty(self, /): ...
    def matchesExclude(self, object, /): ...
    def matchesInclude(self, object, /): ...
    def matches_exclude(self, object, /): ...
    def matches_include(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Patcher:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getProgress(self, /): ...
    def get_progress(self, /): ...
    def initiate(): ...
    def run(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Patchfile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    allow_multifile = None
    def apply(): ...
    def build(): ...
    footprint_length = None
    def getAllowMultifile(self, /): ...
    def getFootprintLength(self, /): ...
    def getProgress(self, /): ...
    def getResultHash(self, /): ...
    def getSourceHash(self, /): ...
    def get_allow_multifile(self, /): ...
    def get_footprint_length(self, /): ...
    def get_progress(self, /): ...
    def get_result_hash(self, /): ...
    def get_source_hash(self, /): ...
    def hasSourceHash(self, /): ...
    def has_source_hash(self, /): ...
    def initiate(): ...
    progress = None
    def readHeader(self, object, /): ...
    def read_header(self, object, /): ...
    def resetFootprintLength(self, /): ...
    def reset_footprint_length(self, /): ...
    result_hash = None
    def run(self, /): ...
    def setAllowMultifile(self, object, /): ...
    def setFootprintLength(self, object, /): ...
    def set_allow_multifile(self, object, /): ...
    def set_footprint_length(self, object, /): ...
    source_hash = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PerlinNoise:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getSeed(self, /): ...
    def get_seed(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PerlinNoise2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getSeed(self, /): ...
    def get_seed(self, /): ...
    def noise(): ...
    def setScale(): ...
    def set_scale(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PerlinNoise3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getSeed(self, /): ...
    def get_seed(self, /): ...
    def noise(): ...
    def setScale(): ...
    def set_scale(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PerspectiveLens:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FCAspectRatio:int = None
    FCCameraPlane:int = None
    FCKeystone:int = None
    FCOffAxis:int = None
    FCRoll:int = None
    FCShear:int = None
    FC_aspect_ratio:int = None
    FC_camera_plane:int = None
    FC_keystone:int = None
    FC_off_axis:int = None
    FC_roll:int = None
    FC_shear:int = None
    SCLeft:int = None
    SCMono:int = None
    SCRight:int = None
    SCStereo:int = None
    SC_left:int = None
    SC_mono:int = None
    SC_right:int = None
    SC_stereo:int = None
    aspect_ratio = None
    change_event = None
    def clear(self, /): ...
    def clearCustomFilmMat(self, /): ...
    def clearKeystone(self, /): ...
    def clearViewMat(self, /): ...
    def clear_custom_film_mat(self, /): ...
    def clear_keystone(self, /): ...
    def clear_view_mat(self, /): ...
    convergence_distance = None
    coordinate_system = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def extrude(): ...
    def extrudeDepth(): ...
    def extrudeVec(): ...
    def extrude_depth(): ...
    def extrude_vec(): ...
    far = None
    def fillin(): ...
    film_offset = None
    film_size = None
    focal_length = None
    fov = None
    def getAspectRatio(self, /): ...
    def getBamModified(self, /): ...
    def getChangeEvent(self, /): ...
    def getClassType(): ...
    def getConvergenceDistance(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getCustomFilmMat(self, /): ...
    def getDefaultFar(): ...
    def getDefaultNear(): ...
    def getFar(self, /): ...
    def getFilmMat(self, /): ...
    def getFilmMatInv(self, /): ...
    def getFilmOffset(self, /): ...
    def getFilmSize(self, /): ...
    def getFocalLength(self, /): ...
    def getFov(self, /): ...
    def getHfov(self, /): ...
    def getInterocularDistance(self, /): ...
    def getKeystone(self, /): ...
    def getLastChange(self, /): ...
    def getLensMat(self, /): ...
    def getLensMatInv(self, /): ...
    def getMinFov(self, /): ...
    def getNear(self, /): ...
    def getNodalPoint(self, /): ...
    def getProjectionMat(): ...
    def getProjectionMatInv(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUpVector(self, /): ...
    def getVfov(self, /): ...
    def getViewHpr(self, /): ...
    def getViewMat(self, /): ...
    def getViewVector(self, /): ...
    def get_aspect_ratio(self, /): ...
    def get_bam_modified(self, /): ...
    def get_change_event(self, /): ...
    def get_class_type(): ...
    def get_convergence_distance(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_custom_film_mat(self, /): ...
    def get_default_far(): ...
    def get_default_near(): ...
    def get_far(self, /): ...
    def get_film_mat(self, /): ...
    def get_film_mat_inv(self, /): ...
    def get_film_offset(self, /): ...
    def get_film_size(self, /): ...
    def get_focal_length(self, /): ...
    def get_fov(self, /): ...
    def get_hfov(self, /): ...
    def get_interocular_distance(self, /): ...
    def get_keystone(self, /): ...
    def get_last_change(self, /): ...
    def get_lens_mat(self, /): ...
    def get_lens_mat_inv(self, /): ...
    def get_min_fov(self, /): ...
    def get_near(self, /): ...
    def get_nodal_point(self, /): ...
    def get_projection_mat(): ...
    def get_projection_mat_inv(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_up_vector(self, /): ...
    def get_vfov(self, /): ...
    def get_view_hpr(self, /): ...
    def get_view_mat(self, /): ...
    def get_view_vector(self, /): ...
    interocular_distance = None
    def isExactType(self, object, /): ...
    def isLinear(self, /): ...
    def isOfType(self, object, /): ...
    def isOrthographic(self, /): ...
    def isPerspective(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_linear(self, /): ...
    def is_of_type(self, object, /): ...
    def is_orthographic(self, /): ...
    def is_perspective(self, /): ...
    keystone = None
    def makeBounds(self, /): ...
    def makeCopy(self, /): ...
    def makeGeometry(self, /): ...
    def make_bounds(self, /): ...
    def make_copy(self, /): ...
    def make_geometry(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    min_fov = None
    near = None
    nodal_point = None
    def output(self, object, /): ...
    def project(): ...
    def recomputeAll(self, /): ...
    def recompute_all(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def setAspectRatio(self, object, /): ...
    def setChangeEvent(self, object, /): ...
    def setConvergenceDistance(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setCustomFilmMat(self, object, /): ...
    def setFar(self, object, /): ...
    def setFilmOffset(): ...
    def setFilmSize(): ...
    def setFocalLength(self, object, /): ...
    def setFov(): ...
    def setFrustumFromCorners(): ...
    def setInterocularDistance(self, object, /): ...
    def setKeystone(self, object, /): ...
    def setMinFov(self, object, /): ...
    def setNear(self, object, /): ...
    def setNearFar(): ...
    def setViewHpr(): ...
    def setViewMat(self, object, /): ...
    def setViewVector(): ...
    def set_aspect_ratio(self, object, /): ...
    def set_change_event(self, object, /): ...
    def set_convergence_distance(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_custom_film_mat(self, object, /): ...
    def set_far(self, object, /): ...
    def set_film_offset(): ...
    def set_film_size(): ...
    def set_focal_length(self, object, /): ...
    def set_fov(): ...
    def set_frustum_from_corners(): ...
    def set_interocular_distance(self, object, /): ...
    def set_keystone(self, object, /): ...
    def set_min_fov(self, object, /): ...
    def set_near(self, object, /): ...
    def set_near_far(): ...
    def set_view_hpr(): ...
    def set_view_mat(self, object, /): ...
    def set_view_vector(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    view_hpr = None
    view_mat = None
    def write(): ...
class PfmFile:
    ...
    CTColor:int = None
    CTFourChannel:int = None
    CTGrayscale:int = None
    CTInvalid:int = None
    CTTwoChannel:int = None
    CT_color:int = None
    CT_four_channel:int = None
    CT_grayscale:int = None
    CT_invalid:int = None
    CT_two_channel:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Histogram:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getCount(self, object, /): ...
        def getNumPixels(self, /): ...
        def getPixel(self, object, /): ...
        def getPixels(self, /): ...
        def get_count(self, object, /): ...
        def get_num_pixels(self, /): ...
        def get_pixel(self, object, /): ...
        def get_pixels(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        def write(self, object, /): ...
    class PixelSpec:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def compareTo(self, object, /): ...
        def compare_to(self, object, /): ...
        def getAlpha(self, /): ...
        def getBlue(self, /): ...
        def getGreen(self, /): ...
        def getRed(self, /): ...
        def get_alpha(self, /): ...
        def get_blue(self, /): ...
        def get_green(self, /): ...
        def get_red(self, /): ...
        def output(self, object, /): ...
        def setAlpha(self, object, /): ...
        def setBlue(self, object, /): ...
        def setGreen(self, object, /): ...
        def setRed(self, object, /): ...
        def set_alpha(self, object, /): ...
        def set_blue(self, object, /): ...
        def set_green(self, object, /): ...
        def set_red(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class PixelSpecCount:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def addSubImage(): ...
    def add_sub_image(): ...
    def apply1dLut(): ...
    def applyCrop(): ...
    def applyExponent(): ...
    def applyMask(self, object, /): ...
    def apply_1d_lut(): ...
    def apply_crop(): ...
    def apply_exponent(): ...
    def apply_mask(self, object, /): ...
    def assign(self, object, /): ...
    def boxFilterFrom(): ...
    def box_filter_from(): ...
    def calcAutocrop(self, object, /): ...
    def calcAveragePoint(): ...
    def calcBilinearPoint(): ...
    def calcMinMax(): ...
    def calcTightBounds(): ...
    def calc_autocrop(self, object, /): ...
    def calc_average_point(): ...
    def calc_bilinear_point(): ...
    def calc_min_max(): ...
    def calc_tight_bounds(): ...
    def clear(): ...
    def clearNoDataValue(self, /): ...
    def clearToTexcoords(): ...
    def clear_no_data_value(self, /): ...
    def clear_to_texcoords(): ...
    color_space = None
    comment = None
    def computePlanarBounds(): ...
    def computeSamplePoint(): ...
    def compute_planar_bounds(): ...
    def compute_sample_point(): ...
    def copyChannel(): ...
    def copyChannelMasked(): ...
    def copySubImage(): ...
    def copy_channel(): ...
    def copy_channel_masked(): ...
    def copy_sub_image(): ...
    def divideSubImage(): ...
    def divide_sub_image(): ...
    def fill(self, object, /): ...
    def fillChannel(): ...
    def fillChannelMasked(): ...
    def fillChannelMaskedNan(self, object, /): ...
    def fillChannelNan(self, object, /): ...
    def fillNan(self, /): ...
    def fillNoDataValue(self, /): ...
    def fill_channel(): ...
    def fill_channel_masked(): ...
    def fill_channel_masked_nan(self, object, /): ...
    def fill_channel_nan(self, object, /): ...
    def fill_nan(self, /): ...
    def fill_no_data_value(self, /): ...
    def flip(): ...
    def forwardDistort(): ...
    def forward_distort(): ...
    def gammaCorrect(): ...
    def gammaCorrectAlpha(): ...
    def gamma_correct(): ...
    def gamma_correct_alpha(): ...
    def gaussianFilterFrom(): ...
    def gaussian_filter_from(): ...
    def getChannel(): ...
    def getColorSpace(self, /): ...
    def getColorType(self, /): ...
    def getComment(self, /): ...
    def getMaxval(self, /): ...
    def getNoDataValue(self, /): ...
    def getNumChannels(self, /): ...
    def getPoint(): ...
    def getPoint1(): ...
    def getPoint2(): ...
    def getPoint3(): ...
    def getPoint4(): ...
    def getPoints(self, /): ...
    def getScale(self, /): ...
    def getSize(self, /): ...
    def getType(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def get_channel(): ...
    def get_color_space(self, /): ...
    def get_color_type(self, /): ...
    def get_comment(self, /): ...
    def get_maxval(self, /): ...
    def get_no_data_value(self, /): ...
    def get_num_channels(self, /): ...
    def get_point(): ...
    def get_point1(): ...
    def get_point2(): ...
    def get_point3(): ...
    def get_point4(): ...
    def get_points(self, /): ...
    def get_scale(self, /): ...
    def get_size(self, /): ...
    def get_type(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def hasAlpha(): ...
    def hasNoDataThreshold(self, /): ...
    def hasNoDataValue(self, /): ...
    def hasPoint(): ...
    def hasType(self, /): ...
    def has_alpha(): ...
    def has_no_data_threshold(self, /): ...
    def has_no_data_value(self, /): ...
    def has_point(): ...
    def has_type(self, /): ...
    def indirect1dLookup(): ...
    def indirect_1d_lookup(): ...
    def isColumnEmpty(): ...
    def isGrayscale(): ...
    def isRowEmpty(): ...
    def isValid(self, /): ...
    def is_column_empty(): ...
    def is_grayscale(): ...
    def is_row_empty(): ...
    def is_valid(self, /): ...
    def load(self, object, /): ...
    maxval = None
    def merge(self, object, /): ...
    def modifyPoint(): ...
    def modifyPoint2(): ...
    def modifyPoint3(): ...
    def modifyPoint4(): ...
    def modify_point(): ...
    def modify_point2(): ...
    def modify_point3(): ...
    def modify_point4(): ...
    def multSubImage(): ...
    def mult_sub_image(): ...
    num_channels = None
    def output(self, object, /): ...
    def pullSpot(): ...
    def pull_spot(): ...
    def quickFilterFrom(self, object, /): ...
    def quick_filter_from(self, object, /): ...
    def read(): ...
    def readHeader(): ...
    def read_header(): ...
    def resize(): ...
    def reverseDistort(): ...
    def reverseRows(self, /): ...
    def reverse_distort(): ...
    def reverse_rows(self, /): ...
    scale = None
    def setChannel(): ...
    def setComment(self, object, /): ...
    def setNoDataChan4(self, object, /): ...
    def setNoDataNan(self, object, /): ...
    def setNoDataThreshold(self, object, /): ...
    def setNoDataValue(self, object, /): ...
    def setPoint(): ...
    def setPoint1(): ...
    def setPoint2(): ...
    def setPoint3(): ...
    def setPoint4(): ...
    def setScale(self, object, /): ...
    def setType(self, object, /): ...
    def setZeroSpecial(self, object, /): ...
    def set_channel(): ...
    def set_comment(self, object, /): ...
    def set_no_data_chan4(self, object, /): ...
    def set_no_data_nan(self, object, /): ...
    def set_no_data_threshold(self, object, /): ...
    def set_no_data_value(self, object, /): ...
    def set_point(): ...
    def set_point1(): ...
    def set_point2(): ...
    def set_point3(): ...
    def set_point4(): ...
    def set_scale(self, object, /): ...
    def set_type(self, object, /): ...
    def set_zero_special(self, object, /): ...
    size = None
    def store(self, object, /): ...
    def storeMask(): ...
    def store_mask(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    valid = None
    def write(): ...
    def xform(self, object, /): ...
class PfmVizzer:
    ...
    CTAuxVertex1:int = None
    CTAuxVertex2:int = None
    CTAuxVertex3:int = None
    CTBlend1:int = None
    CTNormal3:int = None
    CTTexcoord2:int = None
    CTTexcoord3:int = None
    CTVertex1:int = None
    CTVertex2:int = None
    CTVertex3:int = None
    CT_aux_vertex1:int = None
    CT_aux_vertex2:int = None
    CT_aux_vertex3:int = None
    CT_blend1:int = None
    CT_normal3:int = None
    CT_texcoord2:int = None
    CT_texcoord3:int = None
    CT_vertex1:int = None
    CT_vertex2:int = None
    CT_vertex3:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MFBack:int = None
    MFBoth:int = None
    MFFront:int = None
    MF_back:int = None
    MF_both:int = None
    MF_front:int = None
    def addVisColumn(): ...
    def add_vis_column(): ...
    def calcMaxUDisplacement(self, /): ...
    def calcMaxVDisplacement(self, /): ...
    def calc_max_u_displacement(self, /): ...
    def calc_max_v_displacement(self, /): ...
    def clearAuxPfm(self, /): ...
    def clearFlatTexcoordName(self, /): ...
    def clearVisBlend(self, /): ...
    def clearVisColumns(self, /): ...
    def clear_aux_pfm(self, /): ...
    def clear_flat_texcoord_name(self, /): ...
    def clear_vis_blend(self, /): ...
    def clear_vis_columns(self, /): ...
    def extrude(self, object, /): ...
    def generateVisMesh(): ...
    def generateVisPoints(self, /): ...
    def generate_vis_mesh(): ...
    def generate_vis_points(self, /): ...
    def getAuxPfm(self, /): ...
    def getFlatTexcoordName(self, /): ...
    def getKeepBeyondLens(self, /): ...
    def getPfm(self, /): ...
    def getVis2d(self, /): ...
    def getVisBlend(self, /): ...
    def getVisInverse(self, /): ...
    def get_aux_pfm(self, /): ...
    def get_flat_texcoord_name(self, /): ...
    def get_keep_beyond_lens(self, /): ...
    def get_pfm(self, /): ...
    def get_vis_2d(self, /): ...
    def get_vis_blend(self, /): ...
    def get_vis_inverse(self, /): ...
    def makeDisplacement(): ...
    def make_displacement(): ...
    def project(): ...
    def setAuxPfm(self, object, /): ...
    def setFlatTexcoordName(self, object, /): ...
    def setKeepBeyondLens(self, object, /): ...
    def setVis2d(self, object, /): ...
    def setVisBlend(self, object, /): ...
    def setVisInverse(self, object, /): ...
    def set_aux_pfm(self, object, /): ...
    def set_flat_texcoord_name(self, object, /): ...
    def set_keep_beyond_lens(self, object, /): ...
    def set_vis_2d(self, object, /): ...
    def set_vis_blend(self, object, /): ...
    def set_vis_inverse(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Pfstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class PiecewiseCurve:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjustPoint(): ...
    def adjustPt(): ...
    def adjustTangent(): ...
    def adjust_draw_mask(): ...
    def adjust_point(): ...
    def adjust_pt(): ...
    def adjust_tangent(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    def calcLength(): ...
    def calc_length(): ...
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findLength(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_length(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def get2ndtangent(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurveType(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxT(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDimensions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(): ...
    def getPrevTransform(): ...
    def getPt(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTangent(): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_2ndtangent(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve_type(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_t(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_dimensions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(): ...
    def get_prev_transform(): ...
    def get_pt(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tangent(): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def recompute(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurveType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNumDimensions(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_dimensions(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stitch(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeEgg(): ...
    def write_egg(): ...
class Pifstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class PipeOcclusionCullTraverser:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def drawBoundingVolume(): ...
    def draw_bounding_volume(): ...
    def endTraverse(self, /): ...
    def end_traverse(self, /): ...
    def flushLevel(): ...
    def flush_level(): ...
    def getBuffer(self, /): ...
    def getCameraMask(self, /): ...
    def getCameraTransform(self, /): ...
    def getClassType(): ...
    def getCurrentThread(self, /): ...
    def getDepthOffsetDecals(self, /): ...
    def getEffectiveIncompleteRender(self, /): ...
    def getGsg(self, /): ...
    def getInitialState(self, /): ...
    def getOcclusionMask(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getTagStateKey(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getViewFrustum(self, /): ...
    def getWorldTransform(self, /): ...
    def get_buffer(self, /): ...
    def get_camera_mask(self, /): ...
    def get_camera_transform(self, /): ...
    def get_class_type(): ...
    def get_current_thread(self, /): ...
    def get_depth_offset_decals(self, /): ...
    def get_effective_incomplete_render(self, /): ...
    def get_gsg(self, /): ...
    def get_initial_state(self, /): ...
    def get_occlusion_mask(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_tag_state_key(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_view_frustum(self, /): ...
    def get_world_transform(self, /): ...
    def hasTagStateKey(self, /): ...
    def has_tag_state_key(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setCameraMask(self, object, /): ...
    def setOcclusionMask(self, object, /): ...
    def setScene(): ...
    def setViewFrustum(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_occlusion_mask(self, object, /): ...
    def set_scene(): ...
    def set_view_frustum(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def traverse(self, object, /): ...
    def traverseBelow(self, object, /): ...
    def traverse_below(self, object, /): ...
    type = None
    def unref(self, /): ...
    def upcastToCullTraverser(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_CullTraverser(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class Pixel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    b = None
    g = None
    def output(self, object, /): ...
    r = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Plane:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class PlaneD:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class PlaneF:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def distToPlane(self, object, /): ...
    def dist_to_plane(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def flip(self, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNormal(self, /): ...
    def getNumComponents(): ...
    def getPoint(self, /): ...
    def getReflectionMat(self, /): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_normal(self, /): ...
    def get_num_components(): ...
    def get_point(self, /): ...
    def get_reflection_mat(self, /): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def intersectsLine(): ...
    def intersectsPlane(): ...
    def intersects_line(): ...
    def intersects_plane(): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def write(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class PlaneNode:
    ...
    CECollision:int = None
    CEVisible:int = None
    CE_collision:int = None
    CE_visible:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    clip_effect = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getClipEffect(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPlane(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVizScale(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_clip_effect(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_plane(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_viz_scale(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    plane = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setClipEffect(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPlane(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVizScale(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_clip_effect(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_plane(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_viz_scale(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    viz_scale = None
    def write(): ...
class Pofstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class Point2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Point2D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Point2F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Point3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Point3D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Point3F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def origin(): ...
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def rfu(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Point4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class Point4D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class Point4F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class PointLight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    attenuation = None
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSpecularColor(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_specular_color(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getMaxDistance(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_max_distance(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_distance = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    point = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttenuation(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setMaxDistance(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPoint(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setSpecularColor(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attenuation(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_max_distance(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_point(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_specular_color(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    specular_color = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PointerData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getInWindow(self, /): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_in_window(self, /): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    id = None
    in_window = None
    pressure = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    x = None
    y = None
class PointerEventList:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addEvent(): ...
    def add_event(): ...
    def clear(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encircles(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getDirection(self, object, /): ...
    def getDx(self, object, /): ...
    def getDy(self, object, /): ...
    def getInWindow(self, object, /): ...
    def getLength(self, object, /): ...
    def getNumEvents(self, /): ...
    def getRefCount(self, /): ...
    def getRotation(self, object, /): ...
    def getSequence(self, object, /): ...
    def getTime(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getValueType(self, /): ...
    def getXpos(self, object, /): ...
    def getYpos(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_direction(self, object, /): ...
    def get_dx(self, object, /): ...
    def get_dy(self, object, /): ...
    def get_in_window(self, object, /): ...
    def get_length(self, object, /): ...
    def get_num_events(self, /): ...
    def get_ref_count(self, /): ...
    def get_rotation(self, object, /): ...
    def get_sequence(self, object, /): ...
    def get_time(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_value_type(self, /): ...
    def get_xpos(self, object, /): ...
    def get_ypos(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def matchPattern(): ...
    def match_pattern(): ...
    def output(self, object, /): ...
    def popFront(self, /): ...
    def pop_front(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def totalTurns(self, object, /): ...
    def total_turns(self, object, /): ...
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class PointerToArrayBaseDouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseLVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUnsignedChar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBaseUshort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_UnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_UnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_UnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_UnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_UnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_unsigned_char:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayBase_ushort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayDouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayLVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUnsignedChar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArrayUshort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_UnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_UnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_UnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_UnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_UnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_unsigned_char:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToArray_ushort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def count(self, object, /): ...
    def emptyArray(): ...
    def empty_array(): ...
    def getData(self, /): ...
    def getElement(self, object, /): ...
    def getHash(self, /): ...
    def getNodeRefCount(self, /): ...
    def getRefCount(self, /): ...
    def getSubdata(): ...
    def get_data(self, /): ...
    def get_element(self, object, /): ...
    def get_hash(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_ref_count(self, /): ...
    def get_subdata(): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def popBack(self, /): ...
    def pop_back(self, /): ...
    def pushBack(self, object, /): ...
    def push_back(self, object, /): ...
    def setData(self, object, /): ...
    def setElement(): ...
    def setSubdata(): ...
    def set_data(self, object, /): ...
    def set_element(): ...
    def set_subdata(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseConnection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorDouble:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorFloat:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorInt:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorLVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUnsignedChar:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseReferenceCountedVectorUshort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBaseVirtualFileMount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_Connection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LMatrix3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LMatrix3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase2d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase2f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase2i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase3d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase3f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_LVecBase3i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_double:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_float:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_int:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_unsigned_char:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_ReferenceCountedVector_ushort:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToBase_VirtualFileMount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToConnection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def p(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToVirtualFileMount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def p(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerToVoid:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerTo_Connection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def p(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerTo_VirtualFileMount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def is_null(self, /): ...
    def output(self, object, /): ...
    def p(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PointerType:
    ...
    eraser = None
    finger = None
    mouse = None
    stylus = None
    unknown = None
class PolylightEffect:
    ...
    CTAll:int = None
    CTProximal:int = None
    CT_all:int = None
    CT_proximal:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLight(self, object, /): ...
    def add_light(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getContrib(self, /): ...
    def getEffectCenter(self, /): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWeight(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_contrib(self, /): ...
    def get_effect_center(self, /): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_weight(self, /): ...
    def hasLight(self, object, /): ...
    def has_light(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeLight(self, object, /): ...
    def remove_light(self, object, /): ...
    def setContrib(self, object, /): ...
    def setEffectCenter(self, object, /): ...
    def setWeight(self, object, /): ...
    def set_contrib(self, object, /): ...
    def set_effect_center(self, object, /): ...
    def set_weight(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class PolylightNode:
    ...
    ALINEAR:int = None
    AQUADRATIC:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    FCUSTOM:int = None
    FRANDOM:int = None
    FSIN:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_tags(self, object, /): ...
    def compare_to(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def disable(self, /): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def enable(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def flickerOff(self, /): ...
    def flickerOn(self, /): ...
    def flicker_off(self, /): ...
    def flicker_on(self, /): ...
    def getA0(self, /): ...
    def getA1(self, /): ...
    def getA2(self, /): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorScenegraph(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getFlickerType(self, /): ...
    def getFreq(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOffset(self, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPos(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getScale(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getStepSize(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_a0(self, /): ...
    def get_a1(self, /): ...
    def get_a2(self, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_scenegraph(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_flicker_type(self, /): ...
    def get_freq(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_offset(self, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_pos(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_scale(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_step_size(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isEnabled(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isFlickering(self, /): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_enabled(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_flickering(self, /): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setA0(self, object, /): ...
    def setA1(self, object, /): ...
    def setA2(self, object, /): ...
    def setAttenuation(self, object, /): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setColor(): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFlickerType(self, object, /): ...
    def setFreq(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOffset(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPos(): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRadius(self, object, /): ...
    def setScale(self, object, /): ...
    def setState(): ...
    def setStepSize(self, object, /): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_a0(self, object, /): ...
    def set_a1(self, object, /): ...
    def set_a2(self, object, /): ...
    def set_attenuation(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_color(): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_flicker_type(self, object, /): ...
    def set_freq(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_offset(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_pos(): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_radius(self, object, /): ...
    def set_scale(self, object, /): ...
    def set_state(): ...
    def set_step_size(self, object, /): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class PortalMask:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def floodBitsDown(self, /): ...
    def floodBitsUp(self, /): ...
    def floodDownInPlace(self, /): ...
    def floodUpInPlace(self, /): ...
    def flood_bits_down(self, /): ...
    def flood_bits_up(self, /): ...
    def flood_down_in_place(self, /): ...
    def flood_up_in_place(self, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getKey(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getWord(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_key(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_word(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def keepNextHighestBit(): ...
    def keepNextLowestBit(): ...
    def keep_next_highest_bit(): ...
    def keep_next_lowest_bit(): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def setWord(self, object, /): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def set_word(self, object, /): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class PortalNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def addVertex(self, object, /): ...
    def add_child(): ...
    def add_stashed(): ...
    def add_vertex(self, object, /): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    cell_in = None
    cell_out = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clearVertices(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def clear_vertices(self, /): ...
    clip_plane = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    from_portal_mask = None
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCellIn(self, /): ...
    def getCellOut(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getFromPortalMask(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getIntoPortalMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMaxDepth(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumVertices(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPortalGeom(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVertex(self, object, /): ...
    def getVertices(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_cell_in(self, /): ...
    def get_cell_out(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_from_portal_mask(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_into_portal_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_max_depth(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_vertices(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_portal_geom(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_vertex(self, object, /): ...
    def get_vertices(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    into_portal_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isClipPlane(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOpen(self, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isVisible(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_clip_plane(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_open(self, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_visible(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_depth = None
    name = None
    nested_vertices = None
    open = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    portal_geom = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCellIn(self, object, /): ...
    def setCellOut(self, object, /): ...
    def setClipPlane(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFromPortalMask(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setIntoPortalMask(self, object, /): ...
    def setMaxDepth(self, object, /): ...
    def setName(self, object, /): ...
    def setOpen(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPortalGeom(self, object, /): ...
    def setPortalMask(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVisible(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_cell_in(self, object, /): ...
    def set_cell_out(self, object, /): ...
    def set_clip_plane(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_from_portal_mask(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_into_portal_mask(self, object, /): ...
    def set_max_depth(self, object, /): ...
    def set_name(self, object, /): ...
    def set_open(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_portal_geom(self, object, /): ...
    def set_portal_mask(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_visible(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    vertices = None
    visible = None
    def write(): ...
class PreparedGraphicsObjects:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def dequeueGeom(self, object, /): ...
    def dequeueIndexBuffer(self, object, /): ...
    def dequeueSampler(self, object, /): ...
    def dequeueShader(self, object, /): ...
    def dequeueShaderBuffer(self, object, /): ...
    def dequeueTexture(self, object, /): ...
    def dequeueVertexBuffer(self, object, /): ...
    def dequeue_geom(self, object, /): ...
    def dequeue_index_buffer(self, object, /): ...
    def dequeue_sampler(self, object, /): ...
    def dequeue_shader(self, object, /): ...
    def dequeue_shader_buffer(self, object, /): ...
    def dequeue_texture(self, object, /): ...
    def dequeue_vertex_buffer(self, object, /): ...
    def enqueueGeom(self, object, /): ...
    def enqueueIndexBuffer(self, object, /): ...
    def enqueueSampler(self, object, /): ...
    def enqueueShader(self, object, /): ...
    def enqueueShaderBuffer(self, object, /): ...
    def enqueueTexture(self, object, /): ...
    def enqueueVertexBuffer(self, object, /): ...
    def enqueue_geom(self, object, /): ...
    def enqueue_index_buffer(self, object, /): ...
    def enqueue_sampler(self, object, /): ...
    def enqueue_shader(self, object, /): ...
    def enqueue_shader_buffer(self, object, /): ...
    def enqueue_texture(self, object, /): ...
    def enqueue_vertex_buffer(self, object, /): ...
    def getClassType(): ...
    def getGraphicsMemoryLimit(self, /): ...
    def getName(self, /): ...
    def getNumPrepared(self, /): ...
    def getNumPreparedGeoms(self, /): ...
    def getNumPreparedIndexBuffers(self, /): ...
    def getNumPreparedSamplers(self, /): ...
    def getNumPreparedShaderBuffers(self, /): ...
    def getNumPreparedShaders(self, /): ...
    def getNumPreparedTextures(self, /): ...
    def getNumPreparedVertexBuffers(self, /): ...
    def getNumQueued(self, /): ...
    def getNumQueuedGeoms(self, /): ...
    def getNumQueuedIndexBuffers(self, /): ...
    def getNumQueuedSamplers(self, /): ...
    def getNumQueuedShaderBuffers(self, /): ...
    def getNumQueuedShaders(self, /): ...
    def getNumQueuedTextures(self, /): ...
    def getNumQueuedVertexBuffers(self, /): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_graphics_memory_limit(self, /): ...
    def get_name(self, /): ...
    def get_num_prepared(self, /): ...
    def get_num_prepared_geoms(self, /): ...
    def get_num_prepared_index_buffers(self, /): ...
    def get_num_prepared_samplers(self, /): ...
    def get_num_prepared_shader_buffers(self, /): ...
    def get_num_prepared_shaders(self, /): ...
    def get_num_prepared_textures(self, /): ...
    def get_num_prepared_vertex_buffers(self, /): ...
    def get_num_queued(self, /): ...
    def get_num_queued_geoms(self, /): ...
    def get_num_queued_index_buffers(self, /): ...
    def get_num_queued_samplers(self, /): ...
    def get_num_queued_shader_buffers(self, /): ...
    def get_num_queued_shaders(self, /): ...
    def get_num_queued_textures(self, /): ...
    def get_num_queued_vertex_buffers(self, /): ...
    def get_ref_count(self, /): ...
    def isGeomPrepared(self, object, /): ...
    def isGeomQueued(self, object, /): ...
    def isIndexBufferPrepared(self, object, /): ...
    def isIndexBufferQueued(self, object, /): ...
    def isSamplerPrepared(self, object, /): ...
    def isSamplerQueued(self, object, /): ...
    def isShaderBufferPrepared(self, object, /): ...
    def isShaderBufferQueued(self, object, /): ...
    def isShaderPrepared(self, object, /): ...
    def isShaderQueued(self, object, /): ...
    def isTexturePrepared(self, object, /): ...
    def isTextureQueued(self, object, /): ...
    def isVertexBufferPrepared(self, object, /): ...
    def isVertexBufferQueued(self, object, /): ...
    def is_geom_prepared(self, object, /): ...
    def is_geom_queued(self, object, /): ...
    def is_index_buffer_prepared(self, object, /): ...
    def is_index_buffer_queued(self, object, /): ...
    def is_sampler_prepared(self, object, /): ...
    def is_sampler_queued(self, object, /): ...
    def is_shader_buffer_prepared(self, object, /): ...
    def is_shader_buffer_queued(self, object, /): ...
    def is_shader_prepared(self, object, /): ...
    def is_shader_queued(self, object, /): ...
    def is_texture_prepared(self, object, /): ...
    def is_texture_queued(self, object, /): ...
    def is_vertex_buffer_prepared(self, object, /): ...
    def is_vertex_buffer_queued(self, object, /): ...
    def prepareGeomNow(): ...
    def prepareIndexBufferNow(): ...
    def prepareShaderBufferNow(): ...
    def prepareShaderNow(): ...
    def prepareTextureNow(): ...
    def prepareVertexBufferNow(): ...
    def prepare_geom_now(): ...
    def prepare_index_buffer_now(): ...
    def prepare_shader_buffer_now(): ...
    def prepare_shader_now(): ...
    def prepare_texture_now(): ...
    def prepare_vertex_buffer_now(): ...
    def ref(self, /): ...
    ref_count = None
    def releaseAll(self, /): ...
    def releaseAllGeoms(self, /): ...
    def releaseAllIndexBuffers(self, /): ...
    def releaseAllSamplers(self, /): ...
    def releaseAllShaderBuffers(self, /): ...
    def releaseAllShaders(self, /): ...
    def releaseAllTextures(self, /): ...
    def releaseAllVertexBuffers(self, /): ...
    def releaseGeom(self, object, /): ...
    def releaseIndexBuffer(self, object, /): ...
    def releaseSampler(self, object, /): ...
    def releaseShader(self, object, /): ...
    def releaseShaderBuffer(self, object, /): ...
    def releaseTexture(self, object, /): ...
    def releaseVertexBuffer(self, object, /): ...
    def release_all(self, /): ...
    def release_all_geoms(self, /): ...
    def release_all_index_buffers(self, /): ...
    def release_all_samplers(self, /): ...
    def release_all_shader_buffers(self, /): ...
    def release_all_shaders(self, /): ...
    def release_all_textures(self, /): ...
    def release_all_vertex_buffers(self, /): ...
    def release_geom(self, object, /): ...
    def release_index_buffer(self, object, /): ...
    def release_sampler(self, object, /): ...
    def release_shader(self, object, /): ...
    def release_shader_buffer(self, object, /): ...
    def release_texture(self, object, /): ...
    def release_vertex_buffer(self, object, /): ...
    def setGraphicsMemoryLimit(self, object, /): ...
    def set_graphics_memory_limit(self, object, /): ...
    def showGraphicsMemoryLru(self, object, /): ...
    def showResidencyTrackers(self, object, /): ...
    def show_graphics_memory_lru(self, object, /): ...
    def show_residency_trackers(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class ProfileTimer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def consolidateAllTo(): ...
    def consolidateTo(): ...
    def getTotalTime(self, /): ...
    def init(): ...
    def mark(self, object, /): ...
    def off(): ...
    def on(self, /): ...
    def printAllTo(): ...
    def printTo(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class PythonCallbackObject:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    function = None
    def getClassType(): ...
    def getFunction(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_function(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setFunction(self, object, /): ...
    def set_function(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class PythonTask:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    delayTime = None
    delay_time = None
    def done(self, /): ...
    done_event = None
    dt = None
    frame = None
    def gather(): ...
    def getArgs(self, /): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getFunction(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getOwner(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUponDeath(self, /): ...
    def getWakeTime(self, /): ...
    def get_args(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_function(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_owner(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_upon_death(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setArgs(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setFunction(self, object, /): ...
    def setName(self, object, /): ...
    def setOwner(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def setUponDeath(self, object, /): ...
    def set_args(): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_function(self, object, /): ...
    def set_name(self, object, /): ...
    def set_owner(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    def set_upon_death(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    time = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
    wakeTime = None
    wake_time = None
class PythonThread:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    args = None
    def bindThread(): ...
    def bind_thread(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerYield(): ...
    def consider_yield(): ...
    current_pipeline_stage:int = None
    current_task = None
    current_thread = None
    external_thread = None
    def forceYield(): ...
    def force_yield(): ...
    def getClassType(): ...
    def getCurrentPipelineStage(): ...
    def getCurrentTask(self, /): ...
    def getCurrentThread(): ...
    def getExternalThread(): ...
    def getMainThread(): ...
    def getName(self, /): ...
    def getPipelineStage(self, /): ...
    def getPstatsIndex(self, /): ...
    def getPythonIndex(self, /): ...
    def getRefCount(self, /): ...
    def getSyncName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUniqueId(self, /): ...
    def get_class_type(): ...
    def get_current_pipeline_stage(): ...
    def get_current_task(self, /): ...
    def get_current_thread(): ...
    def get_external_thread(): ...
    def get_main_thread(): ...
    def get_name(self, /): ...
    def get_pipeline_stage(self, /): ...
    def get_pstats_index(self, /): ...
    def get_python_index(self, /): ...
    def get_ref_count(self, /): ...
    def get_sync_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique_id(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isJoinable(self, /): ...
    def isOfType(self, object, /): ...
    def isSimpleThreads(): ...
    def isStarted(self, /): ...
    def isThreadingSupported(): ...
    def isTrueThreads(): ...
    def is_exact_type(self, object, /): ...
    def is_joinable(self, /): ...
    def is_of_type(self, object, /): ...
    def is_simple_threads(): ...
    def is_started(self, /): ...
    def is_threading_supported(): ...
    def is_true_threads(): ...
    def join(self, /): ...
    joinable = None
    main_thread = None
    name = None
    def output(self, object, /): ...
    def outputBlocker(self, object, /): ...
    def output_blocker(self, object, /): ...
    pipeline_stage = None
    def preempt(self, /): ...
    def prepareForExit(): ...
    def prepare_for_exit(): ...
    pstats_index = None
    python_index = None
    def ref(self, /): ...
    ref_count = None
    def setMinPipelineStage(self, object, /): ...
    def setName(self, object, /): ...
    def setPipelineStage(self, object, /): ...
    def setPythonIndex(self, object, /): ...
    def set_min_pipeline_stage(self, object, /): ...
    def set_name(self, object, /): ...
    def set_pipeline_stage(self, object, /): ...
    def set_python_index(self, object, /): ...
    simple_threads = None
    def sleep(object, /): ...
    def start(): ...
    started = None
    sync_name = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    threading_supported = None
    true_threads = None
    type = None
    unique_id = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def writeStatus(object, /): ...
    def write_status(object, /): ...
class QuadBitMaskNative:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def extract(): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def outputBinary(): ...
    def outputHex(): ...
    def output_binary(): ...
    def output_hex(): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    def store(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class Quat:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class QuatD:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class QuatF:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almostSameDirection(): ...
    def almost_equal(): ...
    def almost_same_direction(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def conjugate(self, /): ...
    def conjugateFrom(self, object, /): ...
    def conjugateInPlace(self, /): ...
    def conjugate_from(self, object, /): ...
    def conjugate_in_place(self, /): ...
    def dot(self, object, /): ...
    def extractToMatrix(self, object, /): ...
    def extract_to_matrix(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getAngle(self, /): ...
    def getAngleRad(self, /): ...
    def getAxis(self, /): ...
    def getAxisNormalized(self, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getForward(): ...
    def getHash(): ...
    def getHpr(): ...
    def getI(self, /): ...
    def getJ(self, /): ...
    def getK(self, /): ...
    def getNumComponents(): ...
    def getR(self, /): ...
    def getRight(): ...
    def getUp(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_angle(self, /): ...
    def get_angle_rad(self, /): ...
    def get_axis(self, /): ...
    def get_axis_normalized(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_forward(): ...
    def get_hash(): ...
    def get_hpr(): ...
    def get_i(self, /): ...
    def get_j(self, /): ...
    def get_k(self, /): ...
    def get_num_components(): ...
    def get_r(self, /): ...
    def get_right(): ...
    def get_up(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def identQuat(): ...
    def ident_quat(): ...
    def invertFrom(self, object, /): ...
    def invertInPlace(self, /): ...
    def invert_from(self, object, /): ...
    def invert_in_place(self, /): ...
    def isAlmostIdentity(self, object, /): ...
    def isIdentity(self, /): ...
    def isNan(self, /): ...
    def isSameDirection(self, object, /): ...
    def is_almost_identity(self, object, /): ...
    def is_identity(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def is_same_direction(self, object, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def multiply(self, object, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def pureImaginary(object, /): ...
    def pure_imaginary(object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setFromAxisAngle(): ...
    def setFromAxisAngleRad(): ...
    def setFromMatrix(self, object, /): ...
    def setHpr(): ...
    def setI(self, object, /): ...
    def setJ(self, object, /): ...
    def setK(self, object, /): ...
    def setR(self, object, /): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_from_axis_angle(): ...
    def set_from_axis_angle_rad(): ...
    def set_from_matrix(self, object, /): ...
    def set_hpr(): ...
    def set_i(self, object, /): ...
    def set_j(self, object, /): ...
    def set_k(self, object, /): ...
    def set_r(self, object, /): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    def xform(self, object, /): ...
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class QueuedConnectionListener:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def getCurrentQueueSize(self, /): ...
    def getManager(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNewConnection(): ...
    def getNumThreads(self, /): ...
    def getOverflowFlag(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_manager(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_new_connection(): ...
    def get_num_threads(self, /): ...
    def get_overflow_flag(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_polling(self, /): ...
    def newConnectionAvailable(self, /): ...
    def new_connection_available(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConnectionListener(self, /): ...
    def upcastToQueuedReturnConnectionListenerData(self, /): ...
    def upcast_to_ConnectionListener(self, /): ...
    def upcast_to_QueuedReturn_ConnectionListenerData(self, /): ...
class QueuedConnectionManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class Interface:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getBroadcast(self, /): ...
        def getIp(self, /): ...
        def getMacAddress(self, /): ...
        def getName(self, /): ...
        def getNetmask(self, /): ...
        def getP2p(self, /): ...
        def get_broadcast(self, /): ...
        def get_ip(self, /): ...
        def get_mac_address(self, /): ...
        def get_name(self, /): ...
        def get_netmask(self, /): ...
        def get_p2p(self, /): ...
        def hasBroadcast(self, /): ...
        def hasIp(self, /): ...
        def hasNetmask(self, /): ...
        def hasP2p(self, /): ...
        def has_broadcast(self, /): ...
        def has_ip(self, /): ...
        def has_netmask(self, /): ...
        def has_p2p(self, /): ...
        def output(self, object, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    def closeConnection(self, object, /): ...
    def close_connection(self, object, /): ...
    def getCurrentQueueSize(self, /): ...
    def getHostName(): ...
    def getInterface(self, object, /): ...
    def getInterfaces(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNumInterfaces(self, /): ...
    def getOverflowFlag(self, /): ...
    def getResetConnection(self, object, /): ...
    def get_current_queue_size(self, /): ...
    def get_host_name(): ...
    def get_interface(self, object, /): ...
    def get_interfaces(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_num_interfaces(self, /): ...
    def get_overflow_flag(self, /): ...
    def get_reset_connection(self, object, /): ...
    host_name:str = None
    interfaces = None
    def openTCPClientConnection(): ...
    def openTCPServerRendezvous(): ...
    def openUDPConnection(): ...
    def open_TCP_client_connection(): ...
    def open_TCP_server_rendezvous(): ...
    def open_UDP_connection(): ...
    def resetConnectionAvailable(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_connection_available(self, /): ...
    def reset_overflow_flag(self, /): ...
    def scanInterfaces(self, /): ...
    def scan_interfaces(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConnectionManager(self, /): ...
    def upcastToQueuedReturnPointerToConnection(self, /): ...
    def upcast_to_ConnectionManager(self, /): ...
    def upcast_to_QueuedReturn_PointerTo_Connection(self, /): ...
    def waitForReaders(self, object, /): ...
    def wait_for_readers(self, object, /): ...
class QueuedConnectionReader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def dataAvailable(self, /): ...
    def data_available(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getData(self, object, /): ...
    def getManager(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getNumThreads(self, /): ...
    def getOverflowFlag(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_data(self, object, /): ...
    def get_manager(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_num_threads(self, /): ...
    def get_overflow_flag(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_polling(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToConnectionReader(self, /): ...
    def upcastToQueuedReturnNetDatagram(self, /): ...
    def upcast_to_ConnectionReader(self, /): ...
    def upcast_to_QueuedReturn_NetDatagram(self, /): ...
class QueuedReturnConnectionListenerData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturnDatagram:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturnNetDatagram:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturnPointerToConnection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturn_ConnectionListenerData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturn_Datagram:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturn_NetDatagram:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class QueuedReturn_PointerTo_Connection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCurrentQueueSize(self, /): ...
    def getMaxQueueSize(self, /): ...
    def getOverflowFlag(self, /): ...
    def get_current_queue_size(self, /): ...
    def get_max_queue_size(self, /): ...
    def get_overflow_flag(self, /): ...
    def resetOverflowFlag(self, /): ...
    def reset_overflow_flag(self, /): ...
    def setMaxQueueSize(self, object, /): ...
    def set_max_queue_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Ramfile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clear(self, /): ...
    def getData(self, /): ...
    def getDataSize(self, /): ...
    def get_data(self, /): ...
    def get_data_size(self, /): ...
    def read(self, object, /): ...
    def readline(self, /): ...
    def readlines(self, /): ...
    def seek(self, object, /): ...
    def tell(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Randomizer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getNextSeed(): ...
    def getSeed(self, /): ...
    def get_next_seed(): ...
    def get_seed(self, /): ...
    def randomInt(self, object, /): ...
    def randomReal(self, object, /): ...
    def randomRealUnit(self, /): ...
    def random_int(self, object, /): ...
    def random_real(self, object, /): ...
    def random_real_unit(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ReMutex:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def elevateLock(self, /): ...
    def elevate_lock(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tryAcquire(): ...
    def try_acquire(): ...
class ReMutexDirect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def debugIsLocked(self, /): ...
    def debug_is_locked(self, /): ...
    def elevateLock(self, /): ...
    def elevate_lock(self, /): ...
    def getName(self, /): ...
    def get_name(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tryAcquire(): ...
    def try_acquire(): ...
class RecentConnectionReader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addConnection(self, object, /): ...
    def add_connection(self, object, /): ...
    def dataAvailable(self, /): ...
    def data_available(self, /): ...
    def getData(self, object, /): ...
    def getManager(self, /): ...
    def getNumThreads(self, /): ...
    def getRawMode(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_data(self, object, /): ...
    def get_manager(self, /): ...
    def get_num_threads(self, /): ...
    def get_raw_mode(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isConnectionOk(self, object, /): ...
    def isPolling(self, /): ...
    def is_connection_ok(self, object, /): ...
    def is_polling(self, /): ...
    def poll(self, /): ...
    def removeConnection(self, object, /): ...
    def remove_connection(self, object, /): ...
    def setRawMode(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_raw_mode(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def shutdown(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class RecorderBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def get_class_type(): ...
    def isPlaying(self, /): ...
    def isRecording(self, /): ...
    def is_playing(self, /): ...
    def is_recording(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class RecorderController:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addRecorder(): ...
    def add_recorder(): ...
    def beginPlayback(self, object, /): ...
    def beginRecord(self, object, /): ...
    def begin_playback(self, object, /): ...
    def begin_record(self, object, /): ...
    def close(self, /): ...
    def getClassType(): ...
    def getClockOffset(self, /): ...
    def getFilename(self, /): ...
    def getFrameOffset(self, /): ...
    def getFrameTie(self, /): ...
    def getRandomSeed(self, /): ...
    def getRecorder(self, object, /): ...
    def getRefCount(self, /): ...
    def getStartTime(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_clock_offset(self, /): ...
    def get_filename(self, /): ...
    def get_frame_offset(self, /): ...
    def get_frame_tie(self, /): ...
    def get_random_seed(self, /): ...
    def get_recorder(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_start_time(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasRecorder(self, object, /): ...
    def has_recorder(self, object, /): ...
    def isError(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOpen(self, /): ...
    def isPlaying(self, /): ...
    def isRecording(self, /): ...
    def is_error(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_open(self, /): ...
    def is_playing(self, /): ...
    def is_recording(self, /): ...
    def playFrame(self, /): ...
    def play_frame(self, /): ...
    def recordFrame(self, /): ...
    def record_frame(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeRecorder(self, object, /): ...
    def remove_recorder(self, object, /): ...
    def setFrameTie(self, object, /): ...
    def setRandomSeed(self, object, /): ...
    def set_frame_tie(self, object, /): ...
    def set_random_seed(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class RectangleLight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getMaxDistance(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_max_distance(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_distance = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setMaxDistance(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_max_distance(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class RenderAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class RenderAttribRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getGlobalPtr(): ...
    def getMaxSlots(): ...
    def getNumSlots(self, /): ...
    def getNumSortedSlots(self, /): ...
    def getSlot(self, object, /): ...
    def getSlotDefault(self, object, /): ...
    def getSlotSort(self, object, /): ...
    def getSlotType(self, object, /): ...
    def getSortedSlot(self, object, /): ...
    def get_global_ptr(): ...
    def get_max_slots(): ...
    def get_num_slots(self, /): ...
    def get_num_sorted_slots(self, /): ...
    def get_slot(self, object, /): ...
    def get_slot_default(self, object, /): ...
    def get_slot_sort(self, object, /): ...
    def get_slot_type(self, object, /): ...
    def get_sorted_slot(self, object, /): ...
    def setSlotSort(): ...
    def set_slot_sort(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class RenderEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class RenderEffects:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addEffect(self, object, /): ...
    def add_effect(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findEffect(self, object, /): ...
    def find_effect(self, object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getEffect(self, object, /): ...
    def getNumEffects(self, /): ...
    def getNumStates(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_effect(self, object, /): ...
    def get_num_effects(self, /): ...
    def get_num_states(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listStates(object, /): ...
    def list_states(object, /): ...
    def make(): ...
    def makeEmpty(): ...
    def make_empty(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeEffect(self, object, /): ...
    def remove_effect(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateStates(): ...
    def validate_states(): ...
    def write(): ...
class RenderModeAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MFilled:int = None
    MFilledFlat:int = None
    MFilledWireframe:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPoint:int = None
    MPointSprite:int = None
    MUnchanged:int = None
    MUnused:int = None
    MUnused2:int = None
    MWireframe:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_filled:int = None
    M_filled_flat:int = None
    M_filled_wireframe:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point:int = None
    M_point_sprite:int = None
    M_unchanged:int = None
    M_unused:int = None
    M_unused2:int = None
    M_wireframe:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getGeomRendering(self, object, /): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getPerspective(self, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getThickness(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def getWireframeColor(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_geom_rendering(self, object, /): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_perspective(self, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_thickness(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def get_wireframe_color(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    perspective = None
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    thickness = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    wireframe_color = None
    def write(): ...
class RenderState:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RCache:int = None
    RNode:int = None
    R_cache:int = None
    R_node:int = None
    def addAttrib(): ...
    def add_attrib(): ...
    def adjustAllPriorities(self, object, /): ...
    def adjust_all_priorities(self, object, /): ...
    attribs = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearCache(): ...
    def clearMungerCache(): ...
    def clear_cache(): ...
    def clear_munger_cache(): ...
    def compareMask(): ...
    def compareSort(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_mask(): ...
    def compare_sort(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def cullCallback(): ...
    def cull_callback(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getAttrib(self, object, /): ...
    def getAttribDef(self, object, /): ...
    def getBamModified(self, /): ...
    def getBinIndex(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCompositionCache(self, /): ...
    def getCompositionCacheNumEntries(self, /): ...
    def getCompositionCacheResult(self, object, /): ...
    def getCompositionCacheSize(self, /): ...
    def getCompositionCacheSource(self, object, /): ...
    def getDrawOrder(self, /): ...
    def getGeomRendering(self, object, /): ...
    def getHash(self, /): ...
    def getInvertCompositionCache(self, /): ...
    def getInvertCompositionCacheNumEntries(self, /): ...
    def getInvertCompositionCacheResult(self, object, /): ...
    def getInvertCompositionCacheSize(self, /): ...
    def getInvertCompositionCacheSource(self, object, /): ...
    def getMaxPriority(): ...
    def getNodeRefCount(self, /): ...
    def getNumStates(): ...
    def getNumUnusedStates(): ...
    def getOverride(self, object, /): ...
    def getRefCount(self, /): ...
    def getReferencedBits(self, /): ...
    def getStates(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def getUnusedStates(): ...
    def get_attrib(self, object, /): ...
    def get_attrib_def(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bin_index(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_composition_cache(self, /): ...
    def get_composition_cache_num_entries(self, /): ...
    def get_composition_cache_result(self, object, /): ...
    def get_composition_cache_size(self, /): ...
    def get_composition_cache_source(self, object, /): ...
    def get_draw_order(self, /): ...
    def get_geom_rendering(self, object, /): ...
    def get_hash(self, /): ...
    def get_invert_composition_cache(self, /): ...
    def get_invert_composition_cache_num_entries(self, /): ...
    def get_invert_composition_cache_result(self, object, /): ...
    def get_invert_composition_cache_size(self, /): ...
    def get_invert_composition_cache_source(self, object, /): ...
    def get_max_priority(): ...
    def get_node_ref_count(self, /): ...
    def get_num_states(): ...
    def get_num_unused_states(): ...
    def get_override(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_referenced_bits(self, /): ...
    def get_states(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def get_unused_states(): ...
    def hasAttrib(self, object, /): ...
    def hasCullCallback(self, /): ...
    def has_attrib(self, object, /): ...
    def has_cull_callback(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listCycles(object, /): ...
    def listStates(object, /): ...
    def list_cycles(object, /): ...
    def list_states(object, /): ...
    def make(): ...
    def makeEmpty(): ...
    def make_empty(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def nodeRef(self, /): ...
    def nodeUnref(self, /): ...
    def node_ref(self, /): ...
    def node_unref(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeAttrib(self, object, /): ...
    def remove_attrib(self, object, /): ...
    def setAttrib(): ...
    def set_attrib(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateStates(): ...
    def validate_states(): ...
    def write(): ...
class RescaleNormalAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MAuto:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNormalize:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MRescale:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_auto:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_normalize:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_rescale:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class RigidBodyCombiner:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def collect(self, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalScene(self, /): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_scene(self, /): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_scene = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class RopeNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    NMNone:int = None
    NMVertex:int = None
    NM_none:int = None
    NM_vertex:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    RMBillboard:int = None
    RMTape:int = None
    RMThread:int = None
    RMTube:int = None
    RM_billboard:int = None
    RM_tape:int = None
    RM_thread:int = None
    RM_tube:int = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    UVDistance:int = None
    UVDistance2:int = None
    UVNone:int = None
    UVParametric:int = None
    UV_distance:int = None
    UV_distance2:int = None
    UV_none:int = None
    UV_parametric:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearMatrix(self, /): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_matrix(self, /): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    curve = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCurve(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMatrix(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNormalMode(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumSlices(self, /): ...
    def getNumStashed(): ...
    def getNumSubdiv(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRenderMode(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getThickness(self, /): ...
    def getTransform(): ...
    def getTubeUp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUseVertexColor(self, /): ...
    def getUseVertexThickness(self, /): ...
    def getUvDirection(self, /): ...
    def getUvMode(self, /): ...
    def getUvScale(self, /): ...
    def getVertexColorDimension(): ...
    def getVertexThicknessDimension(): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_curve(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_matrix(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_normal_mode(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_slices(self, /): ...
    def get_num_stashed(): ...
    def get_num_subdiv(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_mode(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_thickness(self, /): ...
    def get_transform(): ...
    def get_tube_up(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_use_vertex_color(self, /): ...
    def get_use_vertex_thickness(self, /): ...
    def get_uv_direction(self, /): ...
    def get_uv_mode(self, /): ...
    def get_uv_scale(self, /): ...
    def get_vertex_color_dimension(): ...
    def get_vertex_thickness_dimension(): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasMatrix(self, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_matrix(self, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    matrix = None
    name = None
    nested_vertices = None
    normal_mode = None
    num_slices = None
    num_subdiv = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    render_mode = None
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetBound(self, object, /): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_bound(self, object, /): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCurve(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMatrix(self, object, /): ...
    def setName(self, object, /): ...
    def setNormalMode(self, object, /): ...
    def setNumSlices(self, object, /): ...
    def setNumSubdiv(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRenderMode(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setThickness(self, object, /): ...
    def setTransform(): ...
    def setTubeUp(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def setUseVertexColor(self, object, /): ...
    def setUseVertexThickness(self, object, /): ...
    def setUvDirection(self, object, /): ...
    def setUvMode(self, object, /): ...
    def setUvScale(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_curve(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_matrix(self, object, /): ...
    def set_name(self, object, /): ...
    def set_normal_mode(self, object, /): ...
    def set_num_slices(self, object, /): ...
    def set_num_subdiv(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_render_mode(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_thickness(self, object, /): ...
    def set_transform(): ...
    def set_tube_up(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def set_use_vertex_color(self, object, /): ...
    def set_use_vertex_thickness(self, object, /): ...
    def set_uv_direction(self, object, /): ...
    def set_uv_mode(self, object, /): ...
    def set_uv_scale(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    thickness = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    tube_up = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    use_vertex_color = None
    use_vertex_thickness = None
    uv_direction = None
    uv_mode = None
    uv_scale = None
    vertex_color_dimension:int = None
    vertex_thickness_dimension:int = None
    def write(): ...
class SSReader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isClosed(self, /): ...
    def is_closed(self, /): ...
    def receiveDatagram(self, object, /): ...
    def receive_datagram(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SSWriter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    def considerFlush(self, /): ...
    def consider_flush(self, /): ...
    def flush(self, /): ...
    def getCollectTcp(self, /): ...
    def getCollectTcpInterval(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_collect_tcp(self, /): ...
    def get_collect_tcp_interval(self, /): ...
    def get_tcp_header_size(self, /): ...
    def isClosed(self, /): ...
    def is_closed(self, /): ...
    def sendDatagram(self, object, /): ...
    def send_datagram(self, object, /): ...
    def setCollectTcp(self, object, /): ...
    def setCollectTcpInterval(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_collect_tcp(self, object, /): ...
    def set_collect_tcp_interval(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SamplerState:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FTDefault:int = None
    FTInvalid:int = None
    FTLinear:int = None
    FTLinearMipmapLinear:int = None
    FTLinearMipmapNearest:int = None
    FTNearest:int = None
    FTNearestMipmapLinear:int = None
    FTNearestMipmapNearest:int = None
    FTShadow:int = None
    FT_default:int = None
    FT_invalid:int = None
    FT_linear:int = None
    FT_linear_mipmap_linear:int = None
    FT_linear_mipmap_nearest:int = None
    FT_nearest:int = None
    FT_nearest_mipmap_linear:int = None
    FT_nearest_mipmap_nearest:int = None
    FT_shadow:int = None
    WMBorderColor:int = None
    WMClamp:int = None
    WMInvalid:int = None
    WMMirror:int = None
    WMMirrorOnce:int = None
    WMRepeat:int = None
    WM_border_color:int = None
    WM_clamp:int = None
    WM_invalid:int = None
    WM_mirror:int = None
    WM_mirror_once:int = None
    WM_repeat:int = None
    anisotropic_degree = None
    border_color = None
    effective_anisotropic_degree = None
    effective_magfilter = None
    effective_minfilter = None
    def formatFilterType(object, /): ...
    def formatWrapMode(object, /): ...
    def format_filter_type(object, /): ...
    def format_wrap_mode(object, /): ...
    def getAnisotropicDegree(self, /): ...
    def getBorderColor(self, /): ...
    def getClassType(): ...
    def getDefault(): ...
    def getEffectiveAnisotropicDegree(self, /): ...
    def getEffectiveMagfilter(self, /): ...
    def getEffectiveMinfilter(self, /): ...
    def getLodBias(self, /): ...
    def getMagfilter(self, /): ...
    def getMaxLod(self, /): ...
    def getMinLod(self, /): ...
    def getMinfilter(self, /): ...
    def getWrapU(self, /): ...
    def getWrapV(self, /): ...
    def getWrapW(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_border_color(self, /): ...
    def get_class_type(): ...
    def get_default(): ...
    def get_effective_anisotropic_degree(self, /): ...
    def get_effective_magfilter(self, /): ...
    def get_effective_minfilter(self, /): ...
    def get_lod_bias(self, /): ...
    def get_magfilter(self, /): ...
    def get_max_lod(self, /): ...
    def get_min_lod(self, /): ...
    def get_minfilter(self, /): ...
    def get_wrap_u(self, /): ...
    def get_wrap_v(self, /): ...
    def get_wrap_w(self, /): ...
    def isMipmap(object, /): ...
    def isPrepared(self, object, /): ...
    def is_mipmap(object, /): ...
    def is_prepared(self, object, /): ...
    lod_bias = None
    magfilter = None
    max_lod = None
    min_lod = None
    minfilter = None
    def prepare(self, object, /): ...
    def release(self, object, /): ...
    def setAnisotropicDegree(self, object, /): ...
    def setBorderColor(self, object, /): ...
    def setLodBias(self, object, /): ...
    def setMagfilter(self, object, /): ...
    def setMaxLod(self, object, /): ...
    def setMinLod(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setWrapU(self, object, /): ...
    def setWrapV(self, object, /): ...
    def setWrapW(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_border_color(self, object, /): ...
    def set_lod_bias(self, object, /): ...
    def set_magfilter(self, object, /): ...
    def set_max_lod(self, object, /): ...
    def set_min_lod(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_wrap_u(self, object, /): ...
    def set_wrap_v(self, object, /): ...
    def set_wrap_w(self, object, /): ...
    def stringFilterType(object, /): ...
    def stringWrapMode(object, /): ...
    def string_filter_type(object, /): ...
    def string_wrap_mode(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def usesMipmaps(self, /): ...
    def uses_mipmaps(self, /): ...
    wrap_u = None
    wrap_v = None
    wrap_w = None
class SavedContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SceneGraphAnalyzer:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    LMAll:int = None
    LMHighest:int = None
    LMLowest:int = None
    LMNone:int = None
    LM_all:int = None
    LM_highest:int = None
    LM_lowest:int = None
    LM_none:int = None
    def addNode(self, object, /): ...
    def add_node(self, object, /): ...
    def clear(self, /): ...
    def getLodMode(self, object, /): ...
    def getNumColors(self, /): ...
    def getNumGeomNodes(self, /): ...
    def getNumGeomVertexDatas(self, /): ...
    def getNumGeomVertexFormats(self, /): ...
    def getNumGeoms(self, /): ...
    def getNumIndividualTris(self, /): ...
    def getNumInstances(self, /): ...
    def getNumLines(self, /): ...
    def getNumLodNodes(self, /): ...
    def getNumLongNormals(self, /): ...
    def getNumNodes(self, /): ...
    def getNumNodesWithAttribs(self, /): ...
    def getNumNormals(self, /): ...
    def getNumPatches(self, /): ...
    def getNumPoints(self, /): ...
    def getNumShortNormals(self, /): ...
    def getNumTexcoords(self, /): ...
    def getNumTransforms(self, /): ...
    def getNumTrianglesInFans(self, /): ...
    def getNumTrianglesInStrips(self, /): ...
    def getNumTrifans(self, /): ...
    def getNumTris(self, /): ...
    def getNumTristrips(self, /): ...
    def getNumVertices(self, /): ...
    def getNumVerticesInPatches(self, /): ...
    def getTextureBytes(self, /): ...
    def getTotalNormalLength(self, /): ...
    def getVertexDataSize(self, /): ...
    def get_lod_mode(self, object, /): ...
    def get_num_colors(self, /): ...
    def get_num_geom_nodes(self, /): ...
    def get_num_geom_vertex_datas(self, /): ...
    def get_num_geom_vertex_formats(self, /): ...
    def get_num_geoms(self, /): ...
    def get_num_individual_tris(self, /): ...
    def get_num_instances(self, /): ...
    def get_num_lines(self, /): ...
    def get_num_lod_nodes(self, /): ...
    def get_num_long_normals(self, /): ...
    def get_num_nodes(self, /): ...
    def get_num_nodes_with_attribs(self, /): ...
    def get_num_normals(self, /): ...
    def get_num_patches(self, /): ...
    def get_num_points(self, /): ...
    def get_num_short_normals(self, /): ...
    def get_num_texcoords(self, /): ...
    def get_num_transforms(self, /): ...
    def get_num_triangles_in_fans(self, /): ...
    def get_num_triangles_in_strips(self, /): ...
    def get_num_trifans(self, /): ...
    def get_num_tris(self, /): ...
    def get_num_tristrips(self, /): ...
    def get_num_vertices(self, /): ...
    def get_num_vertices_in_patches(self, /): ...
    def get_texture_bytes(self, /): ...
    def get_total_normal_length(self, /): ...
    def get_vertex_data_size(self, /): ...
    def setLodMode(self, object, /): ...
    def set_lod_mode(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class SceneGraphAnalyzerMeter:
    ...
    ABoxedCenter:int = None
    ABoxedLeft:int = None
    ABoxedRight:int = None
    ACenter:int = None
    ALeft:int = None
    ARight:int = None
    A_boxed_center:int = None
    A_boxed_left:int = None
    A_boxed_right:int = None
    A_center:int = None
    A_left:int = None
    A_right:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DLtr:int = None
    DRtl:int = None
    D_ltr:int = None
    D_rtl:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    EIso8859:int = None
    EUnicode:int = None
    EUtf16be:int = None
    EUtf8:int = None
    E_iso8859:int = None
    E_unicode:int = None
    E_utf16be:int = None
    E_utf8:int = None
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    FFDynamicMerge:int = None
    FFLight:int = None
    FFMedium:int = None
    FFNone:int = None
    FFStrong:int = None
    FF_dynamic_merge:int = None
    FF_light:int = None
    FF_medium:int = None
    FF_none:int = None
    FF_strong:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addProperties(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_properties(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    align = None
    all_camera_mask = None
    def appendText(self, object, /): ...
    def appendUnicodeChar(self, object, /): ...
    def appendWtext(self, object, /): ...
    def append_text(self, object, /): ...
    def append_unicode_char(self, object, /): ...
    def append_wtext(self, object, /): ...
    def asLight(self, /): ...
    def as_light(self, /): ...
    def assign(self, object, /): ...
    bin = None
    bounds_stale = None
    bounds_type = None
    def calcWidth(self, object, /): ...
    def calc_width(self, object, /): ...
    card_color = None
    card_texture = None
    children = None
    def clear(self, /): ...
    def clearAlign(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBin(self, /): ...
    def clearBounds(self, /): ...
    def clearCard(self, /): ...
    def clearCardBorder(self, /): ...
    def clearCardTexture(self, /): ...
    def clearDirection(self, /): ...
    def clearDrawOrder(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFont(self, /): ...
    def clearFrame(self, /): ...
    def clearGlyphScale(self, /): ...
    def clearGlyphShift(self, /): ...
    def clearIndent(self, /): ...
    def clearMaxRows(self, /): ...
    def clearName(self, /): ...
    def clearPreserveTrailingWhitespace(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearShadow(self, /): ...
    def clearShadowColor(self, /): ...
    def clearSlant(self, /): ...
    def clearSmallCaps(self, /): ...
    def clearSmallCapsScale(self, /): ...
    def clearState(): ...
    def clearTabWidth(self, /): ...
    def clearTag(): ...
    def clearText(self, /): ...
    def clearTextColor(self, /): ...
    def clearTextScale(self, /): ...
    def clearTransform(): ...
    def clearUnderscore(self, /): ...
    def clearUnderscoreHeight(self, /): ...
    def clearUnexpectedChange(self, object, /): ...
    def clearWindow(self, /): ...
    def clearWordwrap(self, /): ...
    def clear_align(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bin(self, /): ...
    def clear_bounds(self, /): ...
    def clear_card(self, /): ...
    def clear_card_border(self, /): ...
    def clear_card_texture(self, /): ...
    def clear_direction(self, /): ...
    def clear_draw_order(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_font(self, /): ...
    def clear_frame(self, /): ...
    def clear_glyph_scale(self, /): ...
    def clear_glyph_shift(self, /): ...
    def clear_indent(self, /): ...
    def clear_max_rows(self, /): ...
    def clear_name(self, /): ...
    def clear_preserve_trailing_whitespace(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_shadow(self, /): ...
    def clear_shadow_color(self, /): ...
    def clear_slant(self, /): ...
    def clear_small_caps(self, /): ...
    def clear_small_caps_scale(self, /): ...
    def clear_state(): ...
    def clear_tab_width(self, /): ...
    def clear_tag(): ...
    def clear_text(self, /): ...
    def clear_text_color(self, /): ...
    def clear_text_scale(self, /): ...
    def clear_transform(): ...
    def clear_underscore(self, /): ...
    def clear_underscore_height(self, /): ...
    def clear_unexpected_change(self, object, /): ...
    def clear_window(self, /): ...
    def clear_wordwrap(self, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    coordinate_system = None
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decodeText(): ...
    def decode_from_bam_stream(): ...
    def decode_text(): ...
    default_encoding:int = None
    direction = None
    draw_control_mask = None
    draw_order = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encodeWchar(): ...
    def encodeWtext(): ...
    def encode_to_bam_stream(): ...
    def encode_wchar(): ...
    def encode_wtext(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    flatten_flags = None
    font = None
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    frame_color = None
    frame_corners = None
    frame_line_width = None
    def generate(self, /): ...
    def getAlign(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBin(self, /): ...
    def getBottom(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCardActual(self, /): ...
    def getCardAsSet(self, /): ...
    def getCardBorderSize(self, /): ...
    def getCardBorderUvPortion(self, /): ...
    def getCardColor(self, /): ...
    def getCardDecal(self, /): ...
    def getCardTexture(self, /): ...
    def getCardTransformed(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCoordinateSystem(self, /): ...
    def getDefaultEncoding(): ...
    def getDefaultFont(): ...
    def getDirection(self, /): ...
    def getDisplayRegion(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawOrder(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEncodedChar(): ...
    def getEncoding(self, /): ...
    def getFancyBits(): ...
    def getFlattenFlags(self, /): ...
    def getFont(self, /): ...
    def getFrameActual(self, /): ...
    def getFrameAsSet(self, /): ...
    def getFrameColor(self, /): ...
    def getFrameCorners(self, /): ...
    def getFrameLineWidth(self, /): ...
    def getGlyphScale(self, /): ...
    def getGlyphShift(self, /): ...
    def getHeight(self, /): ...
    def getIndent(self, /): ...
    def getInternalBounds(): ...
    def getInternalGeom(self, /): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLeft(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLineHeight(self, /): ...
    def getLowerRight3d(self, /): ...
    def getMaxRows(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNode(self, /): ...
    def getNumChars(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumRows(self, /): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserveTrailingWhitespace(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRight(self, /): ...
    def getShadow(self, /): ...
    def getShadowColor(self, /): ...
    def getSlant(self, /): ...
    def getSmallCaps(self, /): ...
    def getSmallCapsScale(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTabWidth(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getText(): ...
    def getTextAsAscii(self, /): ...
    def getTextColor(self, /): ...
    def getTextScale(self, /): ...
    def getTop(self, /): ...
    def getTransform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnderscore(self, /): ...
    def getUnderscoreHeight(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUnicodeChar(self, object, /): ...
    def getUpdateInterval(self, /): ...
    def getUpperLeft3d(self, /): ...
    def getUsageHint(self, /): ...
    def getWidth(self, /): ...
    def getWindow(self, /): ...
    def getWordwrap(self, /): ...
    def getWordwrappedText(self, /): ...
    def getWordwrappedWtext(self, /): ...
    def getWtext(self, /): ...
    def getWtextAsAscii(self, /): ...
    def get_align(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bin(self, /): ...
    def get_bottom(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_card_actual(self, /): ...
    def get_card_as_set(self, /): ...
    def get_card_border_size(self, /): ...
    def get_card_border_uv_portion(self, /): ...
    def get_card_color(self, /): ...
    def get_card_decal(self, /): ...
    def get_card_texture(self, /): ...
    def get_card_transformed(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_coordinate_system(self, /): ...
    def get_default_encoding(): ...
    def get_default_font(): ...
    def get_direction(self, /): ...
    def get_display_region(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_order(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_encoded_char(): ...
    def get_encoding(self, /): ...
    def get_fancy_bits(): ...
    def get_flatten_flags(self, /): ...
    def get_font(self, /): ...
    def get_frame_actual(self, /): ...
    def get_frame_as_set(self, /): ...
    def get_frame_color(self, /): ...
    def get_frame_corners(self, /): ...
    def get_frame_line_width(self, /): ...
    def get_glyph_scale(self, /): ...
    def get_glyph_shift(self, /): ...
    def get_height(self, /): ...
    def get_indent(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_geom(self, /): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_left(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_line_height(self, /): ...
    def get_lower_right_3d(self, /): ...
    def get_max_rows(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_node(self, /): ...
    def get_num_chars(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_rows(self, /): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserve_trailing_whitespace(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_right(self, /): ...
    def get_shadow(self, /): ...
    def get_shadow_color(self, /): ...
    def get_slant(self, /): ...
    def get_small_caps(self, /): ...
    def get_small_caps_scale(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tab_width(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text(): ...
    def get_text_as_ascii(self, /): ...
    def get_text_color(self, /): ...
    def get_text_scale(self, /): ...
    def get_top(self, /): ...
    def get_transform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_underscore(self, /): ...
    def get_underscore_height(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_unicode_char(self, object, /): ...
    def get_update_interval(self, /): ...
    def get_upper_left_3d(self, /): ...
    def get_usage_hint(self, /): ...
    def get_width(self, /): ...
    def get_window(self, /): ...
    def get_wordwrap(self, /): ...
    def get_wordwrapped_text(self, /): ...
    def get_wordwrapped_wtext(self, /): ...
    def get_wtext(self, /): ...
    def get_wtext_as_ascii(self, /): ...
    glyph_scale = None
    glyph_shift = None
    def hasAlign(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasBin(self, /): ...
    def hasCard(self, /): ...
    def hasCardBorder(self, /): ...
    def hasCardTexture(self, /): ...
    def hasCharacter(self, object, /): ...
    def hasDirection(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasDrawOrder(self, /): ...
    def hasEffect(self, object, /): ...
    def hasExactCharacter(self, object, /): ...
    def hasFont(self, /): ...
    def hasFrame(self, /): ...
    def hasGlyphScale(self, /): ...
    def hasGlyphShift(self, /): ...
    def hasIndent(self, /): ...
    def hasMaxRows(self, /): ...
    def hasName(self, /): ...
    def hasOverflow(self, /): ...
    def hasPreserveTrailingWhitespace(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasShadow(self, /): ...
    def hasShadowColor(self, /): ...
    def hasSlant(self, /): ...
    def hasSmallCaps(self, /): ...
    def hasSmallCapsScale(self, /): ...
    def hasTabWidth(self, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasText(self, /): ...
    def hasTextColor(self, /): ...
    def hasTextScale(self, /): ...
    def hasUnderscore(self, /): ...
    def hasUnderscoreHeight(self, /): ...
    def hasWordwrap(self, /): ...
    def has_align(self, /): ...
    def has_attrib(self, object, /): ...
    def has_bin(self, /): ...
    def has_card(self, /): ...
    def has_card_border(self, /): ...
    def has_card_texture(self, /): ...
    def has_character(self, object, /): ...
    def has_direction(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_draw_order(self, /): ...
    def has_effect(self, object, /): ...
    def has_exact_character(self, object, /): ...
    def has_font(self, /): ...
    def has_frame(self, /): ...
    def has_glyph_scale(self, /): ...
    def has_glyph_shift(self, /): ...
    def has_indent(self, /): ...
    def has_max_rows(self, /): ...
    def has_name(self, /): ...
    def has_overflow(self, /): ...
    def has_preserve_trailing_whitespace(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_shadow(self, /): ...
    def has_shadow_color(self, /): ...
    def has_slant(self, /): ...
    def has_small_caps(self, /): ...
    def has_small_caps_scale(self, /): ...
    def has_tab_width(self, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_text(self, /): ...
    def has_text_color(self, /): ...
    def has_text_scale(self, /): ...
    def has_underscore(self, /): ...
    def has_underscore_height(self, /): ...
    def has_wordwrap(self, /): ...
    indent = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isAnySpecified(self, /): ...
    def isBoundsStale(self, /): ...
    def isCardAsMargin(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isFrameAsMargin(self, /): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isWhitespace(self, object, /): ...
    def isWtext(self, /): ...
    def is_ambient_light(self, /): ...
    def is_any_specified(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_card_as_margin(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_frame_as_margin(self, /): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_whitespace(self, object, /): ...
    def is_wtext(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def lower(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def makeLower(self, /): ...
    def makeUpper(self, /): ...
    def make_copy(self, /): ...
    def make_lower(self, /): ...
    def make_upper(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_rows = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    preserve_trailing_whitespace = None
    prev_transform = None
    python_tags = None
    def reencodeText(): ...
    def reencode_text(): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAlign(self, object, /): ...
    def setAttrib(): ...
    def setBin(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCardActual(): ...
    def setCardAsMargin(): ...
    def setCardBorder(): ...
    def setCardColor(): ...
    def setCardDecal(self, object, /): ...
    def setCardTexture(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setDefaultEncoding(object, /): ...
    def setDefaultFont(object, /): ...
    def setDirection(self, object, /): ...
    def setDrawOrder(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setEncoding(self, object, /): ...
    def setFinal(self, object, /): ...
    def setFlattenFlags(self, object, /): ...
    def setFont(self, object, /): ...
    def setFrameActual(): ...
    def setFrameAsMargin(): ...
    def setFrameColor(): ...
    def setFrameCorners(self, object, /): ...
    def setFrameLineWidth(self, object, /): ...
    def setGlyphScale(self, object, /): ...
    def setGlyphShift(self, object, /): ...
    def setIndent(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMaxRows(self, object, /): ...
    def setName(self, object, /): ...
    def setNode(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserveTrailingWhitespace(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setShadow(): ...
    def setShadowColor(): ...
    def setSlant(self, object, /): ...
    def setSmallCaps(self, object, /): ...
    def setSmallCapsScale(self, object, /): ...
    def setState(): ...
    def setTabWidth(self, object, /): ...
    def setTag(): ...
    def setText(): ...
    def setTextColor(): ...
    def setTextScale(self, object, /): ...
    def setTransform(self, object, /): ...
    def setUnderscore(self, object, /): ...
    def setUnderscoreHeight(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def setUnicodeChar(): ...
    def setUpdateInterval(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setWordwrap(self, object, /): ...
    def setWtext(self, object, /): ...
    def set_align(self, object, /): ...
    def set_attrib(): ...
    def set_bin(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_card_actual(): ...
    def set_card_as_margin(): ...
    def set_card_border(): ...
    def set_card_color(): ...
    def set_card_decal(self, object, /): ...
    def set_card_texture(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_default_encoding(object, /): ...
    def set_default_font(object, /): ...
    def set_direction(self, object, /): ...
    def set_draw_order(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_encoding(self, object, /): ...
    def set_final(self, object, /): ...
    def set_flatten_flags(self, object, /): ...
    def set_font(self, object, /): ...
    def set_frame_actual(): ...
    def set_frame_as_margin(): ...
    def set_frame_color(): ...
    def set_frame_corners(self, object, /): ...
    def set_frame_line_width(self, object, /): ...
    def set_glyph_scale(self, object, /): ...
    def set_glyph_shift(self, object, /): ...
    def set_indent(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_max_rows(self, object, /): ...
    def set_name(self, object, /): ...
    def set_node(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserve_trailing_whitespace(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_shadow(): ...
    def set_shadow_color(): ...
    def set_slant(self, object, /): ...
    def set_small_caps(self, object, /): ...
    def set_small_caps_scale(self, object, /): ...
    def set_state(): ...
    def set_tab_width(self, object, /): ...
    def set_tag(): ...
    def set_text(): ...
    def set_text_color(): ...
    def set_text_scale(self, object, /): ...
    def set_transform(self, object, /): ...
    def set_underscore(self, object, /): ...
    def set_underscore_height(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def set_unicode_char(): ...
    def set_update_interval(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_wordwrap(self, object, /): ...
    def set_wtext(self, object, /): ...
    def setupWindow(self, object, /): ...
    def setup_window(self, object, /): ...
    shadow = None
    shadow_color = None
    slant = None
    small_caps = None
    small_caps_scale = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tab_width = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    text = None
    text_color = None
    text_scale = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    underscore = None
    underscore_height = None
    def unicodeIsalpha(object, /): ...
    def unicodeIsdigit(object, /): ...
    def unicodeIslower(object, /): ...
    def unicodeIspunct(object, /): ...
    def unicodeIsspace(object, /): ...
    def unicodeIsupper(object, /): ...
    def unicodeTolower(object, /): ...
    def unicodeToupper(object, /): ...
    def unicode_isalpha(object, /): ...
    def unicode_isdigit(object, /): ...
    def unicode_islower(object, /): ...
    def unicode_ispunct(object, /): ...
    def unicode_isspace(object, /): ...
    def unicode_isupper(object, /): ...
    def unicode_tolower(object, /): ...
    def unicode_toupper(object, /): ...
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTextEncoder(self, /): ...
    def upcastToTextProperties(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TextEncoder(self, /): ...
    def upcast_to_TextProperties(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def upper(): ...
    usage_hint = None
    wordwrap = None
    def write(): ...
class SceneGraphReducer:
    ...
    CSGeomNode:int = None
    CSOther:int = None
    CSRecurse:int = None
    CSWithinRadius:int = None
    CS_geom_node:int = None
    CS_other:int = None
    CS_recurse:int = None
    CS_within_radius:int = None
    CVDAnimationType:int = None
    CVDAvoidDynamic:int = None
    CVDFormat:int = None
    CVDModel:int = None
    CVDName:int = None
    CVDOneNodeOnly:int = None
    CVDTransform:int = None
    CVDUsageHint:int = None
    CVD_animation_type:int = None
    CVD_avoid_dynamic:int = None
    CVD_format:int = None
    CVD_model:int = None
    CVD_name:int = None
    CVD_one_node_only:int = None
    CVD_transform:int = None
    CVD_usage_hint:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MNAvoidAnimated:int = None
    MNAvoidDynamic:int = None
    MNCompositeOnly:int = None
    MN_avoid_animated:int = None
    MN_avoid_dynamic:int = None
    MN_composite_only:int = None
    TTApplyTextureColor:int = None
    TTClipPlane:int = None
    TTColor:int = None
    TTColorScale:int = None
    TTCullFace:int = None
    TTOther:int = None
    TTTexMatrix:int = None
    TTTransform:int = None
    TT_apply_texture_color:int = None
    TT_clip_plane:int = None
    TT_color:int = None
    TT_color_scale:int = None
    TT_cull_face:int = None
    TT_other:int = None
    TT_tex_matrix:int = None
    TT_transform:int = None
    def applyAttribs(): ...
    def apply_attribs(): ...
    def checkLiveFlatten(self, object, /): ...
    def check_live_flatten(self, object, /): ...
    def clearGsg(self, /): ...
    def clear_gsg(self, /): ...
    def collectVertexData(): ...
    def collect_vertex_data(): ...
    def decompose(self, object, /): ...
    def flatten(): ...
    def getCombineRadius(self, /): ...
    def getGsg(self, /): ...
    def get_combine_radius(self, /): ...
    def get_gsg(self, /): ...
    def makeCompatibleFormat(): ...
    def makeCompatibleState(self, object, /): ...
    def makeNonindexed(): ...
    def make_compatible_format(): ...
    def make_compatible_state(self, object, /): ...
    def make_nonindexed(): ...
    def premunge(): ...
    def removeColumn(): ...
    def removeUnusedVertices(self, object, /): ...
    def remove_column(): ...
    def remove_unused_vertices(self, object, /): ...
    def setCombineRadius(self, object, /): ...
    def setGsg(self, object, /): ...
    def set_combine_radius(self, object, /): ...
    def set_gsg(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unify(): ...
class SceneSetup:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getCameraNode(self, /): ...
    def getCameraPath(self, /): ...
    def getCameraTransform(self, /): ...
    def getClassType(): ...
    def getCsTransform(self, /): ...
    def getCsWorldTransform(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, /): ...
    def getInitialState(self, /): ...
    def getInverted(self, /): ...
    def getLens(self, /): ...
    def getRefCount(self, /): ...
    def getSceneRoot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getViewportHeight(self, /): ...
    def getViewportWidth(self, /): ...
    def getWorldTransform(self, /): ...
    def get_camera_node(self, /): ...
    def get_camera_path(self, /): ...
    def get_camera_transform(self, /): ...
    def get_class_type(): ...
    def get_cs_transform(self, /): ...
    def get_cs_world_transform(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, /): ...
    def get_initial_state(self, /): ...
    def get_inverted(self, /): ...
    def get_lens(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene_root(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_viewport_height(self, /): ...
    def get_viewport_width(self, /): ...
    def get_world_transform(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setCameraNode(self, object, /): ...
    def setCameraPath(self, object, /): ...
    def setCameraTransform(self, object, /): ...
    def setCsTransform(self, object, /): ...
    def setCsWorldTransform(self, object, /): ...
    def setDisplayRegion(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setInverted(self, object, /): ...
    def setLens(self, object, /): ...
    def setSceneRoot(self, object, /): ...
    def setViewportSize(): ...
    def setWorldTransform(self, object, /): ...
    def set_camera_node(self, object, /): ...
    def set_camera_path(self, object, /): ...
    def set_camera_transform(self, object, /): ...
    def set_cs_transform(self, object, /): ...
    def set_cs_world_transform(self, object, /): ...
    def set_display_region(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_inverted(self, object, /): ...
    def set_lens(self, object, /): ...
    def set_scene_root(self, object, /): ...
    def set_viewport_size(): ...
    def set_world_transform(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class ScissorAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    frame = None
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getFrame(self, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_frame(self, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ScissorEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addPoint(): ...
    def add_point(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getClip(self, /): ...
    def getFrame(self, /): ...
    def getNode(self, object, /): ...
    def getNodes(self, /): ...
    def getNumEffects(): ...
    def getNumPoints(self, /): ...
    def getPoint(self, object, /): ...
    def getPoints(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_clip(self, /): ...
    def get_frame(self, /): ...
    def get_node(self, object, /): ...
    def get_nodes(self, /): ...
    def get_num_effects(): ...
    def get_num_points(self, /): ...
    def get_point(self, object, /): ...
    def get_points(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isScreen(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_screen(self, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def makeNode(): ...
    def makeScreen(): ...
    def make_node(): ...
    def make_screen(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class SelectiveChildNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class Semaphore:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def getCount(self, /): ...
    def get_count(self, /): ...
    def output(self, object, /): ...
    def release(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def tryAcquire(self, /): ...
    def try_acquire(self, /): ...
class SequenceNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    frac = None
    frame = None
    frame_rate = None
    full_fframe = None
    full_frame = None
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getFrac(self, /): ...
    def getFrame(self, /): ...
    def getFrameRate(self, /): ...
    def getFullFframe(self, /): ...
    def getFullFrame(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNextFrame(self, /): ...
    def getNumChildren(): ...
    def getNumFrames(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPlayRate(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_frac(self, /): ...
    def get_frame(self, /): ...
    def get_frame_rate(self, /): ...
    def get_full_fframe(self, /): ...
    def get_full_frame(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_next_frame(self, /): ...
    def get_num_children(): ...
    def get_num_frames(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_play_rate(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isPlaying(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_playing(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def loop(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    next_frame = None
    num_frames = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def pingpong(): ...
    def play(): ...
    play_rate = None
    playing = None
    def pose(self, object, /): ...
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setFrameRate(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPlayRate(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_frame_rate(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_play_rate(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    def stop(self, /): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToAnimInterface(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToSelectiveChildNode(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_AnimInterface(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_SelectiveChildNode(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ShadeModelAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MFlat:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MSmooth:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_flat:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_smooth:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class Shader:
    ...
    ASGloss:int = None
    ASGlow:int = None
    ASNormal:int = None
    ASRamp:int = None
    ASShadow:int = None
    AS_gloss:int = None
    AS_glow:int = None
    AS_normal:int = None
    AS_ramp:int = None
    AS_shadow:int = None
    BitAutoShaderGloss:int = None
    BitAutoShaderGlow:int = None
    BitAutoShaderNormal:int = None
    BitAutoShaderRamp:int = None
    BitAutoShaderShadow:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SLCg:int = None
    SLGLSL:int = None
    SLHLSL:int = None
    SLNone:int = None
    SLSPIRV:int = None
    SL_Cg:int = None
    SL_GLSL:int = None
    SL_HLSL:int = None
    SL_SPIR_V:int = None
    SL_none:int = None
    STCOUNT:int = None
    STCompute:int = None
    STFragment:int = None
    STGeometry:int = None
    STNone:int = None
    STTessControl:int = None
    STTessEvaluation:int = None
    STVertex:int = None
    ST_COUNT:int = None
    ST_compute:int = None
    ST_fragment:int = None
    ST_geometry:int = None
    ST_none:int = None
    ST_tess_control:int = None
    ST_tess_evaluation:int = None
    ST_vertex:int = None
    bit_AutoShaderGloss:int = None
    bit_AutoShaderGlow:int = None
    bit_AutoShaderNormal:int = None
    bit_AutoShaderRamp:int = None
    bit_AutoShaderShadow:int = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getCacheCompiledShader(self, /): ...
    def getClassType(): ...
    def getErrorFlag(self, /): ...
    def getFilename(): ...
    def getFullpath(self, /): ...
    def getLanguage(self, /): ...
    def getRefCount(self, /): ...
    def getText(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_cache_compiled_shader(self, /): ...
    def get_class_type(): ...
    def get_error_flag(self, /): ...
    def get_filename(): ...
    def get_fullpath(self, /): ...
    def get_language(self, /): ...
    def get_ref_count(self, /): ...
    def get_text(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasFullpath(self, /): ...
    def has_fullpath(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    def load(): ...
    def loadCompute(): ...
    def load_compute(): ...
    def make(): ...
    def makeCompute(): ...
    def make_compute(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def setCacheCompiledShader(self, object, /): ...
    def setFilename(): ...
    def set_cache_compiled_shader(self, object, /): ...
    def set_filename(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class ShaderAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    F_disable_alpha_write:int = None
    F_hardware_skinning:int = None
    F_shader_point_size:int = None
    F_subsume_alpha_test:int = None
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    def autoGlossOn(self, /): ...
    def autoGlowOn(self, /): ...
    def autoNormalOn(self, /): ...
    def autoRampOn(self, /): ...
    def autoShader(self, /): ...
    def autoShadowOn(self, /): ...
    def auto_gloss_on(self, /): ...
    def auto_glow_on(self, /): ...
    def auto_normal_on(self, /): ...
    def auto_ramp_on(self, /): ...
    def auto_shader(self, /): ...
    def auto_shadow_on(self, /): ...
    class_slot:int = None
    def clearAllShaderInputs(self, /): ...
    def clearFlag(self, object, /): ...
    def clearShader(self, /): ...
    def clearShaderInput(self, object, /): ...
    def clear_all_shader_inputs(self, /): ...
    def clear_flag(self, object, /): ...
    def clear_shader(self, /): ...
    def clear_shader_input(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getFlag(self, object, /): ...
    def getHash(self, /): ...
    def getInstanceCount(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getShader(self, /): ...
    def getShaderInput(self, object, /): ...
    def getShaderInputBuffer(self, object, /): ...
    def getShaderInputMatrix(): ...
    def getShaderInputNodepath(self, object, /): ...
    def getShaderInputTexture(): ...
    def getShaderInputVector(self, object, /): ...
    def getShaderPriority(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_flag(self, object, /): ...
    def get_hash(self, /): ...
    def get_instance_count(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_shader(self, /): ...
    def get_shader_input(self, object, /): ...
    def get_shader_input_buffer(self, object, /): ...
    def get_shader_input_matrix(): ...
    def get_shader_input_nodepath(self, object, /): ...
    def get_shader_input_texture(): ...
    def get_shader_input_vector(self, object, /): ...
    def get_shader_priority(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasShader(self, /): ...
    def hasShaderInput(self, object, /): ...
    def has_shader(self, /): ...
    def has_shader_input(self, object, /): ...
    instance_count = None
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def registerWithReadFactory(): ...
    def register_with_read_factory(): ...
    def setFlag(): ...
    def setInstanceCount(self, object, /): ...
    def setShader(): ...
    def setShaderAuto(): ...
    def setShaderInput(): ...
    def setShaderInputs(): ...
    def setShaderOff(): ...
    def set_flag(): ...
    def set_instance_count(self, object, /): ...
    def set_shader(): ...
    def set_shader_auto(): ...
    def set_shader_input(): ...
    def set_shader_inputs(): ...
    def set_shader_off(): ...
    shader = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class ShaderBuffer:
    ...
    ATHardware:int = None
    ATNone:int = None
    ATPanda:int = None
    AT_hardware:int = None
    AT_none:int = None
    AT_panda:int = None
    CClipPoint:int = None
    CColor:int = None
    CIndex:int = None
    CMatrix:int = None
    CMorphDelta:int = None
    CNormal:int = None
    COther:int = None
    CPoint:int = None
    CTexcoord:int = None
    CVector:int = None
    C_clip_point:int = None
    C_color:int = None
    C_index:int = None
    C_matrix:int = None
    C_morph_delta:int = None
    C_normal:int = None
    C_other:int = None
    C_point:int = None
    C_texcoord:int = None
    C_vector:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    GRAdjacency:int = None
    GRCompositeBits:int = None
    GRFlatFirstVertex:int = None
    GRFlatLastVertex:int = None
    GRIndexedBits:int = None
    GRIndexedOther:int = None
    GRIndexedPoint:int = None
    GRLineStrip:int = None
    GRPerPointSize:int = None
    GRPoint:int = None
    GRPointAspectRatio:int = None
    GRPointBits:int = None
    GRPointPerspective:int = None
    GRPointRotate:int = None
    GRPointScale:int = None
    GRPointSprite:int = None
    GRPointSpriteTexMatrix:int = None
    GRPointUniformSize:int = None
    GRRenderModePoint:int = None
    GRRenderModeWireframe:int = None
    GRShadeModelBits:int = None
    GRStripCutIndex:int = None
    GRTriangleFan:int = None
    GRTriangleStrip:int = None
    GR_adjacency:int = None
    GR_composite_bits:int = None
    GR_flat_first_vertex:int = None
    GR_flat_last_vertex:int = None
    GR_indexed_bits:int = None
    GR_indexed_other:int = None
    GR_indexed_point:int = None
    GR_line_strip:int = None
    GR_per_point_size:int = None
    GR_point:int = None
    GR_point_aspect_ratio:int = None
    GR_point_bits:int = None
    GR_point_perspective:int = None
    GR_point_rotate:int = None
    GR_point_scale:int = None
    GR_point_sprite:int = None
    GR_point_sprite_tex_matrix:int = None
    GR_point_uniform_size:int = None
    GR_render_mode_point:int = None
    GR_render_mode_wireframe:int = None
    GR_shade_model_bits:int = None
    GR_strip_cut_index:int = None
    GR_triangle_fan:int = None
    GR_triangle_strip:int = None
    NTFloat32:int = None
    NTFloat64:int = None
    NTInt16:int = None
    NTInt32:int = None
    NTInt8:int = None
    NTPackedDabc:int = None
    NTPackedDcba:int = None
    NTPackedUfloat:int = None
    NTStdfloat:int = None
    NTUint16:int = None
    NTUint32:int = None
    NTUint8:int = None
    NT_float32:int = None
    NT_float64:int = None
    NT_int16:int = None
    NT_int32:int = None
    NT_int8:int = None
    NT_packed_dabc:int = None
    NT_packed_dcba:int = None
    NT_packed_ufloat:int = None
    NT_stdfloat:int = None
    NT_uint16:int = None
    NT_uint32:int = None
    NT_uint8:int = None
    PTLines:int = None
    PTNone:int = None
    PTPatches:int = None
    PTPoints:int = None
    PTPolygons:int = None
    PT_lines:int = None
    PT_none:int = None
    PT_patches:int = None
    PT_points:int = None
    PT_polygons:int = None
    SMFlatFirstVertex:int = None
    SMFlatLastVertex:int = None
    SMSmooth:int = None
    SMUniform:int = None
    SM_flat_first_vertex:int = None
    SM_flat_last_vertex:int = None
    SM_smooth:int = None
    SM_uniform:int = None
    UHClient:int = None
    UHDynamic:int = None
    UHStatic:int = None
    UHStream:int = None
    UHUnspecified:int = None
    UH_client:int = None
    UH_dynamic:int = None
    UH_static:int = None
    UH_stream:int = None
    UH_unspecified:int = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    data_size_bytes = None
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def output(self, object, /): ...
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToGeomEnums(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_GeomEnums(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    usage_hint = None
class ShaderContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getShader(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_shader(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    shader = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class ShaderGenerator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearGeneratedShaders(self, /): ...
    def clear_generated_shaders(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def rehashGeneratedShaders(self, /): ...
    def rehash_generated_shaders(self, /): ...
    def synthesizeShader(): ...
    def synthesize_shader(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class ShaderInput:
    ...
    ALayered:int = None
    ARead:int = None
    AWrite:int = None
    A_layered:int = None
    A_read:int = None
    A_write:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MBuffer:int = None
    MInvalid:int = None
    MNodepath:int = None
    MNumeric:int = None
    MParam:int = None
    MTexture:int = None
    MTextureImage:int = None
    MTextureSampler:int = None
    MVector:int = None
    M_buffer:int = None
    M_invalid:int = None
    M_nodepath:int = None
    M_numeric:int = None
    M_param:int = None
    M_texture:int = None
    M_texture_image:int = None
    M_texture_sampler:int = None
    M_vector:int = None
    def addHash(self, object, /): ...
    def add_hash(self, object, /): ...
    def getBlank(): ...
    def getName(self, /): ...
    def getNodepath(self, /): ...
    def getPriority(self, /): ...
    def getSampler(self, /): ...
    def getTexture(self, /): ...
    def getValueType(self, /): ...
    def getVector(self, /): ...
    def get_blank(): ...
    def get_name(self, /): ...
    def get_nodepath(self, /): ...
    def get_priority(self, /): ...
    def get_sampler(self, /): ...
    def get_texture(self, /): ...
    def get_value_type(self, /): ...
    def get_vector(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ShaderPool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addShader(): ...
    def add_shader(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def hasShader(object, /): ...
    def has_shader(object, /): ...
    def listContents(object, /): ...
    def list_contents(object, /): ...
    def loadShader(object, /): ...
    def load_shader(object, /): ...
    def releaseAllShaders(): ...
    def releaseShader(object, /): ...
    def release_all_shaders(): ...
    def release_shader(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def verifyShader(object, /): ...
    def verify_shader(object, /): ...
    def write(object, /): ...
class ShaderTerrainMesh:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    chunk_size = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def generate(self, /): ...
    generate_patches = None
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getChunkSize(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getGeneratePatches(self, /): ...
    def getHeightfield(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTargetTriangleWidth(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUpdateEnabled(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_chunk_size(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_generate_patches(self, /): ...
    def get_heightfield(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_target_triangle_width(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_update_enabled(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    heightfield = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setChunkSize(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setGeneratePatches(self, object, /): ...
    def setHeightfield(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTargetTriangleWidth(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setUpdateEnabled(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_chunk_size(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_generate_patches(self, object, /): ...
    def set_heightfield(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_target_triangle_width(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_update_enabled(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    target_triangle_width = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    update_enabled = None
    def uvToWorld(): ...
    def uv_to_world(): ...
    def write(): ...
class SheetNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getNumUSubdiv(self, /): ...
    def getNumVSubdiv(self, /): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getSurface(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUseVertexColor(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_num_u_subdiv(self, /): ...
    def get_num_v_subdiv(self, /): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_surface(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_use_vertex_color(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetBound(self, object, /): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_bound(self, object, /): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNumUSubdiv(self, object, /): ...
    def setNumVSubdiv(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setSurface(self, object, /): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setUseVertexColor(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_u_subdiv(self, object, /): ...
    def set_num_v_subdiv(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_surface(self, object, /): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_use_vertex_color(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class ShowBoundsEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getTight(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_tight(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class SimpleAllocator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def alloc(): ...
    def getContiguous(self, /): ...
    def getFirstBlock(self, /): ...
    def getMaxSize(self, /): ...
    def getTotalSize(self, /): ...
    def get_contiguous(self, /): ...
    def get_first_block(self, /): ...
    def get_max_size(self, /): ...
    def get_total_size(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def output(self, object, /): ...
    def setMaxSize(self, object, /): ...
    def set_max_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class SimpleAllocatorBlock:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def free(self, /): ...
    def getAllocator(self, /): ...
    def getMaxSize(self, /): ...
    def getNextBlock(self, /): ...
    def getSize(self, /): ...
    def getStart(self, /): ...
    def get_allocator(self, /): ...
    def get_max_size(self, /): ...
    def get_next_block(self, /): ...
    def get_size(self, /): ...
    def get_start(self, /): ...
    def isFree(self, /): ...
    def is_free(self, /): ...
    def output(self, object, /): ...
    def realloc(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SimpleLru:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def beginEpoch(self, /): ...
    def begin_epoch(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerEvict(self, /): ...
    def consider_evict(self, /): ...
    def countActiveSize(self, /): ...
    def count_active_size(self, /): ...
    def evictTo(self, object, /): ...
    def evict_to(self, object, /): ...
    def getClassType(): ...
    def getMaxSize(self, /): ...
    def getName(self, /): ...
    def getTotalSize(self, /): ...
    def get_class_type(): ...
    def get_max_size(self, /): ...
    def get_name(self, /): ...
    def get_total_size(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    name = None
    def output(self, object, /): ...
    def setMaxSize(self, object, /): ...
    def setName(self, object, /): ...
    def set_max_size(self, object, /): ...
    def set_name(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToNamable(self, /): ...
    def upcast_to_Namable(self, /): ...
    def validate(self, /): ...
    def write(): ...
class SimpleLruPage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    def output(self, object, /): ...
    def setLruSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class SliderTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addSlider(): ...
    def add_slider(): ...
    def assign(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findSliders(self, object, /): ...
    def find_sliders(self, object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getModified(): ...
    def getNumSliders(self, /): ...
    def getRefCount(self, /): ...
    def getSlider(self, object, /): ...
    def getSliderRows(self, object, /): ...
    def getSliders(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_num_sliders(self, /): ...
    def get_ref_count(self, /): ...
    def get_slider(self, object, /): ...
    def get_slider_rows(self, object, /): ...
    def get_sliders(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasSlider(self, object, /): ...
    def has_slider(self, object, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegistered(self, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_registered(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def ref(self, /): ...
    ref_count = None
    def registerTable(object, /): ...
    def register_table(object, /): ...
    def removeSlider(self, object, /): ...
    def remove_slider(self, object, /): ...
    def setSlider(): ...
    def setSliderRows(): ...
    def set_slider(): ...
    def set_slider_rows(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(self, object, /): ...
class SocketAddress:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetIPAddressRaw(self, /): ...
    def clear(self, /): ...
    def getFamily(self, /): ...
    def getIp(self, /): ...
    def getIpPort(self, /): ...
    def getPort(self, /): ...
    def get_family(self, /): ...
    def get_ip(self, /): ...
    def get_ip_port(self, /): ...
    def get_port(self, /): ...
    def isAny(self, /): ...
    def isMcastRange(self, /): ...
    def is_any(self, /): ...
    def is_mcast_range(self, /): ...
    def setAnyIP(self, object, /): ...
    def setAnyIPv6(self, object, /): ...
    def setBroadcast(self, object, /): ...
    def setHost(): ...
    def setPort(self, object, /): ...
    def set_any_IP(self, object, /): ...
    def set_any_IPv6(self, object, /): ...
    def set_broadcast(self, object, /): ...
    def set_host(): ...
    def set_port(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SocketFdset:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def IsSetFor(self, object, /): ...
    def WaitForError(): ...
    def WaitForRead(): ...
    def WaitForWrite(): ...
    def clear(self, /): ...
    def setForSocket(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SocketIP:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SocketStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    def considerFlush(self, /): ...
    def consider_flush(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def getCollectTcp(self, /): ...
    def getCollectTcpInterval(self, /): ...
    def getTcpHeaderSize(self, /): ...
    def get_collect_tcp(self, /): ...
    def get_collect_tcp_interval(self, /): ...
    def get_tcp_header_size(self, /): ...
    def good(self, /): ...
    def isClosed(self, /): ...
    def is_closed(self, /): ...
    def put(self, object, /): ...
    def receiveDatagram(self, object, /): ...
    def receive_datagram(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def sendDatagram(self, object, /): ...
    def send_datagram(self, object, /): ...
    def setCollectTcp(self, object, /): ...
    def setCollectTcpInterval(self, object, /): ...
    def setTcpHeaderSize(self, object, /): ...
    def set_collect_tcp(self, object, /): ...
    def set_collect_tcp_interval(self, object, /): ...
    def set_tcp_header_size(self, object, /): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIostream(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcastToSSReader(self, /): ...
    def upcastToSSWriter(self, /): ...
    def upcast_to_SSReader(self, /): ...
    def upcast_to_SSWriter(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_iostream(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class SocketStreamRecorder:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def close(self, /): ...
    def considerFlush(self, /): ...
    def consider_flush(self, /): ...
    def flush(self, /): ...
    def getClassType(): ...
    def getCollectTcp(self, /): ...
    def getCollectTcpInterval(self, /): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_collect_tcp(self, /): ...
    def get_collect_tcp_interval(self, /): ...
    def get_ref_count(self, /): ...
    def isClosed(self, /): ...
    def isPlaying(self, /): ...
    def isRecording(self, /): ...
    def is_closed(self, /): ...
    def is_playing(self, /): ...
    def is_recording(self, /): ...
    def receiveDatagram(self, object, /): ...
    def receive_datagram(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def sendDatagram(self, object, /): ...
    def send_datagram(self, object, /): ...
    def setCollectTcp(self, object, /): ...
    def setCollectTcpInterval(self, object, /): ...
    def set_collect_tcp(self, object, /): ...
    def set_collect_tcp_interval(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
    def upcastToRecorderBase(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcast_to_RecorderBase(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
class SocketTCP:
    ...
    def Active(self, /): ...
    def ActiveOpen(): ...
    def ActiveOpenNonBlocking(self, object, /): ...
    def Close(self, /): ...
    def DontLinger(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def ErrorIsWouldBlocking(self, object, /): ...
    def ErrorIs_WouldBlocking(self, object, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def RecvData(self, object, /): ...
    def SendData(self, object, /): ...
    def SetBlocking(self, /): ...
    def SetLinger(): ...
    def SetNoDelay(): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSendBufferSize(self, object, /): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def ShutdownSend(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SocketTCPListen:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetIncomingConnection(): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def OpenForListen(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SocketUDP:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def InitToAddress(self, object, /): ...
    def OpenForInput(self, object, /): ...
    def OpenForInputMCast(self, object, /): ...
    def Send(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SocketUDPIncoming:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def OpenForInput(self, object, /): ...
    def OpenForInputMCast(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class SocketUDPOutgoing:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def InitToAddress(self, object, /): ...
    def Send(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_Address:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetIPAddressRaw(self, /): ...
    def clear(self, /): ...
    def getFamily(self, /): ...
    def getIp(self, /): ...
    def getIpPort(self, /): ...
    def getPort(self, /): ...
    def get_family(self, /): ...
    def get_ip(self, /): ...
    def get_ip_port(self, /): ...
    def get_port(self, /): ...
    def isAny(self, /): ...
    def isMcastRange(self, /): ...
    def is_any(self, /): ...
    def is_mcast_range(self, /): ...
    def setAnyIP(self, object, /): ...
    def setAnyIPv6(self, object, /): ...
    def setBroadcast(self, object, /): ...
    def setHost(): ...
    def setPort(self, object, /): ...
    def set_any_IP(self, object, /): ...
    def set_any_IPv6(self, object, /): ...
    def set_broadcast(self, object, /): ...
    def set_host(): ...
    def set_port(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Socket_IP:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_TCP:
    ...
    def Active(self, /): ...
    def ActiveOpen(): ...
    def ActiveOpenNonBlocking(self, object, /): ...
    def Close(self, /): ...
    def DontLinger(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def ErrorIsWouldBlocking(self, object, /): ...
    def ErrorIs_WouldBlocking(self, object, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def RecvData(self, object, /): ...
    def SendData(self, object, /): ...
    def SetBlocking(self, /): ...
    def SetLinger(): ...
    def SetNoDelay(): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSendBufferSize(self, object, /): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def ShutdownSend(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_TCP_Listen:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetIncomingConnection(): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def OpenForListen(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_UDP:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def InitToAddress(self, object, /): ...
    def OpenForInput(self, object, /): ...
    def OpenForInputMCast(self, object, /): ...
    def Send(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_UDP_Incoming:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def OpenForInput(self, object, /): ...
    def OpenForInputMCast(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_UDP_Outgoing:
    ...
    def Active(self, /): ...
    def Close(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def GetLastError(): ...
    def GetPeerName(self, /): ...
    def GetSocket(self, /): ...
    def InitNetworkDriver(): ...
    def InitNoAddress(self, /): ...
    def InitToAddress(self, object, /): ...
    def Send(self, object, /): ...
    def SendTo(): ...
    def SetBlocking(self, /): ...
    def SetNonBlocking(self, /): ...
    def SetRecvBufferSize(self, object, /): ...
    def SetReuseAddress(): ...
    def SetSocket(self, object, /): ...
    def SetToBroadCast(self, /): ...
    def SetV6Only(self, object, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Socket_fdset:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def IsSetFor(self, object, /): ...
    def WaitForError(): ...
    def WaitForRead(): ...
    def WaitForWrite(): ...
    def clear(self, /): ...
    def setForSocket(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SparseArray:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allOff(): ...
    def allOn(): ...
    def all_off(): ...
    def all_on(): ...
    def bit(object, /): ...
    def clear(self, /): ...
    def clearBit(self, object, /): ...
    def clearRange(): ...
    def clear_bit(self, object, /): ...
    def clear_range(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getBit(self, object, /): ...
    def getClassType(): ...
    def getHighestBits(self, /): ...
    def getHighestOffBit(self, /): ...
    def getHighestOnBit(self, /): ...
    def getLowestOffBit(self, /): ...
    def getLowestOnBit(self, /): ...
    def getMaxNumBits(): ...
    def getNextHigherDifferentBit(self, object, /): ...
    def getNumBits(self, /): ...
    def getNumOffBits(self, /): ...
    def getNumOnBits(self, /): ...
    def getNumSubranges(self, /): ...
    def getSubrangeBegin(self, object, /): ...
    def getSubrangeEnd(self, object, /): ...
    def get_bit(self, object, /): ...
    def get_class_type(): ...
    def get_highest_bits(self, /): ...
    def get_highest_off_bit(self, /): ...
    def get_highest_on_bit(self, /): ...
    def get_lowest_off_bit(self, /): ...
    def get_lowest_on_bit(self, /): ...
    def get_max_num_bits(): ...
    def get_next_higher_different_bit(self, object, /): ...
    def get_num_bits(self, /): ...
    def get_num_off_bits(self, /): ...
    def get_num_on_bits(self, /): ...
    def get_num_subranges(self, /): ...
    def get_subrange_begin(self, object, /): ...
    def get_subrange_end(self, object, /): ...
    def hasAllOf(): ...
    def hasAnyOf(): ...
    def hasBitsInCommon(self, object, /): ...
    def hasMaxNumBits(): ...
    def has_all_of(): ...
    def has_any_of(): ...
    def has_bits_in_common(self, object, /): ...
    def has_max_num_bits(): ...
    def invertInPlace(self, /): ...
    def invert_in_place(self, /): ...
    def isAllOn(self, /): ...
    def isInverse(self, /): ...
    def isZero(self, /): ...
    def is_all_on(self, /): ...
    def is_inverse(self, /): ...
    def is_zero(self, /): ...
    def lowerOn(object, /): ...
    def lower_on(object, /): ...
    def output(self, object, /): ...
    def range(): ...
    def setBit(self, object, /): ...
    def setBitTo(): ...
    def setRange(): ...
    def setRangeTo(): ...
    def set_bit(self, object, /): ...
    def set_bit_to(): ...
    def set_range(): ...
    def set_range_to(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SphereLight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    attenuation = None
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSpecularColor(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_specular_color(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getMaxDistance(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPoint(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRadius(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_max_distance(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_point(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_radius(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_distance = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    point = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    radius = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttenuation(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setMaxDistance(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPoint(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setRadius(self, object, /): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setSpecularColor(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attenuation(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_max_distance(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_point(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_radius(self, object, /): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_specular_color(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    specular_color = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class Spotlight:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def activateLens(self, object, /): ...
    def activate_lens(self, object, /): ...
    active = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def asNode(self, /): ...
    def as_light(self, /): ...
    def as_node(self, /): ...
    attenuation = None
    aux_scene_data = None
    bounds_stale = None
    bounds_type = None
    camera_mask = None
    children = None
    def cleanupAuxSceneData(): ...
    def cleanup_aux_scene_data(): ...
    def clearAttrib(self, object, /): ...
    def clearAuxSceneData(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearSpecularColor(self, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTagState(self, object, /): ...
    def clearTagStates(self, /): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_aux_scene_data(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_specular_color(self, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_tag_state(self, object, /): ...
    def clear_tag_states(self, /): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    color = None
    color_temperature = None
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copyLens(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_lens(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    cull_bounds = None
    cull_center = None
    def deactivateLens(self, object, /): ...
    def deactivate_lens(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    display_regions = None
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    exponent = None
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttenuation(self, /): ...
    def getAttrib(self, object, /): ...
    def getAuxSceneData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCameraMask(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassPriority(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getColorTemperature(self, /): ...
    def getCullBounds(self, /): ...
    def getCullCenter(self, /): ...
    def getDisplayRegion(self, object, /): ...
    def getDisplayRegions(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getExponent(self, /): ...
    def getFancyBits(): ...
    def getInitialState(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLens(): ...
    def getLensActive(self, object, /): ...
    def getLodCenter(self, /): ...
    def getLodScale(self, /): ...
    def getMaxDistance(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumDisplayRegions(self, /): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPriority(self, /): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getScene(self, /): ...
    def getShadowBuffer(self, object, /): ...
    def getShadowBufferSize(self, /): ...
    def getShadowBufferSort(self, /): ...
    def getSpecularColor(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTagState(self, object, /): ...
    def getTagStateKey(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attenuation(self, /): ...
    def get_attrib(self, object, /): ...
    def get_aux_scene_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_camera_mask(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_priority(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_color_temperature(self, /): ...
    def get_cull_bounds(self, /): ...
    def get_cull_center(self, /): ...
    def get_display_region(self, object, /): ...
    def get_display_regions(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_exponent(self, /): ...
    def get_fancy_bits(): ...
    def get_initial_state(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_lens(): ...
    def get_lens_active(self, object, /): ...
    def get_lod_center(self, /): ...
    def get_lod_scale(self, /): ...
    def get_max_distance(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_display_regions(self, /): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_priority(self, /): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_scene(self, /): ...
    def get_shadow_buffer(self, object, /): ...
    def get_shadow_buffer_size(self, /): ...
    def get_shadow_buffer_sort(self, /): ...
    def get_specular_color(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_tag_state(self, object, /): ...
    def get_tag_state_key(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasColorTemperature(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasSpecularColor(self, /): ...
    def hasTag(): ...
    def hasTagState(self, object, /): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_color_temperature(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_specular_color(self, /): ...
    def has_tag(): ...
    def has_tag_state(self, object, /): ...
    def has_tags(self, /): ...
    def hideFrustum(self, /): ...
    def hide_frustum(self, /): ...
    initial_state = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isActive(self, /): ...
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isInView(): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isShadowCaster(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_active(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_in_view(): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_shadow_caster(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listAuxSceneData(self, object, /): ...
    def listTags(): ...
    def list_aux_scene_data(self, object, /): ...
    def list_tags(): ...
    lod_center = None
    lod_scale = None
    def ls(): ...
    def makeCopy(self, /): ...
    def makeSpot(): ...
    def make_copy(self, /): ...
    def make_spot(): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_distance = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    priority = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    scene = None
    def setActive(self, object, /): ...
    def setAttenuation(self, object, /): ...
    def setAttrib(): ...
    def setAuxSceneData(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCameraMask(self, object, /): ...
    def setColor(self, object, /): ...
    def setColorTemperature(self, object, /): ...
    def setCullBounds(self, object, /): ...
    def setCullCenter(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setExponent(self, object, /): ...
    def setFinal(self, object, /): ...
    def setInitialState(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setLens(): ...
    def setLensActive(): ...
    def setLodCenter(self, object, /): ...
    def setLodScale(self, object, /): ...
    def setMaxDistance(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPriority(self, object, /): ...
    def setPythonTag(): ...
    def setScene(self, object, /): ...
    def setShadowBufferSize(self, object, /): ...
    def setShadowCaster(): ...
    def setSpecularColor(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTagState(): ...
    def setTagStateKey(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_active(self, object, /): ...
    def set_attenuation(self, object, /): ...
    def set_attrib(): ...
    def set_aux_scene_data(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_camera_mask(self, object, /): ...
    def set_color(self, object, /): ...
    def set_color_temperature(self, object, /): ...
    def set_cull_bounds(self, object, /): ...
    def set_cull_center(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_exponent(self, object, /): ...
    def set_final(self, object, /): ...
    def set_initial_state(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_lens(): ...
    def set_lens_active(): ...
    def set_lod_center(self, object, /): ...
    def set_lod_scale(self, object, /): ...
    def set_max_distance(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_priority(self, object, /): ...
    def set_python_tag(): ...
    def set_scene(self, object, /): ...
    def set_shadow_buffer_size(self, object, /): ...
    def set_shadow_caster(): ...
    def set_specular_color(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tag_state(): ...
    def set_tag_state_key(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    shadow_buffer_size = None
    shadow_caster = None
    def showFrustum(self, /): ...
    def show_frustum(self, /): ...
    specular_color = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tag_state_key = None
    tag_states = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToCamera(self, /): ...
    def upcastToLight(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Camera(self, /): ...
    def upcast_to_Light(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
class StackedPerlinNoise2:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLevel(): ...
    def add_level(): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def noise(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class StackedPerlinNoise3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addLevel(): ...
    def add_level(): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def noise(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class StaticTextFont:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RMDistanceField:int = None
    RMExtruded:int = None
    RMInvalid:int = None
    RMPolygon:int = None
    RMSolid:int = None
    RMTexture:int = None
    RMWireframe:int = None
    RM_distance_field:int = None
    RM_extruded:int = None
    RM_invalid:int = None
    RM_polygon:int = None
    RM_solid:int = None
    RM_texture:int = None
    RM_wireframe:int = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getClassType(): ...
    def getGlyph(self, object, /): ...
    def getKerning(): ...
    def getLineHeight(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSpaceAdvance(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_glyph(self, object, /): ...
    def get_kerning(): ...
    def get_line_height(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_space_advance(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    line_height = None
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setLineHeight(self, object, /): ...
    def setName(self, object, /): ...
    def setSpaceAdvance(self, object, /): ...
    def set_line_height(self, object, /): ...
    def set_name(self, object, /): ...
    def set_space_advance(self, object, /): ...
    space_advance = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    valid = None
    def write(): ...
class StencilAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    SCFAlways:int = None
    SCFEqual:int = None
    SCFGreaterThan:int = None
    SCFGreaterThanOrEqual:int = None
    SCFLessThan:int = None
    SCFLessThanOrEqual:int = None
    SCFNever:int = None
    SCFNotEqual:int = None
    SCF_always:int = None
    SCF_equal:int = None
    SCF_greater_than:int = None
    SCF_greater_than_or_equal:int = None
    SCF_less_than:int = None
    SCF_less_than_or_equal:int = None
    SCF_never:int = None
    SCF_not_equal:int = None
    SODecrement:int = None
    SODecrementSaturate:int = None
    SOIncrement:int = None
    SOIncrementSaturate:int = None
    SOInvert:int = None
    SOKeep:int = None
    SOReplace:int = None
    SOZero:int = None
    SO_decrement:int = None
    SO_decrement_saturate:int = None
    SO_increment:int = None
    SO_increment_saturate:int = None
    SO_invert:int = None
    SO_keep:int = None
    SO_replace:int = None
    SO_zero:int = None
    SRSBackComparisonFunction:int = None
    SRSBackStencilFailOperation:int = None
    SRSBackStencilPassZFailOperation:int = None
    SRSBackStencilPassZPassOperation:int = None
    SRSClear:int = None
    SRSClearValue:int = None
    SRSFrontComparisonFunction:int = None
    SRSFrontStencilFailOperation:int = None
    SRSFrontStencilPassZFailOperation:int = None
    SRSFrontStencilPassZPassOperation:int = None
    SRSReadMask:int = None
    SRSReference:int = None
    SRSTotal:int = None
    SRSWriteMask:int = None
    SRS_back_comparison_function:int = None
    SRS_back_stencil_fail_operation:int = None
    SRS_back_stencil_pass_z_fail_operation:int = None
    SRS_back_stencil_pass_z_pass_operation:int = None
    SRS_clear:int = None
    SRS_clear_value:int = None
    SRS_front_comparison_function:int = None
    SRS_front_stencil_fail_operation:int = None
    SRS_front_stencil_pass_z_fail_operation:int = None
    SRS_front_stencil_pass_z_pass_operation:int = None
    SRS_read_mask:int = None
    SRS_reference:int = None
    SRS_total:int = None
    SRS_write_mask:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getRenderState(self, object, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_render_state(self, object, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def make2Sided(): ...
    def make2SidedWithClear(): ...
    def makeDefault(): ...
    def makeOff(): ...
    def makeWithClear(): ...
    def make_2_sided(): ...
    def make_2_sided_with_clear(): ...
    def make_default(): ...
    def make_off(): ...
    def make_with_clear(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class StereoDisplayRegion:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RTPAuxFloat0:int = None
    RTPAuxFloat1:int = None
    RTPAuxFloat2:int = None
    RTPAuxFloat3:int = None
    RTPAuxHrgba0:int = None
    RTPAuxHrgba1:int = None
    RTPAuxHrgba2:int = None
    RTPAuxHrgba3:int = None
    RTPAuxRgba0:int = None
    RTPAuxRgba1:int = None
    RTPAuxRgba2:int = None
    RTPAuxRgba3:int = None
    RTPCOUNT:int = None
    RTPColor:int = None
    RTPDepth:int = None
    RTPDepthStencil:int = None
    RTPStencil:int = None
    RTP_COUNT:int = None
    RTP_aux_float_0:int = None
    RTP_aux_float_1:int = None
    RTP_aux_float_2:int = None
    RTP_aux_float_3:int = None
    RTP_aux_hrgba_0:int = None
    RTP_aux_hrgba_1:int = None
    RTP_aux_hrgba_2:int = None
    RTP_aux_hrgba_3:int = None
    RTP_aux_rgba_0:int = None
    RTP_aux_rgba_1:int = None
    RTP_aux_rgba_2:int = None
    RTP_aux_rgba_3:int = None
    RTP_color:int = None
    RTP_depth:int = None
    RTP_depth_stencil:int = None
    RTP_stencil:int = None
    active = None
    camera = None
    def clearCullCallback(self, /): ...
    def clearCullResult(self, /): ...
    def clearDrawCallback(self, /): ...
    clear_color = None
    def clear_cull_callback(self, /): ...
    def clear_cull_result(self, /): ...
    clear_depth = None
    def clear_draw_callback(self, /): ...
    clear_stencil = None
    cull_callback = None
    cull_traverser = None
    dimensions = None
    def disableClears(self, /): ...
    def disable_clears(self, /): ...
    draw_callback = None
    def getBottom(): ...
    def getCamera(): ...
    def getClassType(): ...
    def getClearActive(self, object, /): ...
    def getClearColor(self, /): ...
    def getClearColorActive(self, /): ...
    def getClearDepth(self, /): ...
    def getClearDepthActive(self, /): ...
    def getClearStencil(self, /): ...
    def getClearStencilActive(self, /): ...
    def getClearValue(self, object, /): ...
    def getCullCallback(self, /): ...
    def getCullTraverser(self, /): ...
    def getDimensions(): ...
    def getDrawCallback(self, /): ...
    def getIncompleteRender(self, /): ...
    def getLeft(): ...
    def getLeftEye(self, /): ...
    def getLensIndex(self, /): ...
    def getNumRegions(self, /): ...
    def getPipe(self, /): ...
    def getPixelFactor(self, /): ...
    def getPixelHeight(): ...
    def getPixelSize(): ...
    def getPixelWidth(): ...
    def getPixelZoom(self, /): ...
    def getRefCount(self, /): ...
    def getRenderbufferType(object, /): ...
    def getRight(): ...
    def getRightEye(self, /): ...
    def getScissorEnabled(self, /): ...
    def getScreenshot(): ...
    def getSort(self, /): ...
    def getStereoChannel(self, /): ...
    def getTargetTexPage(self, /): ...
    def getTexViewOffset(self, /): ...
    def getTextureReloadPriority(self, /): ...
    def getTop(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWindow(self, /): ...
    def get_bottom(): ...
    def get_camera(): ...
    def get_class_type(): ...
    def get_clear_active(self, object, /): ...
    def get_clear_color(self, /): ...
    def get_clear_color_active(self, /): ...
    def get_clear_depth(self, /): ...
    def get_clear_depth_active(self, /): ...
    def get_clear_stencil(self, /): ...
    def get_clear_stencil_active(self, /): ...
    def get_clear_value(self, object, /): ...
    def get_cull_callback(self, /): ...
    def get_cull_traverser(self, /): ...
    def get_dimensions(): ...
    def get_draw_callback(self, /): ...
    def get_incomplete_render(self, /): ...
    def get_left(): ...
    def get_left_eye(self, /): ...
    def get_lens_index(self, /): ...
    def get_num_regions(self, /): ...
    def get_pipe(self, /): ...
    def get_pixel_factor(self, /): ...
    def get_pixel_height(): ...
    def get_pixel_size(): ...
    def get_pixel_width(): ...
    def get_pixel_zoom(self, /): ...
    def get_ref_count(self, /): ...
    def get_renderbuffer_type(object, /): ...
    def get_right(): ...
    def get_right_eye(self, /): ...
    def get_scissor_enabled(self, /): ...
    def get_screenshot(): ...
    def get_sort(self, /): ...
    def get_stereo_channel(self, /): ...
    def get_target_tex_page(self, /): ...
    def get_tex_view_offset(self, /): ...
    def get_texture_reload_priority(self, /): ...
    def get_top(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_window(self, /): ...
    incomplete_render = None
    def isActive(self, /): ...
    def isAnyClearActive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isStereo(self, /): ...
    def is_active(self, /): ...
    def is_any_clear_active(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_stereo(self, /): ...
    left_eye = None
    lens_index = None
    def makeCullResultGraph(self, /): ...
    def makeScreenshotFilename(): ...
    def make_cull_result_graph(self, /): ...
    def make_screenshot_filename(): ...
    def output(self, object, /): ...
    pipe = None
    pixel_factor = None
    pixel_size = None
    pixel_zoom = None
    def ref(self, /): ...
    ref_count = None
    right_eye = None
    def saveScreenshot(): ...
    def saveScreenshotDefault(): ...
    def save_screenshot(): ...
    def save_screenshot_default(): ...
    scissor_enabled = None
    def setActive(self, object, /): ...
    def setCamera(self, object, /): ...
    def setClearActive(): ...
    def setClearColor(self, object, /): ...
    def setClearColorActive(self, object, /): ...
    def setClearDepth(self, object, /): ...
    def setClearDepthActive(self, object, /): ...
    def setClearStencil(self, object, /): ...
    def setClearStencilActive(self, object, /): ...
    def setClearValue(): ...
    def setCubeMapIndex(self, object, /): ...
    def setCullCallback(self, object, /): ...
    def setCullTraverser(self, object, /): ...
    def setDimensions(): ...
    def setDrawCallback(self, object, /): ...
    def setIncompleteRender(self, object, /): ...
    def setLensIndex(self, object, /): ...
    def setNumRegions(self, object, /): ...
    def setPixelZoom(self, object, /): ...
    def setScissorEnabled(self, object, /): ...
    def setSort(self, object, /): ...
    def setStereoChannel(self, object, /): ...
    def setTargetTexPage(self, object, /): ...
    def setTexViewOffset(self, object, /): ...
    def setTextureReloadPriority(self, object, /): ...
    def set_active(self, object, /): ...
    def set_camera(self, object, /): ...
    def set_clear_active(): ...
    def set_clear_color(self, object, /): ...
    def set_clear_color_active(self, object, /): ...
    def set_clear_depth(self, object, /): ...
    def set_clear_depth_active(self, object, /): ...
    def set_clear_stencil(self, object, /): ...
    def set_clear_stencil_active(self, object, /): ...
    def set_clear_value(): ...
    def set_cube_map_index(self, object, /): ...
    def set_cull_callback(self, object, /): ...
    def set_cull_traverser(self, object, /): ...
    def set_dimensions(): ...
    def set_draw_callback(self, object, /): ...
    def set_incomplete_render(self, object, /): ...
    def set_lens_index(self, object, /): ...
    def set_num_regions(self, object, /): ...
    def set_pixel_zoom(self, object, /): ...
    def set_scissor_enabled(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_stereo_channel(self, object, /): ...
    def set_target_tex_page(self, object, /): ...
    def set_tex_view_offset(self, object, /): ...
    def set_texture_reload_priority(self, object, /): ...
    sort = None
    stereo = None
    stereo_channel = None
    def supportsPixelZoom(self, /): ...
    def supports_pixel_zoom(self, /): ...
    target_tex_page = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    tex_view_offset = None
    texture_reload_priority = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToDrawableRegion(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_DrawableRegion(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    window = None
class StreamReader:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def extractBytes(self, object, /): ...
    def extract_bytes(self, object, /): ...
    def getBeFloat32(self, /): ...
    def getBeFloat64(self, /): ...
    def getBeInt16(self, /): ...
    def getBeInt32(self, /): ...
    def getBeInt64(self, /): ...
    def getBeUint16(self, /): ...
    def getBeUint32(self, /): ...
    def getBeUint64(self, /): ...
    def getBool(self, /): ...
    def getFixedString(self, object, /): ...
    def getFloat32(self, /): ...
    def getFloat64(self, /): ...
    def getInt16(self, /): ...
    def getInt32(self, /): ...
    def getInt64(self, /): ...
    def getInt8(self, /): ...
    def getIstream(self, /): ...
    def getString(self, /): ...
    def getString32(self, /): ...
    def getUint16(self, /): ...
    def getUint32(self, /): ...
    def getUint64(self, /): ...
    def getUint8(self, /): ...
    def getZString(self, /): ...
    def get_be_float32(self, /): ...
    def get_be_float64(self, /): ...
    def get_be_int16(self, /): ...
    def get_be_int32(self, /): ...
    def get_be_int64(self, /): ...
    def get_be_uint16(self, /): ...
    def get_be_uint32(self, /): ...
    def get_be_uint64(self, /): ...
    def get_bool(self, /): ...
    def get_fixed_string(self, object, /): ...
    def get_float32(self, /): ...
    def get_float64(self, /): ...
    def get_int16(self, /): ...
    def get_int32(self, /): ...
    def get_int64(self, /): ...
    def get_int8(self, /): ...
    def get_istream(self, /): ...
    def get_string(self, /): ...
    def get_string32(self, /): ...
    def get_uint16(self, /): ...
    def get_uint32(self, /): ...
    def get_uint64(self, /): ...
    def get_uint8(self, /): ...
    def get_z_string(self, /): ...
    istream = None
    def readline(self, /): ...
    def readlines(self, /): ...
    def skipBytes(self, object, /): ...
    def skip_bytes(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class StreamWrapper:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def getIostream(self, /): ...
    def getIstream(self, /): ...
    def getOstream(self, /): ...
    def get_iostream(self, /): ...
    def get_istream(self, /): ...
    def get_ostream(self, /): ...
    iostream = None
    istream = None
    ostream = None
    def release(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToIStreamWrapper(self, /): ...
    def upcastToOStreamWrapper(self, /): ...
    def upcastToStreamWrapperBase(self, /): ...
    def upcast_to_IStreamWrapper(self, /): ...
    def upcast_to_OStreamWrapper(self, /): ...
    def upcast_to_StreamWrapperBase(self, /): ...
class StreamWrapperBase:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def acquire(self, /): ...
    def release(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class StreamWriter:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addBeFloat32(self, object, /): ...
    def addBeFloat64(self, object, /): ...
    def addBeInt16(self, object, /): ...
    def addBeInt32(self, object, /): ...
    def addBeInt64(self, object, /): ...
    def addBeUint16(self, object, /): ...
    def addBeUint32(self, object, /): ...
    def addBeUint64(self, object, /): ...
    def addBool(self, object, /): ...
    def addFixedString(): ...
    def addFloat32(self, object, /): ...
    def addFloat64(self, object, /): ...
    def addInt16(self, object, /): ...
    def addInt32(self, object, /): ...
    def addInt64(self, object, /): ...
    def addInt8(self, object, /): ...
    def addString(self, object, /): ...
    def addString32(self, object, /): ...
    def addUint16(self, object, /): ...
    def addUint32(self, object, /): ...
    def addUint64(self, object, /): ...
    def addUint8(self, object, /): ...
    def addZString(self, object, /): ...
    def add_be_float32(self, object, /): ...
    def add_be_float64(self, object, /): ...
    def add_be_int16(self, object, /): ...
    def add_be_int32(self, object, /): ...
    def add_be_int64(self, object, /): ...
    def add_be_uint16(self, object, /): ...
    def add_be_uint32(self, object, /): ...
    def add_be_uint64(self, object, /): ...
    def add_bool(self, object, /): ...
    def add_fixed_string(): ...
    def add_float32(self, object, /): ...
    def add_float64(self, object, /): ...
    def add_int16(self, object, /): ...
    def add_int32(self, object, /): ...
    def add_int64(self, object, /): ...
    def add_int8(self, object, /): ...
    def add_string(self, object, /): ...
    def add_string32(self, object, /): ...
    def add_uint16(self, object, /): ...
    def add_uint32(self, object, /): ...
    def add_uint64(self, object, /): ...
    def add_uint8(self, object, /): ...
    def add_z_string(self, object, /): ...
    def appendData(self, object, /): ...
    def append_data(self, object, /): ...
    def assign(self, object, /): ...
    def flush(self, /): ...
    def getOstream(self, /): ...
    def get_ostream(self, /): ...
    ostream = None
    def padBytes(self, object, /): ...
    def pad_bytes(self, object, /): ...
    softspace = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class StringStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def clearData(self, /): ...
    def clear_data(self, /): ...
    cur:int = None
    data = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def getData(self, /): ...
    def getDataSize(self, /): ...
    def get_data(self, /): ...
    def get_data_size(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def setData(self, object, /): ...
    def set_data(self, object, /): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class SubStream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class SubfileInfo:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getFile(self, /): ...
    def getFilename(self, /): ...
    def getSize(self, /): ...
    def getStart(self, /): ...
    def get_file(self, /): ...
    def get_filename(self, /): ...
    def get_size(self, /): ...
    def get_start(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class SwitchNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVisibleChild(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_visible_child(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setVisibleChild(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_visible_child(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    visible_child = None
    def write(): ...
TINYXMLINCLUDED:str = None
TINYXML_INCLUDED:str = None
TIXMLENCODINGLEGACY:int = None
TIXMLENCODINGUNKNOWN:int = None
TIXMLENCODINGUTF8:int = None
TIXMLSAFE:str = None
TIXMLSNPRINTF:str = None
TIXMLSSCANF:str = None
TIXMLSTRING:str = None
TIXML_ENCODING_LEGACY:int = None
TIXML_ENCODING_UNKNOWN:int = None
TIXML_ENCODING_UTF8:int = None
TIXML_SAFE:str = None
TIXML_SNPRINTF:str = None
TIXML_SSCANF:str = None
TIXML_STRING:str = None
TPHigh:int = None
TPLow:int = None
TPNormal:int = None
TPUrgent:int = None
TP_high:int = None
TP_low:int = None
TP_normal:int = None
TP_urgent:int = None
class TemporaryFile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class TexGenAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    def addStage(): ...
    def add_stage(): ...
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getConstantValue(self, object, /): ...
    def getGeomRendering(self, object, /): ...
    def getHash(self, /): ...
    def getMode(self, object, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_constant_value(self, object, /): ...
    def get_geom_rendering(self, object, /): ...
    def get_hash(self, /): ...
    def get_mode(self, object, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasGenTexcoordStage(self, object, /): ...
    def hasStage(self, object, /): ...
    def has_gen_texcoord_stage(self, object, /): ...
    def has_stage(self, object, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeStage(self, object, /): ...
    def remove_stage(self, object, /): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class TexMatrixAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    def addStage(): ...
    def add_stage(): ...
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getGeomRendering(self, object, /): ...
    def getHash(self, /): ...
    def getMat(): ...
    def getNumAttribs(): ...
    def getNumStages(self, /): ...
    def getOverride(self, object, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getStage(self, object, /): ...
    def getStages(self, /): ...
    def getTransform(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_geom_rendering(self, object, /): ...
    def get_hash(self, /): ...
    def get_mat(): ...
    def get_num_attribs(): ...
    def get_num_stages(self, /): ...
    def get_override(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_stage(self, object, /): ...
    def get_stages(self, /): ...
    def get_transform(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasStage(self, object, /): ...
    def has_stage(self, object, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeStage(self, object, /): ...
    def remove_stage(self, object, /): ...
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class TexProjectorEffect:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addStage(): ...
    def add_stage(): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFrom(self, object, /): ...
    def getLensIndex(self, object, /): ...
    def getNumEffects(): ...
    def getRefCount(self, /): ...
    def getTo(self, object, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_from(self, object, /): ...
    def get_lens_index(self, object, /): ...
    def get_num_effects(): ...
    def get_ref_count(self, /): ...
    def get_to(self, object, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasStage(self, object, /): ...
    def has_stage(self, object, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listEffects(object, /): ...
    def list_effects(object, /): ...
    def make(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeStage(self, object, /): ...
    def remove_stage(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateEffects(): ...
    def validate_effects(): ...
    def write(): ...
class TextAssembler:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assembleText(self, /): ...
    def assemble_text(self, /): ...
    def assign(self, object, /): ...
    def calcC(self, object, /): ...
    def calcIndex(): ...
    def calcR(self, object, /): ...
    def calcWidth(): ...
    def calc_c(self, object, /): ...
    def calc_index(): ...
    def calc_r(self, object, /): ...
    def calc_width(): ...
    def clear(self, /): ...
    dynamic_merge = None
    def getCharacter(): ...
    def getDynamicMerge(self, /): ...
    def getGraphic(): ...
    def getLr(self, /): ...
    def getMaxRows(self, /): ...
    def getMultilineMode(self, /): ...
    def getNumCharacters(self, /): ...
    def getNumCols(self, object, /): ...
    def getNumRows(self, /): ...
    def getPlainWtext(self, /): ...
    def getProperties(): ...
    def getUl(self, /): ...
    def getUsageHint(self, /): ...
    def getWidth(): ...
    def getWordwrappedPlainWtext(self, /): ...
    def getWordwrappedWtext(self, /): ...
    def getWtext(self, /): ...
    def getXpos(): ...
    def getYpos(): ...
    def get_character(): ...
    def get_dynamic_merge(self, /): ...
    def get_graphic(): ...
    def get_lr(self, /): ...
    def get_max_rows(self, /): ...
    def get_multiline_mode(self, /): ...
    def get_num_characters(self, /): ...
    def get_num_cols(self, object, /): ...
    def get_num_rows(self, /): ...
    def get_plain_wtext(self, /): ...
    def get_properties(): ...
    def get_ul(self, /): ...
    def get_usage_hint(self, /): ...
    def get_width(): ...
    def get_wordwrapped_plain_wtext(self, /): ...
    def get_wordwrapped_wtext(self, /): ...
    def get_wtext(self, /): ...
    def get_xpos(): ...
    def get_ypos(): ...
    def hasCharacter(): ...
    def hasExactCharacter(): ...
    def has_character(): ...
    def has_exact_character(): ...
    def isWhitespace(): ...
    def is_whitespace(): ...
    max_rows = None
    multiline_mode = None
    properties = None
    def setDynamicMerge(self, object, /): ...
    def setMaxRows(self, object, /): ...
    def setMultilineMode(self, object, /): ...
    def setProperties(self, object, /): ...
    def setUsageHint(self, object, /): ...
    def setWsubstr(): ...
    def setWtext(self, object, /): ...
    def set_dynamic_merge(self, object, /): ...
    def set_max_rows(self, object, /): ...
    def set_multiline_mode(self, object, /): ...
    def set_properties(self, object, /): ...
    def set_usage_hint(self, object, /): ...
    def set_wsubstr(): ...
    def set_wtext(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    usage_hint = None
class TextEncoder:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    EIso8859:int = None
    EUnicode:int = None
    EUtf16be:int = None
    EUtf8:int = None
    E_iso8859:int = None
    E_unicode:int = None
    E_utf16be:int = None
    E_utf8:int = None
    def appendText(self, object, /): ...
    def appendUnicodeChar(self, object, /): ...
    def appendWtext(self, object, /): ...
    def append_text(self, object, /): ...
    def append_unicode_char(self, object, /): ...
    def append_wtext(self, object, /): ...
    def clearText(self, /): ...
    def clear_text(self, /): ...
    def decodeText(): ...
    def decode_text(): ...
    default_encoding:int = None
    def encodeWchar(): ...
    def encodeWtext(): ...
    def encode_wchar(): ...
    def encode_wtext(): ...
    def getDefaultEncoding(): ...
    def getEncodedChar(): ...
    def getEncoding(self, /): ...
    def getNumChars(self, /): ...
    def getText(): ...
    def getTextAsAscii(self, /): ...
    def getUnicodeChar(self, object, /): ...
    def getWtext(self, /): ...
    def getWtextAsAscii(self, /): ...
    def get_default_encoding(): ...
    def get_encoded_char(): ...
    def get_encoding(self, /): ...
    def get_num_chars(self, /): ...
    def get_text(): ...
    def get_text_as_ascii(self, /): ...
    def get_unicode_char(self, object, /): ...
    def get_wtext(self, /): ...
    def get_wtext_as_ascii(self, /): ...
    def hasText(self, /): ...
    def has_text(self, /): ...
    def isWtext(self, /): ...
    def is_wtext(self, /): ...
    def lower(): ...
    def makeLower(self, /): ...
    def makeUpper(self, /): ...
    def make_lower(self, /): ...
    def make_upper(self, /): ...
    def reencodeText(): ...
    def reencode_text(): ...
    def setDefaultEncoding(object, /): ...
    def setEncoding(self, object, /): ...
    def setText(): ...
    def setUnicodeChar(): ...
    def setWtext(self, object, /): ...
    def set_default_encoding(object, /): ...
    def set_encoding(self, object, /): ...
    def set_text(): ...
    def set_unicode_char(): ...
    def set_wtext(self, object, /): ...
    text = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unicodeIsalpha(object, /): ...
    def unicodeIsdigit(object, /): ...
    def unicodeIslower(object, /): ...
    def unicodeIspunct(object, /): ...
    def unicodeIsspace(object, /): ...
    def unicodeIsupper(object, /): ...
    def unicodeTolower(object, /): ...
    def unicodeToupper(object, /): ...
    def unicode_isalpha(object, /): ...
    def unicode_isdigit(object, /): ...
    def unicode_islower(object, /): ...
    def unicode_ispunct(object, /): ...
    def unicode_isspace(object, /): ...
    def unicode_isupper(object, /): ...
    def unicode_tolower(object, /): ...
    def unicode_toupper(object, /): ...
    def upper(): ...
class TextFont:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RMDistanceField:int = None
    RMExtruded:int = None
    RMInvalid:int = None
    RMPolygon:int = None
    RMSolid:int = None
    RMTexture:int = None
    RMWireframe:int = None
    RM_distance_field:int = None
    RM_extruded:int = None
    RM_invalid:int = None
    RM_polygon:int = None
    RM_solid:int = None
    RM_texture:int = None
    RM_wireframe:int = None
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def getClassType(): ...
    def getGlyph(self, object, /): ...
    def getKerning(): ...
    def getLineHeight(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSpaceAdvance(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_glyph(self, object, /): ...
    def get_kerning(): ...
    def get_line_height(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_space_advance(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isValid(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_valid(self, /): ...
    line_height = None
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setLineHeight(self, object, /): ...
    def setName(self, object, /): ...
    def setSpaceAdvance(self, object, /): ...
    def set_line_height(self, object, /): ...
    def set_name(self, object, /): ...
    def set_space_advance(self, object, /): ...
    space_advance = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    valid = None
    def write(): ...
class TextGlyph:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    advance = None
    character = None
    def getAdvance(self, /): ...
    def getCharacter(self, /): ...
    def getClassType(): ...
    def getGeom(self, object, /): ...
    def getQuad(): ...
    def getRefCount(self, /): ...
    def getState(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_advance(self, /): ...
    def get_character(self, /): ...
    def get_class_type(): ...
    def get_geom(self, object, /): ...
    def get_quad(): ...
    def get_ref_count(self, /): ...
    def get_state(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasQuad(self, /): ...
    def has_quad(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isWhitespace(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_whitespace(self, /): ...
    def ref(self, /): ...
    ref_count = None
    state = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class TextGraphic:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    frame = None
    def getFrame(self, /): ...
    def getInstanceFlag(self, /): ...
    def getModel(self, /): ...
    def get_frame(self, /): ...
    def get_instance_flag(self, /): ...
    def get_model(self, /): ...
    instance_flag = None
    model = None
    def setFrame(): ...
    def setInstanceFlag(self, object, /): ...
    def setModel(self, object, /): ...
    def set_frame(): ...
    def set_instance_flag(self, object, /): ...
    def set_model(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TextNode:
    ...
    ABoxedCenter:int = None
    ABoxedLeft:int = None
    ABoxedRight:int = None
    ACenter:int = None
    ALeft:int = None
    ARight:int = None
    A_boxed_center:int = None
    A_boxed_left:int = None
    A_boxed_right:int = None
    A_center:int = None
    A_left:int = None
    A_right:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DLtr:int = None
    DRtl:int = None
    D_ltr:int = None
    D_rtl:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    EIso8859:int = None
    EUnicode:int = None
    EUtf16be:int = None
    EUtf8:int = None
    E_iso8859:int = None
    E_unicode:int = None
    E_utf16be:int = None
    E_utf8:int = None
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    FFDynamicMerge:int = None
    FFLight:int = None
    FFMedium:int = None
    FFNone:int = None
    FFStrong:int = None
    FF_dynamic_merge:int = None
    FF_light:int = None
    FF_medium:int = None
    FF_none:int = None
    FF_strong:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addProperties(self, object, /): ...
    def addStashed(): ...
    def add_child(): ...
    def add_properties(self, object, /): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    align = None
    all_camera_mask = None
    def appendText(self, object, /): ...
    def appendUnicodeChar(self, object, /): ...
    def appendWtext(self, object, /): ...
    def append_text(self, object, /): ...
    def append_unicode_char(self, object, /): ...
    def append_wtext(self, object, /): ...
    def asLight(self, /): ...
    def as_light(self, /): ...
    def assign(self, object, /): ...
    bin = None
    bounds_stale = None
    bounds_type = None
    def calcWidth(self, object, /): ...
    def calc_width(self, object, /): ...
    card_color = None
    card_texture = None
    children = None
    def clear(self, /): ...
    def clearAlign(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBin(self, /): ...
    def clearBounds(self, /): ...
    def clearCard(self, /): ...
    def clearCardBorder(self, /): ...
    def clearCardTexture(self, /): ...
    def clearDirection(self, /): ...
    def clearDrawOrder(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearFont(self, /): ...
    def clearFrame(self, /): ...
    def clearGlyphScale(self, /): ...
    def clearGlyphShift(self, /): ...
    def clearIndent(self, /): ...
    def clearMaxRows(self, /): ...
    def clearName(self, /): ...
    def clearPreserveTrailingWhitespace(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearShadow(self, /): ...
    def clearShadowColor(self, /): ...
    def clearSlant(self, /): ...
    def clearSmallCaps(self, /): ...
    def clearSmallCapsScale(self, /): ...
    def clearState(): ...
    def clearTabWidth(self, /): ...
    def clearTag(): ...
    def clearText(self, /): ...
    def clearTextColor(self, /): ...
    def clearTextScale(self, /): ...
    def clearTransform(): ...
    def clearUnderscore(self, /): ...
    def clearUnderscoreHeight(self, /): ...
    def clearUnexpectedChange(self, object, /): ...
    def clearWordwrap(self, /): ...
    def clear_align(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bin(self, /): ...
    def clear_bounds(self, /): ...
    def clear_card(self, /): ...
    def clear_card_border(self, /): ...
    def clear_card_texture(self, /): ...
    def clear_direction(self, /): ...
    def clear_draw_order(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_font(self, /): ...
    def clear_frame(self, /): ...
    def clear_glyph_scale(self, /): ...
    def clear_glyph_shift(self, /): ...
    def clear_indent(self, /): ...
    def clear_max_rows(self, /): ...
    def clear_name(self, /): ...
    def clear_preserve_trailing_whitespace(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_shadow(self, /): ...
    def clear_shadow_color(self, /): ...
    def clear_slant(self, /): ...
    def clear_small_caps(self, /): ...
    def clear_small_caps_scale(self, /): ...
    def clear_state(): ...
    def clear_tab_width(self, /): ...
    def clear_tag(): ...
    def clear_text(self, /): ...
    def clear_text_color(self, /): ...
    def clear_text_scale(self, /): ...
    def clear_transform(): ...
    def clear_underscore(self, /): ...
    def clear_underscore_height(self, /): ...
    def clear_unexpected_change(self, object, /): ...
    def clear_wordwrap(self, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    coordinate_system = None
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decodeText(): ...
    def decode_from_bam_stream(): ...
    def decode_text(): ...
    default_encoding:int = None
    direction = None
    draw_control_mask = None
    draw_order = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encodeWchar(): ...
    def encodeWtext(): ...
    def encode_to_bam_stream(): ...
    def encode_wchar(): ...
    def encode_wtext(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    flatten_flags = None
    font = None
    def forceUpdate(self, /): ...
    def force_update(self, /): ...
    frame_color = None
    frame_corners = None
    frame_line_width = None
    def generate(self, /): ...
    def getAlign(self, /): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBin(self, /): ...
    def getBottom(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getCardActual(self, /): ...
    def getCardAsSet(self, /): ...
    def getCardBorderSize(self, /): ...
    def getCardBorderUvPortion(self, /): ...
    def getCardColor(self, /): ...
    def getCardDecal(self, /): ...
    def getCardTexture(self, /): ...
    def getCardTransformed(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getCoordinateSystem(self, /): ...
    def getDefaultEncoding(): ...
    def getDefaultFont(): ...
    def getDirection(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawOrder(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getEncodedChar(): ...
    def getEncoding(self, /): ...
    def getFancyBits(): ...
    def getFlattenFlags(self, /): ...
    def getFont(self, /): ...
    def getFrameActual(self, /): ...
    def getFrameAsSet(self, /): ...
    def getFrameColor(self, /): ...
    def getFrameCorners(self, /): ...
    def getFrameLineWidth(self, /): ...
    def getGlyphScale(self, /): ...
    def getGlyphShift(self, /): ...
    def getHeight(self, /): ...
    def getIndent(self, /): ...
    def getInternalBounds(): ...
    def getInternalGeom(self, /): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLeft(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getLineHeight(self, /): ...
    def getLowerRight3d(self, /): ...
    def getMaxRows(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChars(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumRows(self, /): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPreserveTrailingWhitespace(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getRight(self, /): ...
    def getShadow(self, /): ...
    def getShadowColor(self, /): ...
    def getSlant(self, /): ...
    def getSmallCaps(self, /): ...
    def getSmallCapsScale(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTabWidth(self, /): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getText(): ...
    def getTextAsAscii(self, /): ...
    def getTextColor(self, /): ...
    def getTextScale(self, /): ...
    def getTop(self, /): ...
    def getTransform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnderscore(self, /): ...
    def getUnderscoreHeight(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getUnicodeChar(self, object, /): ...
    def getUpperLeft3d(self, /): ...
    def getUsageHint(self, /): ...
    def getWidth(self, /): ...
    def getWordwrap(self, /): ...
    def getWordwrappedText(self, /): ...
    def getWordwrappedWtext(self, /): ...
    def getWtext(self, /): ...
    def getWtextAsAscii(self, /): ...
    def get_align(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bin(self, /): ...
    def get_bottom(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_card_actual(self, /): ...
    def get_card_as_set(self, /): ...
    def get_card_border_size(self, /): ...
    def get_card_border_uv_portion(self, /): ...
    def get_card_color(self, /): ...
    def get_card_decal(self, /): ...
    def get_card_texture(self, /): ...
    def get_card_transformed(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_coordinate_system(self, /): ...
    def get_default_encoding(): ...
    def get_default_font(): ...
    def get_direction(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_order(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_encoded_char(): ...
    def get_encoding(self, /): ...
    def get_fancy_bits(): ...
    def get_flatten_flags(self, /): ...
    def get_font(self, /): ...
    def get_frame_actual(self, /): ...
    def get_frame_as_set(self, /): ...
    def get_frame_color(self, /): ...
    def get_frame_corners(self, /): ...
    def get_frame_line_width(self, /): ...
    def get_glyph_scale(self, /): ...
    def get_glyph_shift(self, /): ...
    def get_height(self, /): ...
    def get_indent(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_geom(self, /): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_left(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_line_height(self, /): ...
    def get_lower_right_3d(self, /): ...
    def get_max_rows(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_chars(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_rows(self, /): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_preserve_trailing_whitespace(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_right(self, /): ...
    def get_shadow(self, /): ...
    def get_shadow_color(self, /): ...
    def get_slant(self, /): ...
    def get_small_caps(self, /): ...
    def get_small_caps_scale(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tab_width(self, /): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_text(): ...
    def get_text_as_ascii(self, /): ...
    def get_text_color(self, /): ...
    def get_text_scale(self, /): ...
    def get_top(self, /): ...
    def get_transform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_underscore(self, /): ...
    def get_underscore_height(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_unicode_char(self, object, /): ...
    def get_upper_left_3d(self, /): ...
    def get_usage_hint(self, /): ...
    def get_width(self, /): ...
    def get_wordwrap(self, /): ...
    def get_wordwrapped_text(self, /): ...
    def get_wordwrapped_wtext(self, /): ...
    def get_wtext(self, /): ...
    def get_wtext_as_ascii(self, /): ...
    glyph_scale = None
    glyph_shift = None
    def hasAlign(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasBin(self, /): ...
    def hasCard(self, /): ...
    def hasCardBorder(self, /): ...
    def hasCardTexture(self, /): ...
    def hasCharacter(self, object, /): ...
    def hasDirection(self, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasDrawOrder(self, /): ...
    def hasEffect(self, object, /): ...
    def hasExactCharacter(self, object, /): ...
    def hasFont(self, /): ...
    def hasFrame(self, /): ...
    def hasGlyphScale(self, /): ...
    def hasGlyphShift(self, /): ...
    def hasIndent(self, /): ...
    def hasMaxRows(self, /): ...
    def hasName(self, /): ...
    def hasOverflow(self, /): ...
    def hasPreserveTrailingWhitespace(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasShadow(self, /): ...
    def hasShadowColor(self, /): ...
    def hasSlant(self, /): ...
    def hasSmallCaps(self, /): ...
    def hasSmallCapsScale(self, /): ...
    def hasTabWidth(self, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasText(self, /): ...
    def hasTextColor(self, /): ...
    def hasTextScale(self, /): ...
    def hasUnderscore(self, /): ...
    def hasUnderscoreHeight(self, /): ...
    def hasWordwrap(self, /): ...
    def has_align(self, /): ...
    def has_attrib(self, object, /): ...
    def has_bin(self, /): ...
    def has_card(self, /): ...
    def has_card_border(self, /): ...
    def has_card_texture(self, /): ...
    def has_character(self, object, /): ...
    def has_direction(self, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_draw_order(self, /): ...
    def has_effect(self, object, /): ...
    def has_exact_character(self, object, /): ...
    def has_font(self, /): ...
    def has_frame(self, /): ...
    def has_glyph_scale(self, /): ...
    def has_glyph_shift(self, /): ...
    def has_indent(self, /): ...
    def has_max_rows(self, /): ...
    def has_name(self, /): ...
    def has_overflow(self, /): ...
    def has_preserve_trailing_whitespace(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_shadow(self, /): ...
    def has_shadow_color(self, /): ...
    def has_slant(self, /): ...
    def has_small_caps(self, /): ...
    def has_small_caps_scale(self, /): ...
    def has_tab_width(self, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_text(self, /): ...
    def has_text_color(self, /): ...
    def has_text_scale(self, /): ...
    def has_underscore(self, /): ...
    def has_underscore_height(self, /): ...
    def has_wordwrap(self, /): ...
    indent = None
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isAnySpecified(self, /): ...
    def isBoundsStale(self, /): ...
    def isCardAsMargin(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isFrameAsMargin(self, /): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isWhitespace(self, object, /): ...
    def isWtext(self, /): ...
    def is_ambient_light(self, /): ...
    def is_any_specified(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_card_as_margin(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_frame_as_margin(self, /): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_whitespace(self, object, /): ...
    def is_wtext(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def lower(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def makeLower(self, /): ...
    def makeUpper(self, /): ...
    def make_copy(self, /): ...
    def make_lower(self, /): ...
    def make_upper(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    max_rows = None
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    preserve_trailing_whitespace = None
    prev_transform = None
    python_tags = None
    def reencodeText(): ...
    def reencode_text(): ...
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAlign(self, object, /): ...
    def setAttrib(): ...
    def setBin(self, object, /): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setCardActual(): ...
    def setCardAsMargin(): ...
    def setCardBorder(): ...
    def setCardColor(): ...
    def setCardDecal(self, object, /): ...
    def setCardTexture(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setDefaultEncoding(object, /): ...
    def setDefaultFont(object, /): ...
    def setDirection(self, object, /): ...
    def setDrawOrder(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setEncoding(self, object, /): ...
    def setFinal(self, object, /): ...
    def setFlattenFlags(self, object, /): ...
    def setFont(self, object, /): ...
    def setFrameActual(): ...
    def setFrameAsMargin(): ...
    def setFrameColor(): ...
    def setFrameCorners(self, object, /): ...
    def setFrameLineWidth(self, object, /): ...
    def setGlyphScale(self, object, /): ...
    def setGlyphShift(self, object, /): ...
    def setIndent(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMaxRows(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPreserveTrailingWhitespace(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setShadow(): ...
    def setShadowColor(): ...
    def setSlant(self, object, /): ...
    def setSmallCaps(self, object, /): ...
    def setSmallCapsScale(self, object, /): ...
    def setState(): ...
    def setTabWidth(self, object, /): ...
    def setTag(): ...
    def setText(): ...
    def setTextColor(): ...
    def setTextScale(self, object, /): ...
    def setTransform(self, object, /): ...
    def setUnderscore(self, object, /): ...
    def setUnderscoreHeight(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def setUnicodeChar(): ...
    def setUsageHint(self, object, /): ...
    def setWordwrap(self, object, /): ...
    def setWtext(self, object, /): ...
    def set_align(self, object, /): ...
    def set_attrib(): ...
    def set_bin(self, object, /): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_card_actual(): ...
    def set_card_as_margin(): ...
    def set_card_border(): ...
    def set_card_color(): ...
    def set_card_decal(self, object, /): ...
    def set_card_texture(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_default_encoding(object, /): ...
    def set_default_font(object, /): ...
    def set_direction(self, object, /): ...
    def set_draw_order(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_encoding(self, object, /): ...
    def set_final(self, object, /): ...
    def set_flatten_flags(self, object, /): ...
    def set_font(self, object, /): ...
    def set_frame_actual(): ...
    def set_frame_as_margin(): ...
    def set_frame_color(): ...
    def set_frame_corners(self, object, /): ...
    def set_frame_line_width(self, object, /): ...
    def set_glyph_scale(self, object, /): ...
    def set_glyph_shift(self, object, /): ...
    def set_indent(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_max_rows(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_preserve_trailing_whitespace(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_shadow(): ...
    def set_shadow_color(): ...
    def set_slant(self, object, /): ...
    def set_small_caps(self, object, /): ...
    def set_small_caps_scale(self, object, /): ...
    def set_state(): ...
    def set_tab_width(self, object, /): ...
    def set_tag(): ...
    def set_text(): ...
    def set_text_color(): ...
    def set_text_scale(self, object, /): ...
    def set_transform(self, object, /): ...
    def set_underscore(self, object, /): ...
    def set_underscore_height(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def set_unicode_char(): ...
    def set_usage_hint(self, object, /): ...
    def set_wordwrap(self, object, /): ...
    def set_wtext(self, object, /): ...
    shadow = None
    shadow_color = None
    slant = None
    small_caps = None
    small_caps_scale = None
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tab_width = None
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    text = None
    text_color = None
    text_scale = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    underscore = None
    underscore_height = None
    def unicodeIsalpha(object, /): ...
    def unicodeIsdigit(object, /): ...
    def unicodeIslower(object, /): ...
    def unicodeIspunct(object, /): ...
    def unicodeIsspace(object, /): ...
    def unicodeIsupper(object, /): ...
    def unicodeTolower(object, /): ...
    def unicodeToupper(object, /): ...
    def unicode_isalpha(object, /): ...
    def unicode_isdigit(object, /): ...
    def unicode_islower(object, /): ...
    def unicode_ispunct(object, /): ...
    def unicode_isspace(object, /): ...
    def unicode_isupper(object, /): ...
    def unicode_tolower(object, /): ...
    def unicode_toupper(object, /): ...
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToPandaNode(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTextEncoder(self, /): ...
    def upcastToTextProperties(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_PandaNode(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TextEncoder(self, /): ...
    def upcast_to_TextProperties(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def update(self, /): ...
    def upper(): ...
    usage_hint = None
    wordwrap = None
    def write(): ...
class TextProperties:
    ...
    ABoxedCenter:int = None
    ABoxedLeft:int = None
    ABoxedRight:int = None
    ACenter:int = None
    ALeft:int = None
    ARight:int = None
    A_boxed_center:int = None
    A_boxed_left:int = None
    A_boxed_right:int = None
    A_center:int = None
    A_left:int = None
    A_right:int = None
    DLtr:int = None
    DRtl:int = None
    D_ltr:int = None
    D_rtl:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addProperties(self, object, /): ...
    def add_properties(self, object, /): ...
    align = None
    def assign(self, object, /): ...
    bin = None
    def clear(self, /): ...
    def clearAlign(self, /): ...
    def clearBin(self, /): ...
    def clearDirection(self, /): ...
    def clearDrawOrder(self, /): ...
    def clearFont(self, /): ...
    def clearGlyphScale(self, /): ...
    def clearGlyphShift(self, /): ...
    def clearIndent(self, /): ...
    def clearPreserveTrailingWhitespace(self, /): ...
    def clearShadow(self, /): ...
    def clearShadowColor(self, /): ...
    def clearSlant(self, /): ...
    def clearSmallCaps(self, /): ...
    def clearSmallCapsScale(self, /): ...
    def clearTabWidth(self, /): ...
    def clearTextColor(self, /): ...
    def clearTextScale(self, /): ...
    def clearUnderscore(self, /): ...
    def clearUnderscoreHeight(self, /): ...
    def clearWordwrap(self, /): ...
    def clear_align(self, /): ...
    def clear_bin(self, /): ...
    def clear_direction(self, /): ...
    def clear_draw_order(self, /): ...
    def clear_font(self, /): ...
    def clear_glyph_scale(self, /): ...
    def clear_glyph_shift(self, /): ...
    def clear_indent(self, /): ...
    def clear_preserve_trailing_whitespace(self, /): ...
    def clear_shadow(self, /): ...
    def clear_shadow_color(self, /): ...
    def clear_slant(self, /): ...
    def clear_small_caps(self, /): ...
    def clear_small_caps_scale(self, /): ...
    def clear_tab_width(self, /): ...
    def clear_text_color(self, /): ...
    def clear_text_scale(self, /): ...
    def clear_underscore(self, /): ...
    def clear_underscore_height(self, /): ...
    def clear_wordwrap(self, /): ...
    direction = None
    draw_order = None
    font = None
    def getAlign(self, /): ...
    def getBin(self, /): ...
    def getClassType(): ...
    def getDefaultFont(): ...
    def getDirection(self, /): ...
    def getDrawOrder(self, /): ...
    def getFont(self, /): ...
    def getGlyphScale(self, /): ...
    def getGlyphShift(self, /): ...
    def getIndent(self, /): ...
    def getPreserveTrailingWhitespace(self, /): ...
    def getShadow(self, /): ...
    def getShadowColor(self, /): ...
    def getSlant(self, /): ...
    def getSmallCaps(self, /): ...
    def getSmallCapsScale(self, /): ...
    def getTabWidth(self, /): ...
    def getTextColor(self, /): ...
    def getTextScale(self, /): ...
    def getUnderscore(self, /): ...
    def getUnderscoreHeight(self, /): ...
    def getWordwrap(self, /): ...
    def get_align(self, /): ...
    def get_bin(self, /): ...
    def get_class_type(): ...
    def get_default_font(): ...
    def get_direction(self, /): ...
    def get_draw_order(self, /): ...
    def get_font(self, /): ...
    def get_glyph_scale(self, /): ...
    def get_glyph_shift(self, /): ...
    def get_indent(self, /): ...
    def get_preserve_trailing_whitespace(self, /): ...
    def get_shadow(self, /): ...
    def get_shadow_color(self, /): ...
    def get_slant(self, /): ...
    def get_small_caps(self, /): ...
    def get_small_caps_scale(self, /): ...
    def get_tab_width(self, /): ...
    def get_text_color(self, /): ...
    def get_text_scale(self, /): ...
    def get_underscore(self, /): ...
    def get_underscore_height(self, /): ...
    def get_wordwrap(self, /): ...
    glyph_scale = None
    glyph_shift = None
    def hasAlign(self, /): ...
    def hasBin(self, /): ...
    def hasDirection(self, /): ...
    def hasDrawOrder(self, /): ...
    def hasFont(self, /): ...
    def hasGlyphScale(self, /): ...
    def hasGlyphShift(self, /): ...
    def hasIndent(self, /): ...
    def hasPreserveTrailingWhitespace(self, /): ...
    def hasShadow(self, /): ...
    def hasShadowColor(self, /): ...
    def hasSlant(self, /): ...
    def hasSmallCaps(self, /): ...
    def hasSmallCapsScale(self, /): ...
    def hasTabWidth(self, /): ...
    def hasTextColor(self, /): ...
    def hasTextScale(self, /): ...
    def hasUnderscore(self, /): ...
    def hasUnderscoreHeight(self, /): ...
    def hasWordwrap(self, /): ...
    def has_align(self, /): ...
    def has_bin(self, /): ...
    def has_direction(self, /): ...
    def has_draw_order(self, /): ...
    def has_font(self, /): ...
    def has_glyph_scale(self, /): ...
    def has_glyph_shift(self, /): ...
    def has_indent(self, /): ...
    def has_preserve_trailing_whitespace(self, /): ...
    def has_shadow(self, /): ...
    def has_shadow_color(self, /): ...
    def has_slant(self, /): ...
    def has_small_caps(self, /): ...
    def has_small_caps_scale(self, /): ...
    def has_tab_width(self, /): ...
    def has_text_color(self, /): ...
    def has_text_scale(self, /): ...
    def has_underscore(self, /): ...
    def has_underscore_height(self, /): ...
    def has_wordwrap(self, /): ...
    indent = None
    def isAnySpecified(self, /): ...
    def is_any_specified(self, /): ...
    preserve_trailing_whitespace = None
    def setAlign(self, object, /): ...
    def setBin(self, object, /): ...
    def setDefaultFont(object, /): ...
    def setDirection(self, object, /): ...
    def setDrawOrder(self, object, /): ...
    def setFont(self, object, /): ...
    def setGlyphScale(self, object, /): ...
    def setGlyphShift(self, object, /): ...
    def setIndent(self, object, /): ...
    def setPreserveTrailingWhitespace(self, object, /): ...
    def setShadow(): ...
    def setShadowColor(): ...
    def setSlant(self, object, /): ...
    def setSmallCaps(self, object, /): ...
    def setSmallCapsScale(self, object, /): ...
    def setTabWidth(self, object, /): ...
    def setTextColor(): ...
    def setTextScale(self, object, /): ...
    def setUnderscore(self, object, /): ...
    def setUnderscoreHeight(self, object, /): ...
    def setWordwrap(self, object, /): ...
    def set_align(self, object, /): ...
    def set_bin(self, object, /): ...
    def set_default_font(object, /): ...
    def set_direction(self, object, /): ...
    def set_draw_order(self, object, /): ...
    def set_font(self, object, /): ...
    def set_glyph_scale(self, object, /): ...
    def set_glyph_shift(self, object, /): ...
    def set_indent(self, object, /): ...
    def set_preserve_trailing_whitespace(self, object, /): ...
    def set_shadow(): ...
    def set_shadow_color(): ...
    def set_slant(self, object, /): ...
    def set_small_caps(self, object, /): ...
    def set_small_caps_scale(self, object, /): ...
    def set_tab_width(self, object, /): ...
    def set_text_color(): ...
    def set_text_scale(self, object, /): ...
    def set_underscore(self, object, /): ...
    def set_underscore_height(self, object, /): ...
    def set_wordwrap(self, object, /): ...
    shadow = None
    shadow_color = None
    slant = None
    small_caps = None
    small_caps_scale = None
    tab_width = None
    text_color = None
    text_scale = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    underscore = None
    underscore_height = None
    wordwrap = None
    def write(): ...
class TextPropertiesManager:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearGraphic(self, object, /): ...
    def clearProperties(self, object, /): ...
    def clear_graphic(self, object, /): ...
    def clear_properties(self, object, /): ...
    def getGlobalPtr(): ...
    def getGraphic(self, object, /): ...
    def getProperties(self, object, /): ...
    def get_global_ptr(): ...
    def get_graphic(self, object, /): ...
    def get_properties(self, object, /): ...
    def hasGraphic(self, object, /): ...
    def hasProperties(self, object, /): ...
    def has_graphic(self, object, /): ...
    def has_properties(self, object, /): ...
    def setGraphic(): ...
    def setProperties(): ...
    def set_graphic(): ...
    def set_properties(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class Texture:
    ...
    CMDefault:int = None
    CMDxt1:int = None
    CMDxt2:int = None
    CMDxt3:int = None
    CMDxt4:int = None
    CMDxt5:int = None
    CMEac:int = None
    CMEtc1:int = None
    CMEtc2:int = None
    CMFxt1:int = None
    CMOff:int = None
    CMOn:int = None
    CMPvr12bpp:int = None
    CMPvr14bpp:int = None
    CMRgtc:int = None
    CM_default:int = None
    CM_dxt1:int = None
    CM_dxt2:int = None
    CM_dxt3:int = None
    CM_dxt4:int = None
    CM_dxt5:int = None
    CM_eac:int = None
    CM_etc1:int = None
    CM_etc2:int = None
    CM_fxt1:int = None
    CM_off:int = None
    CM_on:int = None
    CM_pvr1_2bpp:int = None
    CM_pvr1_4bpp:int = None
    CM_rgtc:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FAlpha:int = None
    FBlue:int = None
    FColorIndex:int = None
    FDepthComponent:int = None
    FDepthComponent16:int = None
    FDepthComponent24:int = None
    FDepthComponent32:int = None
    FDepthStencil:int = None
    FGreen:int = None
    FLuminance:int = None
    FLuminanceAlpha:int = None
    FLuminanceAlphamask:int = None
    FR11G11B10:int = None
    FR16:int = None
    FR16i:int = None
    FR32:int = None
    FR32i:int = None
    FR8i:int = None
    FRed:int = None
    FRg:int = None
    FRg16:int = None
    FRg16i:int = None
    FRg32:int = None
    FRg32i:int = None
    FRg8i:int = None
    FRgb:int = None
    FRgb10A2:int = None
    FRgb12:int = None
    FRgb16:int = None
    FRgb16i:int = None
    FRgb32:int = None
    FRgb32i:int = None
    FRgb332:int = None
    FRgb5:int = None
    FRgb8:int = None
    FRgb8i:int = None
    FRgb9E5:int = None
    FRgba:int = None
    FRgba12:int = None
    FRgba16:int = None
    FRgba16i:int = None
    FRgba32:int = None
    FRgba32i:int = None
    FRgba4:int = None
    FRgba5:int = None
    FRgba8:int = None
    FRgba8i:int = None
    FRgbm:int = None
    FSluminance:int = None
    FSluminanceAlpha:int = None
    FSrgb:int = None
    FSrgbAlpha:int = None
    FTDefault:int = None
    FTInvalid:int = None
    FTLinear:int = None
    FTLinearMipmapLinear:int = None
    FTLinearMipmapNearest:int = None
    FTNearest:int = None
    FTNearestMipmapLinear:int = None
    FTNearestMipmapNearest:int = None
    FTShadow:int = None
    FT_default:int = None
    FT_invalid:int = None
    FT_linear:int = None
    FT_linear_mipmap_linear:int = None
    FT_linear_mipmap_nearest:int = None
    FT_nearest:int = None
    FT_nearest_mipmap_linear:int = None
    FT_nearest_mipmap_nearest:int = None
    FT_shadow:int = None
    F_alpha:int = None
    F_blue:int = None
    F_color_index:int = None
    F_depth_component:int = None
    F_depth_component16:int = None
    F_depth_component24:int = None
    F_depth_component32:int = None
    F_depth_stencil:int = None
    F_green:int = None
    F_luminance:int = None
    F_luminance_alpha:int = None
    F_luminance_alphamask:int = None
    F_r11_g11_b10:int = None
    F_r16:int = None
    F_r16i:int = None
    F_r32:int = None
    F_r32i:int = None
    F_r8i:int = None
    F_red:int = None
    F_rg:int = None
    F_rg16:int = None
    F_rg16i:int = None
    F_rg32:int = None
    F_rg32i:int = None
    F_rg8i:int = None
    F_rgb:int = None
    F_rgb10_a2:int = None
    F_rgb12:int = None
    F_rgb16:int = None
    F_rgb16i:int = None
    F_rgb32:int = None
    F_rgb32i:int = None
    F_rgb332:int = None
    F_rgb5:int = None
    F_rgb8:int = None
    F_rgb8i:int = None
    F_rgb9_e5:int = None
    F_rgba:int = None
    F_rgba12:int = None
    F_rgba16:int = None
    F_rgba16i:int = None
    F_rgba32:int = None
    F_rgba32i:int = None
    F_rgba4:int = None
    F_rgba5:int = None
    F_rgba8:int = None
    F_rgba8i:int = None
    F_rgbm:int = None
    F_sluminance:int = None
    F_sluminance_alpha:int = None
    F_srgb:int = None
    F_srgb_alpha:int = None
    QLBest:int = None
    QLDefault:int = None
    QLFastest:int = None
    QLNormal:int = None
    QL_best:int = None
    QL_default:int = None
    QL_fastest:int = None
    QL_normal:int = None
    TByte:int = None
    TFloat:int = None
    THalfFloat:int = None
    TInt:int = None
    TShort:int = None
    TT1dTexture:int = None
    TT1dTextureArray:int = None
    TT2dTexture:int = None
    TT2dTextureArray:int = None
    TT3dTexture:int = None
    TTBufferTexture:int = None
    TTCubeMap:int = None
    TTCubeMapArray:int = None
    TT_1d_texture:int = None
    TT_1d_texture_array:int = None
    TT_2d_texture:int = None
    TT_2d_texture_array:int = None
    TT_3d_texture:int = None
    TT_buffer_texture:int = None
    TT_cube_map:int = None
    TT_cube_map_array:int = None
    TUnsignedByte:int = None
    TUnsignedInt:int = None
    TUnsignedInt248:int = None
    TUnsignedShort:int = None
    T_byte:int = None
    T_float:int = None
    T_half_float:int = None
    T_int:int = None
    T_short:int = None
    T_unsigned_byte:int = None
    T_unsigned_int:int = None
    T_unsigned_int_24_8:int = None
    T_unsigned_short:int = None
    WMBorderColor:int = None
    WMClamp:int = None
    WMInvalid:int = None
    WMMirror:int = None
    WMMirrorOnce:int = None
    WMRepeat:int = None
    WM_border_color:int = None
    WM_clamp:int = None
    WM_invalid:int = None
    WM_mirror:int = None
    WM_mirror_once:int = None
    WM_repeat:int = None
    alpha_filename = None
    alpha_fullpath = None
    anisotropic_degree = None
    auto_texture_scale = None
    aux_data = None
    border_color = None
    cacheable = None
    def clear(self, /): ...
    def clearAlphaFilename(self, /): ...
    def clearAlphaFullpath(self, /): ...
    def clearAuxData(self, object, /): ...
    def clearClearColor(self, /): ...
    def clearFilename(self, /): ...
    def clearFullpath(self, /): ...
    def clearImage(self, /): ...
    def clearName(self, /): ...
    def clearRamImage(self, /): ...
    def clearRamMipmapImage(self, object, /): ...
    def clearRamMipmapImages(self, /): ...
    def clearSimpleRamImage(self, /): ...
    def clear_alpha_filename(self, /): ...
    def clear_alpha_fullpath(self, /): ...
    def clear_aux_data(self, object, /): ...
    def clear_clear_color(self, /): ...
    clear_color = None
    def clear_filename(self, /): ...
    def clear_fullpath(self, /): ...
    def clear_image(self, /): ...
    def clear_name(self, /): ...
    def clear_ram_image(self, /): ...
    def clear_ram_mipmap_image(self, object, /): ...
    def clear_ram_mipmap_images(self, /): ...
    def clear_simple_ram_image(self, /): ...
    component_type = None
    component_width = None
    def compressRamImage(): ...
    def compress_ram_image(): ...
    compression = None
    def considerRescale(): ...
    def consider_rescale(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default_sampler = None
    def downToPower2(object, /): ...
    def down_to_power_2(object, /): ...
    effective_anisotropic_degree = None
    effective_magfilter = None
    effective_minfilter = None
    effective_quality_level = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def estimateTextureMemory(self, /): ...
    def estimate_texture_memory(self, /): ...
    expected_num_mipmap_levels = None
    expected_ram_image_size = None
    expected_ram_page_size = None
    filename = None
    def fillin(): ...
    format = None
    def formatComponentType(object, /): ...
    def formatCompressionMode(object, /): ...
    def formatFormat(object, /): ...
    def formatQualityLevel(object, /): ...
    def formatTextureType(object, /): ...
    def format_component_type(object, /): ...
    def format_compression_mode(object, /): ...
    def format_format(object, /): ...
    def format_quality_level(object, /): ...
    def format_texture_type(object, /): ...
    fullpath = None
    def generateAlphaScaleMap(self, /): ...
    def generateNormalizationCubeMap(self, object, /): ...
    def generateRamMipmapImages(self, /): ...
    def generateSimpleRamImage(self, /): ...
    def generate_alpha_scale_map(self, /): ...
    def generate_normalization_cube_map(self, object, /): ...
    def generate_ram_mipmap_images(self, /): ...
    def generate_simple_ram_image(self, /): ...
    def getActive(self, object, /): ...
    def getAlphaFilename(self, /): ...
    def getAlphaFullpath(self, /): ...
    def getAnisotropicDegree(self, /): ...
    def getAutoTextureScale(self, /): ...
    def getAuxData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBorderColor(self, /): ...
    def getClassType(): ...
    def getClearColor(self, /): ...
    def getClearData(self, /): ...
    def getComponentType(self, /): ...
    def getComponentWidth(self, /): ...
    def getCompression(self, /): ...
    def getDataSizeBytes(self, object, /): ...
    def getDefaultSampler(self, /): ...
    def getEffectiveAnisotropicDegree(self, /): ...
    def getEffectiveMagfilter(self, /): ...
    def getEffectiveMinfilter(self, /): ...
    def getEffectiveQualityLevel(self, /): ...
    def getExpectedMipmapNumPages(self, object, /): ...
    def getExpectedMipmapXSize(self, object, /): ...
    def getExpectedMipmapYSize(self, object, /): ...
    def getExpectedMipmapZSize(self, object, /): ...
    def getExpectedNumMipmapLevels(self, /): ...
    def getExpectedRamImageSize(self, /): ...
    def getExpectedRamMipmapImageSize(self, object, /): ...
    def getExpectedRamMipmapPageSize(self, object, /): ...
    def getExpectedRamMipmapViewSize(self, object, /): ...
    def getExpectedRamPageSize(self, /): ...
    def getFilename(self, /): ...
    def getFormat(self, /): ...
    def getFullpath(self, /): ...
    def getImageModified(self, /): ...
    def getKeepRamImage(self, /): ...
    def getLoadedFromImage(self, /): ...
    def getLoadedFromTxo(self, /): ...
    def getMagfilter(self, /): ...
    def getMatchFramebufferFormat(self, /): ...
    def getMinfilter(self, /): ...
    def getName(self, /): ...
    def getNumComponents(self, /): ...
    def getNumLoadableRamMipmapImages(self, /): ...
    def getNumPages(self, /): ...
    def getNumRamMipmapImages(self, /): ...
    def getNumViews(self, /): ...
    def getOrigFileXSize(self, /): ...
    def getOrigFileYSize(self, /): ...
    def getOrigFileZSize(self, /): ...
    def getPadXSize(self, /): ...
    def getPadYSize(self, /): ...
    def getPadZSize(self, /): ...
    def getPostLoadStoreCache(self, /): ...
    def getPropertiesModified(self, /): ...
    def getQualityLevel(self, /): ...
    def getRamImage(self, /): ...
    def getRamImageAs(self, object, /): ...
    def getRamImageCompression(self, /): ...
    def getRamImageSize(self, /): ...
    def getRamMipmapImage(self, object, /): ...
    def getRamMipmapImageSize(self, object, /): ...
    def getRamMipmapPageSize(self, object, /): ...
    def getRamMipmapViewSize(self, object, /): ...
    def getRamPageSize(self, /): ...
    def getRamViewSize(self, /): ...
    def getRefCount(self, /): ...
    def getRenderToTexture(self, /): ...
    def getResident(self, object, /): ...
    def getSimpleImageModified(self, /): ...
    def getSimpleRamImage(self, /): ...
    def getSimpleRamImageSize(self, /): ...
    def getSimpleXSize(self, /): ...
    def getSimpleYSize(self, /): ...
    def getTexScale(self, /): ...
    def getTextureType(self, /): ...
    def getTexturesPower2(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUncompressedRamImage(self, /): ...
    def getUsageHint(self, /): ...
    def getWrapU(self, /): ...
    def getWrapV(self, /): ...
    def getWrapW(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def getZSize(self, /): ...
    def get_active(self, object, /): ...
    def get_alpha_filename(self, /): ...
    def get_alpha_fullpath(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_auto_texture_scale(self, /): ...
    def get_aux_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_border_color(self, /): ...
    def get_class_type(): ...
    def get_clear_color(self, /): ...
    def get_clear_data(self, /): ...
    def get_component_type(self, /): ...
    def get_component_width(self, /): ...
    def get_compression(self, /): ...
    def get_data_size_bytes(self, object, /): ...
    def get_default_sampler(self, /): ...
    def get_effective_anisotropic_degree(self, /): ...
    def get_effective_magfilter(self, /): ...
    def get_effective_minfilter(self, /): ...
    def get_effective_quality_level(self, /): ...
    def get_expected_mipmap_num_pages(self, object, /): ...
    def get_expected_mipmap_x_size(self, object, /): ...
    def get_expected_mipmap_y_size(self, object, /): ...
    def get_expected_mipmap_z_size(self, object, /): ...
    def get_expected_num_mipmap_levels(self, /): ...
    def get_expected_ram_image_size(self, /): ...
    def get_expected_ram_mipmap_image_size(self, object, /): ...
    def get_expected_ram_mipmap_page_size(self, object, /): ...
    def get_expected_ram_mipmap_view_size(self, object, /): ...
    def get_expected_ram_page_size(self, /): ...
    def get_filename(self, /): ...
    def get_format(self, /): ...
    def get_fullpath(self, /): ...
    def get_image_modified(self, /): ...
    def get_keep_ram_image(self, /): ...
    def get_loaded_from_image(self, /): ...
    def get_loaded_from_txo(self, /): ...
    def get_magfilter(self, /): ...
    def get_match_framebuffer_format(self, /): ...
    def get_minfilter(self, /): ...
    def get_name(self, /): ...
    def get_num_components(self, /): ...
    def get_num_loadable_ram_mipmap_images(self, /): ...
    def get_num_pages(self, /): ...
    def get_num_ram_mipmap_images(self, /): ...
    def get_num_views(self, /): ...
    def get_orig_file_x_size(self, /): ...
    def get_orig_file_y_size(self, /): ...
    def get_orig_file_z_size(self, /): ...
    def get_pad_x_size(self, /): ...
    def get_pad_y_size(self, /): ...
    def get_pad_z_size(self, /): ...
    def get_post_load_store_cache(self, /): ...
    def get_properties_modified(self, /): ...
    def get_quality_level(self, /): ...
    def get_ram_image(self, /): ...
    def get_ram_image_as(self, object, /): ...
    def get_ram_image_compression(self, /): ...
    def get_ram_image_size(self, /): ...
    def get_ram_mipmap_image(self, object, /): ...
    def get_ram_mipmap_image_size(self, object, /): ...
    def get_ram_mipmap_page_size(self, object, /): ...
    def get_ram_mipmap_view_size(self, object, /): ...
    def get_ram_page_size(self, /): ...
    def get_ram_view_size(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_to_texture(self, /): ...
    def get_resident(self, object, /): ...
    def get_simple_image_modified(self, /): ...
    def get_simple_ram_image(self, /): ...
    def get_simple_ram_image_size(self, /): ...
    def get_simple_x_size(self, /): ...
    def get_simple_y_size(self, /): ...
    def get_tex_scale(self, /): ...
    def get_texture_type(self, /): ...
    def get_textures_power_2(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uncompressed_ram_image(self, /): ...
    def get_usage_hint(self, /): ...
    def get_wrap_u(self, /): ...
    def get_wrap_v(self, /): ...
    def get_wrap_w(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def get_z_size(self, /): ...
    def hasAllRamMipmapImages(self, /): ...
    def hasAlphaFilename(self, /): ...
    def hasAlphaFullpath(self, /): ...
    def hasAutoTextureScale(self, /): ...
    def hasClearColor(self, /): ...
    def hasCompression(self, /): ...
    def hasFilename(self, /): ...
    def hasFullpath(self, /): ...
    def hasName(self, /): ...
    def hasRamImage(self, /): ...
    def hasRamMipmapImage(self, object, /): ...
    def hasSimpleRamImage(self, /): ...
    def hasTexturesPower2(): ...
    def hasUncompressedRamImage(self, /): ...
    def has_all_ram_mipmap_images(self, /): ...
    def has_alpha_filename(self, /): ...
    def has_alpha_fullpath(self, /): ...
    def has_auto_texture_scale(self, /): ...
    def has_clear_color(self, /): ...
    def has_compression(self, /): ...
    def has_filename(self, /): ...
    def has_fullpath(self, /): ...
    def has_name(self, /): ...
    def has_ram_image(self, /): ...
    def has_ram_mipmap_image(self, object, /): ...
    def has_simple_ram_image(self, /): ...
    def has_textures_power_2(): ...
    def has_uncompressed_ram_image(self, /): ...
    image_modified = None
    def isCacheable(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPrepared(self, object, /): ...
    def is_cacheable(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_prepared(self, object, /): ...
    keep_ram_image = None
    def load(): ...
    def loadRelated(self, object, /): ...
    def loadSubImage(): ...
    def load_related(self, object, /): ...
    def load_sub_image(): ...
    loaded_from_image = None
    loaded_from_txo = None
    magfilter = None
    def makeCopy(self, /): ...
    def makeFromTxo(): ...
    def makeRamImage(self, /): ...
    def makeRamMipmapImage(self, object, /): ...
    def make_copy(self, /): ...
    def make_from_txo(): ...
    def make_ram_image(self, /): ...
    def make_ram_mipmap_image(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    match_framebuffer_format = None
    def mightHaveRamImage(self, /): ...
    def might_have_ram_image(self, /): ...
    minfilter = None
    def modifyRamImage(self, /): ...
    def modifyRamMipmapImage(self, object, /): ...
    def modifySimpleRamImage(self, /): ...
    def modify_ram_image(self, /): ...
    def modify_ram_mipmap_image(self, object, /): ...
    def modify_simple_ram_image(self, /): ...
    name = None
    def newSimpleRamImage(): ...
    def new_simple_ram_image(): ...
    num_components = None
    num_loadable_ram_mipmap_images = None
    num_pages = None
    num_ram_mipmap_images = None
    num_views = None
    orig_file_x_size = None
    orig_file_y_size = None
    orig_file_z_size = None
    def output(self, object, /): ...
    def peek(self, /): ...
    post_load_store_cache = None
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    properties_modified = None
    quality_level = None
    ram_image_compression = None
    ram_image_size = None
    ram_page_size = None
    ram_view_size = None
    def read(): ...
    def readDds(): ...
    def readKtx(): ...
    def readTxo(): ...
    def read_dds(): ...
    def read_ktx(): ...
    def read_txo(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def reload(self, /): ...
    render_to_texture = None
    def rescaleTexture(self, /): ...
    def rescale_texture(self, /): ...
    def setAlphaFilename(self, object, /): ...
    def setAlphaFullpath(self, object, /): ...
    def setAnisotropicDegree(self, object, /): ...
    def setAutoTextureScale(self, object, /): ...
    def setAuxData(): ...
    def setBorderColor(self, object, /): ...
    def setClearColor(self, object, /): ...
    def setComponentType(self, object, /): ...
    def setCompression(self, object, /): ...
    def setDefaultSampler(self, object, /): ...
    def setFilename(self, object, /): ...
    def setFormat(self, object, /): ...
    def setFullpath(self, object, /): ...
    def setKeepRamImage(self, object, /): ...
    def setLoadedFromImage(): ...
    def setLoadedFromTxo(): ...
    def setMagfilter(self, object, /): ...
    def setMatchFramebufferFormat(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setName(self, object, /): ...
    def setNumViews(self, object, /): ...
    def setOrigFileSize(): ...
    def setPadSize(): ...
    def setPostLoadStoreCache(self, object, /): ...
    def setQualityLevel(self, object, /): ...
    def setRamImage(): ...
    def setRamImageAs(): ...
    def setRamMipmapImage(): ...
    def setRamMipmapPointerFromInt(): ...
    def setRenderToTexture(self, object, /): ...
    def setSimpleRamImage(): ...
    def setSizePadded(): ...
    def setTexturesPower2(object, /): ...
    def setWrapU(self, object, /): ...
    def setWrapV(self, object, /): ...
    def setWrapW(self, object, /): ...
    def setXSize(self, object, /): ...
    def setYSize(self, object, /): ...
    def setZSize(self, object, /): ...
    def set_alpha_filename(self, object, /): ...
    def set_alpha_fullpath(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_auto_texture_scale(self, object, /): ...
    def set_aux_data(): ...
    def set_border_color(self, object, /): ...
    def set_clear_color(self, object, /): ...
    def set_component_type(self, object, /): ...
    def set_compression(self, object, /): ...
    def set_default_sampler(self, object, /): ...
    def set_filename(self, object, /): ...
    def set_format(self, object, /): ...
    def set_fullpath(self, object, /): ...
    def set_keep_ram_image(self, object, /): ...
    def set_loaded_from_image(): ...
    def set_loaded_from_txo(): ...
    def set_magfilter(self, object, /): ...
    def set_match_framebuffer_format(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_views(self, object, /): ...
    def set_orig_file_size(): ...
    def set_pad_size(): ...
    def set_post_load_store_cache(self, object, /): ...
    def set_quality_level(self, object, /): ...
    def set_ram_image(): ...
    def set_ram_image_as(): ...
    def set_ram_mipmap_image(): ...
    def set_ram_mipmap_pointer_from_int(): ...
    def set_render_to_texture(self, object, /): ...
    def set_simple_ram_image(): ...
    def set_size_padded(): ...
    def set_textures_power_2(object, /): ...
    def set_wrap_u(self, object, /): ...
    def set_wrap_v(self, object, /): ...
    def set_wrap_w(self, object, /): ...
    def set_x_size(self, object, /): ...
    def set_y_size(self, object, /): ...
    def set_z_size(self, object, /): ...
    def setup1dTexture(): ...
    def setup2dTexture(): ...
    def setup2dTextureArray(): ...
    def setup3dTexture(): ...
    def setupBufferTexture(): ...
    def setupCubeMap(): ...
    def setupCubeMapArray(): ...
    def setupTexture(): ...
    def setup_1d_texture(): ...
    def setup_2d_texture(): ...
    def setup_2d_texture_array(): ...
    def setup_3d_texture(): ...
    def setup_buffer_texture(): ...
    def setup_cube_map(): ...
    def setup_cube_map_array(): ...
    def setup_texture(): ...
    simple_image_modified = None
    simple_ram_image = None
    simple_x_size = None
    simple_y_size = None
    def store(): ...
    def stringComponentType(object, /): ...
    def stringCompressionMode(object, /): ...
    def stringFormat(object, /): ...
    def stringQualityLevel(object, /): ...
    def stringTextureType(object, /): ...
    def string_component_type(object, /): ...
    def string_compression_mode(object, /): ...
    def string_format(object, /): ...
    def string_quality_level(object, /): ...
    def string_texture_type(object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture_type = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def uncompressRamImage(self, /): ...
    def uncompress_ram_image(self, /): ...
    def unref(self, /): ...
    def upToPower2(object, /): ...
    def up_to_power_2(object, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    usage_hint = None
    def usesMipmaps(self, /): ...
    def uses_mipmaps(self, /): ...
    def wasImageModified(self, object, /): ...
    def was_image_modified(self, object, /): ...
    wrap_u = None
    wrap_v = None
    wrap_w = None
    def write(): ...
    def writeTxo(): ...
    def write_txo(): ...
    x_size = None
    y_size = None
    z_size = None
class TextureAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlways:int = None
    MConstant:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_always:int = None
    M_constant:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    def addOffStage(): ...
    def addOnStage(): ...
    def add_off_stage(): ...
    def add_on_stage(): ...
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def findOnStage(self, object, /): ...
    def find_on_stage(self, object, /): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getFfTcIndex(self, object, /): ...
    def getHash(self, /): ...
    def getNumAttribs(): ...
    def getNumOffStages(self, /): ...
    def getNumOnFfStages(self, /): ...
    def getNumOnStages(self, /): ...
    def getOffStage(self, object, /): ...
    def getOffStages(self, /): ...
    def getOnFfStage(self, object, /): ...
    def getOnFfStages(self, /): ...
    def getOnSampler(self, object, /): ...
    def getOnStage(self, object, /): ...
    def getOnStageOverride(self, object, /): ...
    def getOnStages(self, /): ...
    def getOnTexture(self, object, /): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_ff_tc_index(self, object, /): ...
    def get_hash(self, /): ...
    def get_num_attribs(): ...
    def get_num_off_stages(self, /): ...
    def get_num_on_ff_stages(self, /): ...
    def get_num_on_stages(self, /): ...
    def get_off_stage(self, object, /): ...
    def get_off_stages(self, /): ...
    def get_on_ff_stage(self, object, /): ...
    def get_on_ff_stages(self, /): ...
    def get_on_sampler(self, object, /): ...
    def get_on_stage(self, object, /): ...
    def get_on_stage_override(self, object, /): ...
    def get_on_stages(self, /): ...
    def get_on_texture(self, object, /): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def hasAllOff(self, /): ...
    def hasOffStage(self, object, /): ...
    def hasOnStage(self, object, /): ...
    def has_all_off(self, /): ...
    def has_off_stage(self, object, /): ...
    def has_on_stage(self, object, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isOfType(self, object, /): ...
    def isOff(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_of_type(self, object, /): ...
    def is_off(self, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(): ...
    def makeAllOff(): ...
    def makeDefault(): ...
    def makeOff(): ...
    def make_all_off(): ...
    def make_default(): ...
    def make_off(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    off_stages = None
    on_stages = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def removeOffStage(self, object, /): ...
    def removeOnStage(self, object, /): ...
    def remove_off_stage(self, object, /): ...
    def remove_on_stage(self, object, /): ...
    def replaceTexture(): ...
    def replace_texture(): ...
    samplers = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    textures = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unifyTextureStages(self, object, /): ...
    def unify_texture_stages(self, object, /): ...
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class TextureCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTexture(self, object, /): ...
    def addTexturesFrom(self, object, /): ...
    def add_texture(self, object, /): ...
    def add_textures_from(self, object, /): ...
    def append(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def extend(self, object, /): ...
    def findTexture(self, object, /): ...
    def find_texture(self, object, /): ...
    def getNumTextures(self, /): ...
    def getTexture(self, object, /): ...
    def getTextures(self, /): ...
    def get_num_textures(self, /): ...
    def get_texture(self, object, /): ...
    def get_textures(self, /): ...
    def hasTexture(self, object, /): ...
    def has_texture(self, object, /): ...
    def output(self, object, /): ...
    def removeDuplicateTextures(self, /): ...
    def removeTexture(self, object, /): ...
    def removeTexturesFrom(self, object, /): ...
    def remove_duplicate_textures(self, /): ...
    def remove_texture(self, object, /): ...
    def remove_textures_from(self, object, /): ...
    def reserve(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class TextureContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active = None
    def assign(self, object, /): ...
    data_size_bytes = None
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def getActive(self, /): ...
    def getClassType(): ...
    def getDataSizeBytes(self, /): ...
    def getImageModified(self, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getModified(self, /): ...
    def getNativeBufferId(self, /): ...
    def getNativeId(self, /): ...
    def getNumFrames(self, /): ...
    def getNumInactiveFrames(self, /): ...
    def getPropertiesModified(self, /): ...
    def getResident(self, /): ...
    def getSimpleImageModified(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getView(self, /): ...
    def get_active(self, /): ...
    def get_class_type(): ...
    def get_data_size_bytes(self, /): ...
    def get_image_modified(self, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_modified(self, /): ...
    def get_native_buffer_id(self, /): ...
    def get_native_id(self, /): ...
    def get_num_frames(self, /): ...
    def get_num_inactive_frames(self, /): ...
    def get_properties_modified(self, /): ...
    def get_resident(self, /): ...
    def get_simple_image_modified(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_view(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    modified = None
    object = None
    def output(self, object, /): ...
    resident = None
    def setLruSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcastToAdaptiveLruPage(self, /): ...
    def upcastToBufferContext(self, /): ...
    def upcastToSavedContext(self, /): ...
    def upcast_to_AdaptiveLruPage(self, /): ...
    def upcast_to_BufferContext(self, /): ...
    def upcast_to_SavedContext(self, /): ...
    def wasImageModified(self, /): ...
    def wasModified(self, /): ...
    def wasPropertiesModified(self, /): ...
    def wasSimpleImageModified(self, /): ...
    def was_image_modified(self, /): ...
    def was_modified(self, /): ...
    def was_properties_modified(self, /): ...
    def was_simple_image_modified(self, /): ...
    def write(): ...
class TexturePeeker:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def fetchPixel(): ...
    def fetch_pixel(): ...
    def filterRect(): ...
    def filter_rect(): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def getZSize(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def get_z_size(self, /): ...
    def hasPixel(): ...
    def has_pixel(): ...
    def lookup(): ...
    def lookupBilinear(): ...
    def lookup_bilinear(): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class TexturePool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTexture(object, /): ...
    def add_texture(object, /): ...
    def clearFakeTextureImage(): ...
    def clear_fake_texture_image(): ...
    def findAllTextures(): ...
    def findTexture(object, /): ...
    def find_all_textures(): ...
    def find_texture(object, /): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getAlphaScaleMap(): ...
    def getFakeTextureImage(): ...
    def getNormalizationCubeMap(object, /): ...
    def getTexture(): ...
    def get_alpha_scale_map(): ...
    def get_fake_texture_image(): ...
    def get_normalization_cube_map(object, /): ...
    def get_texture(): ...
    def hasFakeTextureImage(): ...
    def hasTexture(object, /): ...
    def has_fake_texture_image(): ...
    def has_texture(object, /): ...
    def listContents(): ...
    def list_contents(): ...
    def load2dTextureArray(): ...
    def load3dTexture(): ...
    def loadCubeMap(): ...
    def loadTexture(): ...
    def load_2d_texture_array(): ...
    def load_3d_texture(): ...
    def load_cube_map(): ...
    def load_texture(): ...
    def makeTexture(object, /): ...
    def make_texture(object, /): ...
    def rehash(): ...
    def releaseAllTextures(): ...
    def releaseTexture(object, /): ...
    def release_all_textures(): ...
    def release_texture(object, /): ...
    def setFakeTextureImage(object, /): ...
    def set_fake_texture_image(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def verifyTexture(object, /): ...
    def verify_texture(object, /): ...
    def write(object, /): ...
class TextureReloadRequest:
    ...
    DSAgain:int = None
    DSAwait:int = None
    DSCont:int = None
    DSDone:int = None
    DSExit:int = None
    DSInterrupt:int = None
    DSPause:int = None
    DSPickup:int = None
    DS_again:int = None
    DS_await:int = None
    DS_cont:int = None
    DS_done:int = None
    DS_exit:int = None
    DS_interrupt:int = None
    DS_pause:int = None
    DS_pickup:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    SActive:int = None
    SActiveNested:int = None
    SAwaiting:int = None
    SInactive:int = None
    SServicing:int = None
    SServicingRemoved:int = None
    SSleeping:int = None
    S_active:int = None
    S_active_nested:int = None
    S_awaiting:int = None
    S_inactive:int = None
    S_servicing:int = None
    S_servicing_removed:int = None
    S_sleeping:int = None
    def addDoneCallback(self, object, /): ...
    def add_done_callback(self, object, /): ...
    alive = None
    average_dt = None
    def cancel(self, /): ...
    def cancelled(self, /): ...
    def clearDelay(self, /): ...
    def clearName(self, /): ...
    def clear_delay(self, /): ...
    def clear_name(self, /): ...
    def done(self, /): ...
    done_event = None
    dt = None
    def gather(): ...
    def getAllowCompressed(self, /): ...
    def getAverageDt(self, /): ...
    def getClassType(): ...
    def getDelay(self, /): ...
    def getDoneEvent(self, /): ...
    def getDt(self, /): ...
    def getElapsedFrames(self, /): ...
    def getElapsedTime(self, /): ...
    def getManager(self, /): ...
    def getMaxDt(self, /): ...
    def getName(self, /): ...
    def getNamePrefix(self, /): ...
    def getPreparedGraphicsObjects(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getSort(self, /): ...
    def getStartFrame(self, /): ...
    def getStartTime(self, /): ...
    def getState(self, /): ...
    def getTaskChain(self, /): ...
    def getTaskId(self, /): ...
    def getTexture(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getWakeTime(self, /): ...
    def get_allow_compressed(self, /): ...
    def get_average_dt(self, /): ...
    def get_class_type(): ...
    def get_delay(self, /): ...
    def get_done_event(self, /): ...
    def get_dt(self, /): ...
    def get_elapsed_frames(self, /): ...
    def get_elapsed_time(self, /): ...
    def get_manager(self, /): ...
    def get_max_dt(self, /): ...
    def get_name(self, /): ...
    def get_name_prefix(self, /): ...
    def get_prepared_graphics_objects(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_sort(self, /): ...
    def get_start_frame(self, /): ...
    def get_start_time(self, /): ...
    def get_state(self, /): ...
    def get_task_chain(self, /): ...
    def get_task_id(self, /): ...
    def get_texture(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_wake_time(self, /): ...
    def hasDelay(self, /): ...
    def hasName(self, /): ...
    def has_delay(self, /): ...
    def has_name(self, /): ...
    id = None
    def isAlive(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isReady(self, /): ...
    def is_alive(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_ready(self, /): ...
    manager = None
    max_dt = None
    name = None
    def output(self, object, /): ...
    priority = None
    def recalcWakeTime(self, /): ...
    def recalc_wake_time(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def remove(self, /): ...
    def result(): ...
    def setDelay(self, object, /): ...
    def setDoneEvent(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTaskChain(self, object, /): ...
    def set_delay(self, object, /): ...
    def set_done_event(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_task_chain(self, object, /): ...
    sort = None
    state = None
    task_chain = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToAsyncFuture(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_AsyncFuture(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wait(): ...
class TextureStage:
    ...
    CMAdd:int = None
    CMAddSigned:int = None
    CMDot3Rgb:int = None
    CMDot3Rgba:int = None
    CMInterpolate:int = None
    CMModulate:int = None
    CMReplace:int = None
    CMSubtract:int = None
    CMUndefined:int = None
    CM_add:int = None
    CM_add_signed:int = None
    CM_dot3_rgb:int = None
    CM_dot3_rgba:int = None
    CM_interpolate:int = None
    CM_modulate:int = None
    CM_replace:int = None
    CM_subtract:int = None
    CM_undefined:int = None
    COOneMinusSrcAlpha:int = None
    COOneMinusSrcColor:int = None
    COSrcAlpha:int = None
    COSrcColor:int = None
    COUndefined:int = None
    CO_one_minus_src_alpha:int = None
    CO_one_minus_src_color:int = None
    CO_src_alpha:int = None
    CO_src_color:int = None
    CO_undefined:int = None
    CSConstant:int = None
    CSConstantColorScale:int = None
    CSLastSavedResult:int = None
    CSPrevious:int = None
    CSPrimaryColor:int = None
    CSTexture:int = None
    CSUndefined:int = None
    CS_constant:int = None
    CS_constant_color_scale:int = None
    CS_last_saved_result:int = None
    CS_previous:int = None
    CS_primary_color:int = None
    CS_texture:int = None
    CS_undefined:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAdd:int = None
    MBlend:int = None
    MBlendColorScale:int = None
    MCombine:int = None
    MDecal:int = None
    MEmission:int = None
    MGloss:int = None
    MGlow:int = None
    MHeight:int = None
    MModulate:int = None
    MModulateGloss:int = None
    MModulateGlow:int = None
    MNormal:int = None
    MNormalGloss:int = None
    MNormalHeight:int = None
    MReplace:int = None
    MSelector:int = None
    M_add:int = None
    M_blend:int = None
    M_blend_color_scale:int = None
    M_combine:int = None
    M_decal:int = None
    M_emission:int = None
    M_gloss:int = None
    M_glow:int = None
    M_height:int = None
    M_modulate:int = None
    M_modulate_gloss:int = None
    M_modulate_glow:int = None
    M_normal:int = None
    M_normal_gloss:int = None
    M_normal_height:int = None
    M_replace:int = None
    M_selector:int = None
    alpha_scale = None
    def assign(self, object, /): ...
    binormal_name = None
    color = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getAlphaScale(self, /): ...
    def getBamModified(self, /): ...
    def getBinormalName(self, /): ...
    def getClassType(): ...
    def getColor(self, /): ...
    def getCombineAlphaMode(self, /): ...
    def getCombineAlphaOperand0(self, /): ...
    def getCombineAlphaOperand1(self, /): ...
    def getCombineAlphaOperand2(self, /): ...
    def getCombineAlphaSource0(self, /): ...
    def getCombineAlphaSource1(self, /): ...
    def getCombineAlphaSource2(self, /): ...
    def getCombineRgbMode(self, /): ...
    def getCombineRgbOperand0(self, /): ...
    def getCombineRgbOperand1(self, /): ...
    def getCombineRgbOperand2(self, /): ...
    def getCombineRgbSource0(self, /): ...
    def getCombineRgbSource1(self, /): ...
    def getCombineRgbSource2(self, /): ...
    def getDefault(): ...
    def getMode(self, /): ...
    def getName(self, /): ...
    def getNumCombineAlphaOperands(self, /): ...
    def getNumCombineRgbOperands(self, /): ...
    def getPriority(self, /): ...
    def getRefCount(self, /): ...
    def getRgbScale(self, /): ...
    def getSavedResult(self, /): ...
    def getSort(self, /): ...
    def getTangentName(self, /): ...
    def getTexViewOffset(self, /): ...
    def getTexcoordName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_alpha_scale(self, /): ...
    def get_bam_modified(self, /): ...
    def get_binormal_name(self, /): ...
    def get_class_type(): ...
    def get_color(self, /): ...
    def get_combine_alpha_mode(self, /): ...
    def get_combine_alpha_operand0(self, /): ...
    def get_combine_alpha_operand1(self, /): ...
    def get_combine_alpha_operand2(self, /): ...
    def get_combine_alpha_source0(self, /): ...
    def get_combine_alpha_source1(self, /): ...
    def get_combine_alpha_source2(self, /): ...
    def get_combine_rgb_mode(self, /): ...
    def get_combine_rgb_operand0(self, /): ...
    def get_combine_rgb_operand1(self, /): ...
    def get_combine_rgb_operand2(self, /): ...
    def get_combine_rgb_source0(self, /): ...
    def get_combine_rgb_source1(self, /): ...
    def get_combine_rgb_source2(self, /): ...
    def get_default(): ...
    def get_mode(self, /): ...
    def get_name(self, /): ...
    def get_num_combine_alpha_operands(self, /): ...
    def get_num_combine_rgb_operands(self, /): ...
    def get_priority(self, /): ...
    def get_ref_count(self, /): ...
    def get_rgb_scale(self, /): ...
    def get_saved_result(self, /): ...
    def get_sort(self, /): ...
    def get_tangent_name(self, /): ...
    def get_tex_view_offset(self, /): ...
    def get_texcoord_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def involvesColorScale(self, /): ...
    def involves_color_scale(self, /): ...
    def isExactType(self, object, /): ...
    def isFixedFunction(self, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_fixed_function(self, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    name = None
    def output(self, object, /): ...
    priority = None
    def ref(self, /): ...
    ref_count = None
    rgb_scale = None
    saved_result = None
    def setAlphaScale(self, object, /): ...
    def setColor(self, object, /): ...
    def setCombineAlpha(): ...
    def setCombineRgb(): ...
    def setMode(self, object, /): ...
    def setName(self, object, /): ...
    def setPriority(self, object, /): ...
    def setRgbScale(self, object, /): ...
    def setSavedResult(self, object, /): ...
    def setSort(self, object, /): ...
    def setTexViewOffset(self, object, /): ...
    def setTexcoordName(self, object, /): ...
    def set_alpha_scale(self, object, /): ...
    def set_color(self, object, /): ...
    def set_combine_alpha(): ...
    def set_combine_rgb(): ...
    def set_mode(self, object, /): ...
    def set_name(self, object, /): ...
    def set_priority(self, object, /): ...
    def set_rgb_scale(self, object, /): ...
    def set_saved_result(self, object, /): ...
    def set_sort(self, object, /): ...
    def set_tex_view_offset(self, object, /): ...
    def set_texcoord_name(self, object, /): ...
    sort = None
    tangent_name = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    tex_view_offset = None
    texcoord_name = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def usesColor(self, /): ...
    def usesLastSavedResult(self, /): ...
    def usesPrimaryColor(self, /): ...
    def uses_color(self, /): ...
    def uses_last_saved_result(self, /): ...
    def uses_primary_color(self, /): ...
    def write(): ...
class TextureStageCollection:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTextureStage(self, object, /): ...
    def addTextureStagesFrom(self, object, /): ...
    def add_texture_stage(self, object, /): ...
    def add_texture_stages_from(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def findTextureStage(self, object, /): ...
    def find_texture_stage(self, object, /): ...
    def getNumTextureStages(self, /): ...
    def getTextureStage(self, object, /): ...
    def getTextureStages(self, /): ...
    def get_num_texture_stages(self, /): ...
    def get_texture_stage(self, object, /): ...
    def get_texture_stages(self, /): ...
    def hasTextureStage(self, object, /): ...
    def has_texture_stage(self, object, /): ...
    def output(self, object, /): ...
    def removeDuplicateTextureStages(self, /): ...
    def removeTextureStage(self, object, /): ...
    def removeTextureStagesFrom(self, object, /): ...
    def remove_duplicate_texture_stages(self, /): ...
    def remove_texture_stage(self, object, /): ...
    def remove_texture_stages_from(self, object, /): ...
    def sort(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(): ...
class TextureStagePool:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MName:int = None
    MNone:int = None
    MUnique:int = None
    M_name:int = None
    M_none:int = None
    M_unique:int = None
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getMode(): ...
    def getStage(object, /): ...
    def get_mode(): ...
    def get_stage(object, /): ...
    def listContents(object, /): ...
    def list_contents(object, /): ...
    mode:int = None
    def releaseAllStages(): ...
    def releaseStage(object, /): ...
    def release_all_stages(): ...
    def release_stage(object, /): ...
    def setMode(object, /): ...
    def set_mode(object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(object, /): ...
class Thread:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def bindThread(): ...
    def bind_thread(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def considerYield(): ...
    def consider_yield(): ...
    current_pipeline_stage:int = None
    current_task = None
    current_thread = None
    external_thread = None
    def forceYield(): ...
    def force_yield(): ...
    def getClassType(): ...
    def getCurrentPipelineStage(): ...
    def getCurrentTask(self, /): ...
    def getCurrentThread(): ...
    def getExternalThread(): ...
    def getMainThread(): ...
    def getName(self, /): ...
    def getPipelineStage(self, /): ...
    def getPstatsIndex(self, /): ...
    def getPythonIndex(self, /): ...
    def getRefCount(self, /): ...
    def getSyncName(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUniqueId(self, /): ...
    def get_class_type(): ...
    def get_current_pipeline_stage(): ...
    def get_current_task(self, /): ...
    def get_current_thread(): ...
    def get_external_thread(): ...
    def get_main_thread(): ...
    def get_name(self, /): ...
    def get_pipeline_stage(self, /): ...
    def get_pstats_index(self, /): ...
    def get_python_index(self, /): ...
    def get_ref_count(self, /): ...
    def get_sync_name(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique_id(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isJoinable(self, /): ...
    def isOfType(self, object, /): ...
    def isSimpleThreads(): ...
    def isStarted(self, /): ...
    def isThreadingSupported(): ...
    def isTrueThreads(): ...
    def is_exact_type(self, object, /): ...
    def is_joinable(self, /): ...
    def is_of_type(self, object, /): ...
    def is_simple_threads(): ...
    def is_started(self, /): ...
    def is_threading_supported(): ...
    def is_true_threads(): ...
    def join(self, /): ...
    joinable = None
    main_thread = None
    name = None
    def output(self, object, /): ...
    def outputBlocker(self, object, /): ...
    def output_blocker(self, object, /): ...
    pipeline_stage = None
    def preempt(self, /): ...
    def prepareForExit(): ...
    def prepare_for_exit(): ...
    pstats_index = None
    python_index = None
    def ref(self, /): ...
    ref_count = None
    def setMinPipelineStage(self, object, /): ...
    def setName(self, object, /): ...
    def setPipelineStage(self, object, /): ...
    def setPythonIndex(self, object, /): ...
    def set_min_pipeline_stage(self, object, /): ...
    def set_name(self, object, /): ...
    def set_pipeline_stage(self, object, /): ...
    def set_python_index(self, object, /): ...
    simple_threads = None
    def sleep(object, /): ...
    def start(): ...
    started = None
    sync_name = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    threading_supported = None
    true_threads = None
    type = None
    unique_id = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcastToTypedReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def upcast_to_TypedReferenceCount(self, /): ...
    def writeStatus(object, /): ...
    def write_status(object, /): ...
class TiXmlAttribute:
    ...
    def Column(self, /): ...
    def DoubleValue(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def IntValue(self, /): ...
    def IsWhiteSpaceCondensed(): ...
    def Name(self, /): ...
    def NameTStr(self, /): ...
    def Next(self, /): ...
    def Previous(self, /): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetDocument(self, object, /): ...
    def SetDoubleValue(self, object, /): ...
    def SetIntValue(self, object, /): ...
    def SetName(self, object, /): ...
    def SetValue(self, object, /): ...
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def Value(self, /): ...
    def ValueStr(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlAttributeSet:
    ...
    def Add(self, object, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Find(self, object, /): ...
    def FindOrCreate(self, object, /): ...
    def First(self, /): ...
    def Last(self, /): ...
    def Remove(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlBase:
    ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def IsWhiteSpaceCondensed(): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlComment:
    ...
    def Accept(self, object, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlDeclaration:
    ...
    def Accept(self, object, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Encoding(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetValue(self, object, /): ...
    def Standalone(self, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def Version(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlDocument:
    ...
    def Accept(self, object, /): ...
    def Clear(self, /): ...
    def ClearError(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Error(self, /): ...
    def ErrorCol(self, /): ...
    def ErrorDesc(self, /): ...
    def ErrorId(self, /): ...
    def ErrorRow(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def LoadFile(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def Print(self, /): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def RootElement(self, /): ...
    def Row(self, /): ...
    def SaveFile(): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetTabSize(self, object, /): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def TabSize(self, /): ...
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlElement:
    ...
    def Accept(self, object, /): ...
    def Attribute(self, object, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def FirstAttribute(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def GetText(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastAttribute(self, /): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveAttribute(self, object, /): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetAttribute(): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetDoubleAttribute(): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlHandle:
    ...
    def Child(): ...
    def ChildElement(): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Element(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def Node(self, /): ...
    def Text(self, /): ...
    def ToElement(self, /): ...
    def ToNode(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Unknown(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlNode:
    ...
    def Accept(self, object, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlPrinter:
    ...
    def CStr(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Indent(self, /): ...
    def LineBreak(self, /): ...
    def SetIndent(self, object, /): ...
    def SetLineBreak(self, object, /): ...
    def SetStreamPrinting(self, /): ...
    def Size(self, /): ...
    def Str(self, /): ...
    def Visit(self, object, /): ...
    def VisitEnter(): ...
    def VisitExit(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlText:
    ...
    def Accept(self, object, /): ...
    def CDATA(self, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetCDATA(self, object, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlUnknown:
    ...
    def Accept(self, object, /): ...
    def Clear(self, /): ...
    def Clone(self, /): ...
    def Column(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def FirstChild(): ...
    def FirstChildElement(): ...
    def GetDocument(self, /): ...
    def InsertAfterChild(): ...
    def InsertBeforeChild(): ...
    def InsertEndChild(self, object, /): ...
    def IsWhiteSpaceCondensed(): ...
    def IterateChildren(): ...
    def LastChild(): ...
    def NextSibling(): ...
    def NextSiblingElement(): ...
    def NoChildren(self, /): ...
    def Parent(self, /): ...
    def PreviousSibling(): ...
    def RemoveChild(self, object, /): ...
    def ReplaceChild(): ...
    def Row(self, /): ...
    def SetCondenseWhiteSpace(object, /): ...
    def SetValue(self, object, /): ...
    TINYXMLCOMMENT:int = None
    TINYXMLDECLARATION:int = None
    TINYXMLDOCUMENT:int = None
    TINYXMLELEMENT:int = None
    TINYXMLTEXT:int = None
    TINYXMLTYPECOUNT:int = None
    TINYXMLUNKNOWN:int = None
    TINYXML_COMMENT:int = None
    TINYXML_DECLARATION:int = None
    TINYXML_DOCUMENT:int = None
    TINYXML_ELEMENT:int = None
    TINYXML_TEXT:int = None
    TINYXML_TYPECOUNT:int = None
    TINYXML_UNKNOWN:int = None
    TIXML_ERROR:int = None
    TIXML_ERROR_DOCUMENT_EMPTY:int = None
    TIXML_ERROR_DOCUMENT_TOP_ONLY:int = None
    TIXML_ERROR_EMBEDDED_NULL:int = None
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME:int = None
    TIXML_ERROR_OPENING_FILE:int = None
    TIXML_ERROR_PARSING_CDATA:int = None
    TIXML_ERROR_PARSING_COMMENT:int = None
    TIXML_ERROR_PARSING_DECLARATION:int = None
    TIXML_ERROR_PARSING_ELEMENT:int = None
    TIXML_ERROR_PARSING_EMPTY:int = None
    TIXML_ERROR_PARSING_UNKNOWN:int = None
    TIXML_ERROR_READING_ATTRIBUTES:int = None
    TIXML_ERROR_READING_ELEMENT_VALUE:int = None
    TIXML_ERROR_READING_END_TAG:int = None
    TIXML_ERROR_STRING_COUNT:int = None
    TIXML_NO_ERROR:int = None
    def ToComment(self, /): ...
    def ToDeclaration(self, /): ...
    def ToDocument(self, /): ...
    def ToElement(self, /): ...
    def ToText(self, /): ...
    def ToUnknown(self, /): ...
    def Type(self, /): ...
    def Value(self, /): ...
    def ValueStr(self, /): ...
    def ValueTStr(self, /): ...
    def assign(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TiXmlVisitor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Visit(self, object, /): ...
    def VisitEnter(): ...
    def VisitExit(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TimeVal:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getSec(self, /): ...
    def getUsec(self, /): ...
    def get_sec(self, /): ...
    def get_usec(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TouchInfo:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    TIFDown:int = None
    TIFMove:int = None
    TIFUp:int = None
    TIF_down:int = None
    TIF_move:int = None
    TIF_up:int = None
    def getFlags(self, /): ...
    def getId(self, /): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_flags(self, /): ...
    def get_id(self, /): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class Trackball:
    ...
    CMDefault:int = None
    CMDolly:int = None
    CMPan:int = None
    CMRoll:int = None
    CMTruck:int = None
    CM_default:int = None
    CM_dolly:int = None
    CM_pan:int = None
    CM_roll:int = None
    CM_truck:int = None
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAllButtons(self, /): ...
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearButton(self, object, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_all_buttons(self, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_button(self, object, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getControlMode(self, /): ...
    def getCoordinateSystem(self, /): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getForwardScale(self, /): ...
    def getH(self, /): ...
    def getHpr(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getInvert(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getMat(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOrigin(self, /): ...
    def getOverallBit(): ...
    def getP(self, /): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPos(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getR(self, /): ...
    def getRefCount(self, /): ...
    def getRelTo(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransMat(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_control_mode(self, /): ...
    def get_coordinate_system(self, /): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_forward_scale(self, /): ...
    def get_h(self, /): ...
    def get_hpr(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_invert(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_mat(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_origin(self, /): ...
    def get_overall_bit(): ...
    def get_p(self, /): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_pos(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_r(self, /): ...
    def get_ref_count(self, /): ...
    def get_rel_to(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_trans_mat(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    def moveOrigin(): ...
    def move_origin(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def requireButton(): ...
    def require_button(): ...
    def reset(self, /): ...
    def resetAllPrevTransform(): ...
    def resetOriginHere(self, /): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_origin_here(self, /): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setControlMode(self, object, /): ...
    def setCoordinateSystem(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setForwardScale(self, object, /): ...
    def setH(self, object, /): ...
    def setHpr(): ...
    def setIntoCollideMask(self, object, /): ...
    def setInvert(self, object, /): ...
    def setMat(self, object, /): ...
    def setName(self, object, /): ...
    def setOrigin(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setP(self, object, /): ...
    def setPos(): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setR(self, object, /): ...
    def setRelTo(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_control_mode(self, object, /): ...
    def set_coordinate_system(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_forward_scale(self, object, /): ...
    def set_h(self, object, /): ...
    def set_hpr(): ...
    def set_into_collide_mask(self, object, /): ...
    def set_invert(self, object, /): ...
    def set_mat(self, object, /): ...
    def set_name(self, object, /): ...
    def set_origin(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_p(self, object, /): ...
    def set_pos(): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_r(self, object, /): ...
    def set_rel_to(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class TrackerData:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    dt = None
    orient = None
    pos = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    time = None
class TrackerNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getGraphCoordinateSystem(self, /): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOrient(self, /): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPos(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTime(self, /): ...
    def getTrackerCoordinateSystem(self, /): ...
    def getTransform(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_graph_coordinate_system(self, /): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_orient(self, /): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_pos(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_time(self, /): ...
    def get_tracker_coordinate_system(self, /): ...
    def get_transform(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def hasTime(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    def has_time(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def isValid(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    def is_valid(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setGraphCoordinateSystem(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTrackerCoordinateSystem(self, object, /): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_graph_coordinate_system(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_tracker_coordinate_system(self, object, /): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class Transform2SG:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNode(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_node(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setNode(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_node(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class TransformBlend:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTransform(): ...
    def add_transform(): ...
    def assign(self, object, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getBlend(): ...
    def getClassType(): ...
    def getModified(): ...
    def getNumTransforms(self, /): ...
    def getTransform(self, object, /): ...
    def getTransforms(self, /): ...
    def getWeight(self, object, /): ...
    def get_blend(): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_num_transforms(self, /): ...
    def get_transform(self, object, /): ...
    def get_transforms(self, /): ...
    def get_weight(self, object, /): ...
    def hasTransform(self, object, /): ...
    def has_transform(self, object, /): ...
    def limitTransforms(self, object, /): ...
    def limit_transforms(self, object, /): ...
    modified = None
    def normalizeWeights(self, /): ...
    def normalize_weights(self, /): ...
    def output(self, object, /): ...
    def removeTransform(self, object, /): ...
    def remove_transform(self, object, /): ...
    def setTransform(): ...
    def setWeight(): ...
    def set_transform(): ...
    def set_weight(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def transformPoint(): ...
    def transformVector(): ...
    def transform_point(): ...
    def transform_vector(): ...
    transforms = None
    def updateBlend(self, object, /): ...
    def update_blend(self, object, /): ...
    weights = None
    def write(): ...
class TransformBlendTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addBlend(self, object, /): ...
    def add_blend(self, object, /): ...
    def assign(self, object, /): ...
    blends = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getBlend(self, object, /): ...
    def getBlends(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getMaxSimultaneousTransforms(self, /): ...
    def getModified(): ...
    def getNumBlends(self, /): ...
    def getNumTransforms(self, /): ...
    def getRefCount(self, /): ...
    def getRows(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_blend(self, object, /): ...
    def get_blends(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_max_simultaneous_transforms(self, /): ...
    def get_modified(): ...
    def get_num_blends(self, /): ...
    def get_num_transforms(self, /): ...
    def get_ref_count(self, /): ...
    def get_rows(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    max_simultaneous_transforms = None
    modified = None
    def modifyRows(self, /): ...
    def modify_rows(self, /): ...
    num_transforms = None
    def ref(self, /): ...
    ref_count = None
    def removeBlend(self, object, /): ...
    def remove_blend(self, object, /): ...
    rows = None
    def setBlend(): ...
    def setRows(self, object, /): ...
    def set_blend(): ...
    def set_rows(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class TransformState:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RCache:int = None
    RNode:int = None
    R_cache:int = None
    R_node:int = None
    def cacheRef(self, /): ...
    def cacheUnref(self, /): ...
    def cache_ref(self, /): ...
    cache_ref_count = None
    def cache_unref(self, /): ...
    def clearCache(): ...
    def clear_cache(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentsGiven(self, /): ...
    def components_given(self, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getCacheRefCount(self, /): ...
    def getClassType(): ...
    def getCompositionCache(self, /): ...
    def getCompositionCacheNumEntries(self, /): ...
    def getCompositionCacheResult(self, object, /): ...
    def getCompositionCacheSize(self, /): ...
    def getCompositionCacheSource(self, object, /): ...
    def getGeomRendering(self, object, /): ...
    def getHash(self, /): ...
    def getHpr(self, /): ...
    def getInverse(self, /): ...
    def getInvertCompositionCache(self, /): ...
    def getInvertCompositionCacheNumEntries(self, /): ...
    def getInvertCompositionCacheResult(self, object, /): ...
    def getInvertCompositionCacheSize(self, /): ...
    def getInvertCompositionCacheSource(self, object, /): ...
    def getMat(self, /): ...
    def getMat3(self, /): ...
    def getNodeRefCount(self, /): ...
    def getNormQuat(self, /): ...
    def getNumStates(): ...
    def getNumUnusedStates(): ...
    def getPos(self, /): ...
    def getPos2d(self, /): ...
    def getQuat(self, /): ...
    def getRefCount(self, /): ...
    def getReferencedBits(self, /): ...
    def getRotate2d(self, /): ...
    def getScale(self, /): ...
    def getScale2d(self, /): ...
    def getShear(self, /): ...
    def getShear2d(self, /): ...
    def getStates(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUniformScale(self, /): ...
    def getUnique(self, /): ...
    def getUnusedStates(): ...
    def get_bam_modified(self, /): ...
    def get_cache_ref_count(self, /): ...
    def get_class_type(): ...
    def get_composition_cache(self, /): ...
    def get_composition_cache_num_entries(self, /): ...
    def get_composition_cache_result(self, object, /): ...
    def get_composition_cache_size(self, /): ...
    def get_composition_cache_source(self, object, /): ...
    def get_geom_rendering(self, object, /): ...
    def get_hash(self, /): ...
    def get_hpr(self, /): ...
    def get_inverse(self, /): ...
    def get_invert_composition_cache(self, /): ...
    def get_invert_composition_cache_num_entries(self, /): ...
    def get_invert_composition_cache_result(self, object, /): ...
    def get_invert_composition_cache_size(self, /): ...
    def get_invert_composition_cache_source(self, object, /): ...
    def get_mat(self, /): ...
    def get_mat3(self, /): ...
    def get_node_ref_count(self, /): ...
    def get_norm_quat(self, /): ...
    def get_num_states(): ...
    def get_num_unused_states(): ...
    def get_pos(self, /): ...
    def get_pos2d(self, /): ...
    def get_quat(self, /): ...
    def get_ref_count(self, /): ...
    def get_referenced_bits(self, /): ...
    def get_rotate2d(self, /): ...
    def get_scale(self, /): ...
    def get_scale2d(self, /): ...
    def get_shear(self, /): ...
    def get_shear2d(self, /): ...
    def get_states(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uniform_scale(self, /): ...
    def get_unique(self, /): ...
    def get_unused_states(): ...
    def hasComponents(self, /): ...
    def hasHpr(self, /): ...
    def hasIdentityScale(self, /): ...
    def hasMat(self, /): ...
    def hasNonzeroShear(self, /): ...
    def hasPos(self, /): ...
    def hasQuat(self, /): ...
    def hasScale(self, /): ...
    def hasShear(self, /): ...
    def hasUniformScale(self, /): ...
    def has_components(self, /): ...
    def has_hpr(self, /): ...
    def has_identity_scale(self, /): ...
    def has_mat(self, /): ...
    def has_nonzero_shear(self, /): ...
    def has_pos(self, /): ...
    def has_quat(self, /): ...
    def has_scale(self, /): ...
    def has_shear(self, /): ...
    def has_uniform_scale(self, /): ...
    hpr = None
    def hprGiven(self, /): ...
    def hpr_given(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def is2d(self, /): ...
    def isExactType(self, object, /): ...
    def isIdentity(self, /): ...
    def isInvalid(self, /): ...
    def isOfType(self, object, /): ...
    def isSingular(self, /): ...
    def is_2d(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_identity(self, /): ...
    def is_invalid(self, /): ...
    def is_of_type(self, object, /): ...
    def is_singular(self, /): ...
    def listCycles(object, /): ...
    def listStates(object, /): ...
    def list_cycles(object, /): ...
    def list_states(object, /): ...
    def makeHpr(object, /): ...
    def makeIdentity(): ...
    def makeInvalid(): ...
    def makeMat(object, /): ...
    def makeMat3(object, /): ...
    def makePos(object, /): ...
    def makePos2d(object, /): ...
    def makePosHpr(): ...
    def makePosHprScale(): ...
    def makePosHprScaleShear(): ...
    def makePosQuatScale(): ...
    def makePosQuatScaleShear(): ...
    def makePosRotate2d(): ...
    def makePosRotateScale2d(): ...
    def makePosRotateScaleShear2d(): ...
    def makeQuat(object, /): ...
    def makeRotate2d(object, /): ...
    def makeScale(object, /): ...
    def makeScale2d(object, /): ...
    def makeShear(object, /): ...
    def makeShear2d(object, /): ...
    def make_hpr(object, /): ...
    def make_identity(): ...
    def make_invalid(): ...
    def make_mat(object, /): ...
    def make_mat3(object, /): ...
    def make_pos(object, /): ...
    def make_pos2d(object, /): ...
    def make_pos_hpr(): ...
    def make_pos_hpr_scale(): ...
    def make_pos_hpr_scale_shear(): ...
    def make_pos_quat_scale(): ...
    def make_pos_quat_scale_shear(): ...
    def make_pos_rotate2d(): ...
    def make_pos_rotate_scale2d(): ...
    def make_pos_rotate_scale_shear2d(): ...
    def make_quat(object, /): ...
    def make_rotate2d(object, /): ...
    def make_scale(object, /): ...
    def make_scale2d(object, /): ...
    def make_shear(object, /): ...
    def make_shear2d(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mat = None
    def nodeRef(self, /): ...
    def nodeUnref(self, /): ...
    def node_ref(self, /): ...
    def node_unref(self, /): ...
    norm_quat = None
    def output(self, object, /): ...
    pos = None
    quat = None
    def quatGiven(self, /): ...
    def quat_given(self, /): ...
    def ref(self, /): ...
    ref_count = None
    scale = None
    def setHpr(self, object, /): ...
    def setPos(self, object, /): ...
    def setPos2d(self, object, /): ...
    def setQuat(self, object, /): ...
    def setRotate2d(self, object, /): ...
    def setScale(self, object, /): ...
    def setScale2d(self, object, /): ...
    def setShear(self, object, /): ...
    def setShear2d(self, object, /): ...
    def set_hpr(self, object, /): ...
    def set_pos(self, object, /): ...
    def set_pos2d(self, object, /): ...
    def set_quat(self, object, /): ...
    def set_rotate2d(self, object, /): ...
    def set_scale(self, object, /): ...
    def set_scale2d(self, object, /): ...
    def set_shear(self, object, /): ...
    def set_shear2d(self, object, /): ...
    shear = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateCompositionCache(self, /): ...
    def validateStates(): ...
    def validate_composition_cache(self, /): ...
    def validate_states(): ...
    def write(): ...
    def writeCompositionCache(): ...
    def write_composition_cache(): ...
class TransformTable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addTransform(self, object, /): ...
    def add_transform(self, object, /): ...
    def assign(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getModified(): ...
    def getNumTransforms(self, /): ...
    def getRefCount(self, /): ...
    def getTransform(self, object, /): ...
    def getTransforms(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_num_transforms(self, /): ...
    def get_ref_count(self, /): ...
    def get_transform(self, object, /): ...
    def get_transforms(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def insertTransform(): ...
    def insert_transform(): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegistered(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_registered(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def ref(self, /): ...
    ref_count = None
    def registerTable(object, /): ...
    def register_table(object, /): ...
    registered = None
    def removeTransform(self, object, /): ...
    def remove_transform(self, object, /): ...
    def setTransform(): ...
    def set_transform(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transforms = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(self, object, /): ...
class TransparencyAttrib:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAlpha:int = None
    MAlways:int = None
    MBinary:int = None
    MConstant:int = None
    MDual:int = None
    MEqual:int = None
    MEyeCubeMap:int = None
    MEyeNormal:int = None
    MEyePosition:int = None
    MEyeSphereMap:int = None
    MGreater:int = None
    MGreaterEqual:int = None
    MLess:int = None
    MLessEqual:int = None
    MMultisample:int = None
    MMultisampleMask:int = None
    MNever:int = None
    MNone:int = None
    MNotEqual:int = None
    MOff:int = None
    MPointSprite:int = None
    MPremultipliedAlpha:int = None
    MUnused:int = None
    MUnused2:int = None
    MWorldCubeMap:int = None
    MWorldNormal:int = None
    MWorldPosition:int = None
    M_alpha:int = None
    M_always:int = None
    M_binary:int = None
    M_constant:int = None
    M_dual:int = None
    M_equal:int = None
    M_eye_cube_map:int = None
    M_eye_normal:int = None
    M_eye_position:int = None
    M_eye_sphere_map:int = None
    M_greater:int = None
    M_greater_equal:int = None
    M_less:int = None
    M_less_equal:int = None
    M_multisample:int = None
    M_multisample_mask:int = None
    M_never:int = None
    M_none:int = None
    M_not_equal:int = None
    M_off:int = None
    M_point_sprite:int = None
    M_premultiplied_alpha:int = None
    M_unused:int = None
    M_unused2:int = None
    M_world_cube_map:int = None
    M_world_normal:int = None
    M_world_position:int = None
    class_slot:int = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def compose(self, object, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def garbageCollect(): ...
    def garbage_collect(): ...
    def getBamModified(self, /): ...
    def getClassSlot(): ...
    def getClassType(): ...
    def getHash(self, /): ...
    def getMode(self, /): ...
    def getNumAttribs(): ...
    def getRefCount(self, /): ...
    def getSlot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnique(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_slot(): ...
    def get_class_type(): ...
    def get_hash(self, /): ...
    def get_mode(self, /): ...
    def get_num_attribs(): ...
    def get_ref_count(self, /): ...
    def get_slot(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unique(self, /): ...
    def invertCompose(self, object, /): ...
    def invert_compose(self, object, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def listAttribs(object, /): ...
    def list_attribs(object, /): ...
    def lowerAttribCanOverride(self, /): ...
    def lower_attrib_can_override(self, /): ...
    def make(object, /): ...
    def makeDefault(): ...
    def make_default(): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    mode = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slot = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def validateAttribs(): ...
    def validate_attribs(): ...
    def write(): ...
class Triangulator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addHoleVertex(self, object, /): ...
    def addPolygonVertex(self, object, /): ...
    def addVertex(): ...
    def add_hole_vertex(self, object, /): ...
    def add_polygon_vertex(self, object, /): ...
    def add_vertex(): ...
    def beginHole(self, /): ...
    def begin_hole(self, /): ...
    def clear(self, /): ...
    def clearPolygon(self, /): ...
    def clear_polygon(self, /): ...
    def getNumTriangles(self, /): ...
    def getNumVertices(self, /): ...
    def getTriangleV0(self, object, /): ...
    def getTriangleV1(self, object, /): ...
    def getTriangleV2(self, object, /): ...
    def getVertex(self, object, /): ...
    def getVertices(self, /): ...
    def get_num_triangles(self, /): ...
    def get_num_vertices(self, /): ...
    def get_triangle_v0(self, object, /): ...
    def get_triangle_v1(self, object, /): ...
    def get_triangle_v2(self, object, /): ...
    def get_vertex(self, object, /): ...
    def get_vertices(self, /): ...
    def isLeftWinding(self, /): ...
    def is_left_winding(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triangulate(self, /): ...
    vertices = None
class Triangulator3:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def addHoleVertex(self, object, /): ...
    def addPolygonVertex(self, object, /): ...
    def addVertex(): ...
    def add_hole_vertex(self, object, /): ...
    def add_polygon_vertex(self, object, /): ...
    def add_vertex(): ...
    def beginHole(self, /): ...
    def begin_hole(self, /): ...
    def clear(self, /): ...
    def clearPolygon(self, /): ...
    def clear_polygon(self, /): ...
    def getNumTriangles(self, /): ...
    def getNumVertices(self, /): ...
    def getPlane(self, /): ...
    def getTriangleV0(self, object, /): ...
    def getTriangleV1(self, object, /): ...
    def getTriangleV2(self, object, /): ...
    def getVertex(self, object, /): ...
    def getVertices(self, /): ...
    def get_num_triangles(self, /): ...
    def get_num_vertices(self, /): ...
    def get_plane(self, /): ...
    def get_triangle_v0(self, object, /): ...
    def get_triangle_v1(self, object, /): ...
    def get_triangle_v2(self, object, /): ...
    def get_vertex(self, object, /): ...
    def get_vertices(self, /): ...
    def isLeftWinding(self, /): ...
    def is_left_winding(self, /): ...
    plane = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def triangulate(self, /): ...
    vertices = None
class TrueClock:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    error_count = None
    def getErrorCount(self, /): ...
    def getGlobalPtr(): ...
    def getLongTime(self, /): ...
    def getShortRawTime(self, /): ...
    def getShortTime(self, /): ...
    def get_error_count(self, /): ...
    def get_global_ptr(): ...
    def get_long_time(self, /): ...
    def get_short_raw_time(self, /): ...
    def get_short_time(self, /): ...
    long_time = None
    def setCpuAffinity(self, object, /): ...
    def set_cpu_affinity(self, object, /): ...
    short_raw_time = None
    short_time = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TypeHandle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MCArray:int = None
    MCDeletedChainActive:int = None
    MCDeletedChainInactive:int = None
    MCLimit:int = None
    MCSingleton:int = None
    MC_array:int = None
    MC_deleted_chain_active:int = None
    MC_deleted_chain_inactive:int = None
    MC_limit:int = None
    MC_singleton:int = None
    child_classes = None
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def decMemoryUsage(): ...
    def dec_memory_usage(): ...
    def getChildClass(self, object, /): ...
    def getHash(self, /): ...
    def getIndex(self, /): ...
    def getMemoryUsage(self, object, /): ...
    def getName(): ...
    def getNumChildClasses(): ...
    def getNumParentClasses(): ...
    def getParentClass(self, object, /): ...
    def getParentTowards(): ...
    def get_child_class(self, object, /): ...
    def get_hash(self, /): ...
    def get_index(self, /): ...
    def get_memory_usage(self, object, /): ...
    def get_name(): ...
    def get_num_child_classes(): ...
    def get_num_parent_classes(): ...
    def get_parent_class(self, object, /): ...
    def get_parent_towards(): ...
    def incMemoryUsage(): ...
    def inc_memory_usage(): ...
    index = None
    def isDerivedFrom(): ...
    def is_derived_from(): ...
    def make(object, /): ...
    name = None
    def none(): ...
    def output(self, object, /): ...
    parent_classes = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class TypeRegistry:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def findType(self, object, /): ...
    def findTypeById(self, object, /): ...
    def find_type(self, object, /): ...
    def find_type_by_id(self, object, /): ...
    def getChildClass(): ...
    def getName(): ...
    def getNumChildClasses(): ...
    def getNumParentClasses(): ...
    def getNumRootClasses(self, /): ...
    def getNumTypehandles(self, /): ...
    def getParentClass(): ...
    def getParentTowards(): ...
    def getRootClass(self, object, /): ...
    def getRootClasses(self, /): ...
    def getTypehandle(self, object, /): ...
    def getTypehandles(self, /): ...
    def get_child_class(): ...
    def get_name(): ...
    def get_num_child_classes(): ...
    def get_num_parent_classes(): ...
    def get_num_root_classes(self, /): ...
    def get_num_typehandles(self, /): ...
    def get_parent_class(): ...
    def get_parent_towards(): ...
    def get_root_class(self, object, /): ...
    def get_root_classes(self, /): ...
    def get_typehandle(self, object, /): ...
    def get_typehandles(self, /): ...
    def isDerivedFrom(): ...
    def is_derived_from(): ...
    def ptr(): ...
    def recordAlternateName(): ...
    def recordDerivation(): ...
    def recordPythonType(): ...
    def record_alternate_name(): ...
    def record_derivation(): ...
    def record_python_type(): ...
    def registerDynamicType(self, object, /): ...
    def register_dynamic_type(self, object, /): ...
    def reregisterTypes(): ...
    def reregister_types(): ...
    root_classes = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    typehandles = None
    def write(self, object, /): ...
class TypedObject:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class TypedReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class TypedWritable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class TypedWritableReferenceCount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class URLSpec:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    authority = None
    def cStr(self, /): ...
    def c_str(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def empty(self, /): ...
    def getAuthority(self, /): ...
    def getDefaultPortForScheme(object, /): ...
    def getHash(self, /): ...
    def getPath(self, /): ...
    def getPathAndQuery(self, /): ...
    def getPort(self, /): ...
    def getPortStr(self, /): ...
    def getQuery(self, /): ...
    def getScheme(self, /): ...
    def getServer(self, /): ...
    def getServerAndPort(self, /): ...
    def getUrl(self, /): ...
    def getUsername(self, /): ...
    def get_authority(self, /): ...
    def get_default_port_for_scheme(object, /): ...
    def get_hash(self, /): ...
    def get_path(self, /): ...
    def get_path_and_query(self, /): ...
    def get_port(self, /): ...
    def get_port_str(self, /): ...
    def get_query(self, /): ...
    def get_scheme(self, /): ...
    def get_server(self, /): ...
    def get_server_and_port(self, /): ...
    def get_url(self, /): ...
    def get_username(self, /): ...
    def hasAuthority(self, /): ...
    def hasPath(self, /): ...
    def hasPort(self, /): ...
    def hasQuery(self, /): ...
    def hasScheme(self, /): ...
    def hasServer(self, /): ...
    def hasUsername(self, /): ...
    def has_authority(self, /): ...
    def has_path(self, /): ...
    def has_port(self, /): ...
    def has_query(self, /): ...
    def has_scheme(self, /): ...
    def has_server(self, /): ...
    def has_username(self, /): ...
    def input(self, object, /): ...
    def isDefaultPort(self, /): ...
    def isSsl(self, /): ...
    def is_default_port(self, /): ...
    def is_ssl(self, /): ...
    def length(self, /): ...
    def output(self, object, /): ...
    path = None
    port = None
    query = None
    def quote(): ...
    def quotePlus(): ...
    def quote_plus(): ...
    scheme = None
    server = None
    server_and_port = None
    def setAuthority(self, object, /): ...
    def setPath(self, object, /): ...
    def setPort(self, object, /): ...
    def setQuery(self, object, /): ...
    def setScheme(self, object, /): ...
    def setServer(self, object, /): ...
    def setServerAndPort(self, object, /): ...
    def setUrl(): ...
    def setUsername(self, object, /): ...
    def set_authority(self, object, /): ...
    def set_path(self, object, /): ...
    def set_port(self, object, /): ...
    def set_query(self, object, /): ...
    def set_scheme(self, object, /): ...
    def set_server(self, object, /): ...
    def set_server_and_port(self, object, /): ...
    def set_url(): ...
    def set_username(self, object, /): ...
    ssl = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unquote(object, /): ...
    def unquotePlus(object, /): ...
    def unquote_plus(object, /): ...
    username = None
class UnalignedLMatrix4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(self, /): ...
    def get_class_type(): ...
    def get_num_components(self, /): ...
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLMatrix4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(self, /): ...
    def get_class_type(): ...
    def get_num_components(self, /): ...
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLMatrix4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(self, /): ...
    def get_class_type(): ...
    def get_num_components(self, /): ...
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLVecBase4:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def fill(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(): ...
    def get_class_type(): ...
    def get_num_components(): ...
    is_int:int = None
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLVecBase4d:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def fill(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(): ...
    def get_class_type(): ...
    def get_num_components(): ...
    is_int:int = None
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLVecBase4f:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def fill(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(): ...
    def get_class_type(): ...
    def get_num_components(): ...
    is_int:int = None
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnalignedLVecBase4i:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def fill(self, object, /): ...
    def getClassType(): ...
    def getNumComponents(): ...
    def get_class_type(): ...
    def get_num_components(): ...
    is_int:int = None
    num_components:int = None
    def set(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UnionBoundingVolume:
    ...
    BTBest:int = None
    BTBox:int = None
    BTDefault:int = None
    BTFastest:int = None
    BTSphere:int = None
    BT_best:int = None
    BT_box:int = None
    BT_default:int = None
    BT_fastest:int = None
    BT_sphere:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    IFAll:int = None
    IFDontUnderstand:int = None
    IFNoIntersection:int = None
    IFPossible:int = None
    IFSome:int = None
    IF_all:int = None
    IF_dont_understand:int = None
    IF_no_intersection:int = None
    IF_possible:int = None
    IF_some:int = None
    def addComponent(self, object, /): ...
    def add_component(self, object, /): ...
    def clearComponents(self, /): ...
    def clear_components(self, /): ...
    components = None
    def contains(): ...
    def extendBy(self, object, /): ...
    def extend_by(self, object, /): ...
    def filterIntersection(self, object, /): ...
    def filter_intersection(self, object, /): ...
    def getApproxCenter(self, /): ...
    def getClassType(): ...
    def getComponent(self, object, /): ...
    def getComponents(self, /): ...
    def getNumComponents(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_approx_center(self, /): ...
    def get_class_type(): ...
    def get_component(self, object, /): ...
    def get_components(self, /): ...
    def get_num_components(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isEmpty(self, /): ...
    def isExactType(self, object, /): ...
    def isInfinite(self, /): ...
    def isOfType(self, object, /): ...
    def is_empty(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_infinite(self, /): ...
    def is_of_type(self, object, /): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setInfinite(self, /): ...
    def set_infinite(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(): ...
    def xform(self, object, /): ...
class UniqueIdAllocator:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def allocate(self, /): ...
    def fractionUsed(self, /): ...
    def fraction_used(self, /): ...
    def free(self, object, /): ...
    def initialReserveId(self, object, /): ...
    def initial_reserve_id(self, object, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class UpdateSeq:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def fresh(): ...
    def getSeq(self, /): ...
    def get_seq(self, /): ...
    def increment(self, /): ...
    def initial(): ...
    def isFresh(self, /): ...
    def isInitial(self, /): ...
    def isOld(self, /): ...
    def isSpecial(self, /): ...
    def is_fresh(self, /): ...
    def is_initial(self, /): ...
    def is_old(self, /): ...
    def is_special(self, /): ...
    def old(): ...
    def output(self, object, /): ...
    seq = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class UserDataAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def append(): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def done(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class UserDataAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class UserVertexSlider:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getModified(): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSlider(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_slider(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setSlider(self, object, /): ...
    def set_slider(self, object, /): ...
    slider = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class UserVertexTransform:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def accumulateMatrix(): ...
    def accumulate_matrix(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getGlobalModified(object, /): ...
    def getMatrix(self, object, /): ...
    def getModified(): ...
    def getName(self, /): ...
    def getNextModified(object, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_global_modified(object, /): ...
    def get_matrix(self, object, /): ...
    def get_modified(): ...
    def get_name(self, /): ...
    def get_next_modified(object, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def multMatrix(): ...
    def mult_matrix(): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setMatrix(self, object, /): ...
    def set_matrix(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class UvScrollNode:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRSpeed(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUSpeed(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def getVSpeed(self, /): ...
    def getWSpeed(self, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_r_speed(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_u_speed(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def get_v_speed(self, /): ...
    def get_w_speed(self, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    prev_transform = None
    python_tags = None
    r_speed = None
    def ref(self, /): ...
    ref_count = None
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setRSpeed(self, object, /): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUSpeed(self, object, /): ...
    def setUnexpectedChange(self, object, /): ...
    def setVSpeed(self, object, /): ...
    def setWSpeed(self, object, /): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_r_speed(self, object, /): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_u_speed(self, object, /): ...
    def set_unexpected_change(self, object, /): ...
    def set_v_speed(self, object, /): ...
    def set_w_speed(self, object, /): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    u_speed = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    v_speed = None
    w_speed = None
    def write(): ...
class VBase2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class VBase2D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class VBase2F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class VBase3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class VBase3D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class VBase3F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class VBase4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class VBase4D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class VBase4F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class Vec2:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Vec2D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Vec2F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getX(self, /): ...
    def getY(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_x(self, /): ...
    def get_y(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def signedAngleDeg(self, object, /): ...
    def signedAngleRad(self, object, /): ...
    def signed_angle_deg(self, object, /): ...
    def signed_angle_rad(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unit_x(): ...
    def unit_y(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    y = None
    def zero(): ...
class Vec3:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Vec3D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Vec3F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def angleDeg(self, object, /): ...
    def angleRad(self, object, /): ...
    def angle_deg(self, object, /): ...
    def angle_rad(self, object, /): ...
    def assign(self, object, /): ...
    def back(): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def cross(self, object, /): ...
    def crossInto(self, object, /): ...
    def cross_into(self, object, /): ...
    def dot(self, object, /): ...
    def down(): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def forward(): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getStandardizedHpr(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXz(self, /): ...
    def getY(self, /): ...
    def getYz(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_standardized_hpr(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xz(self, /): ...
    def get_y(self, /): ...
    def get_yz(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def left(): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def relativeAngleDeg(self, object, /): ...
    def relativeAngleRad(self, object, /): ...
    def relative_angle_deg(self, object, /): ...
    def relative_angle_rad(self, object, /): ...
    def rfu(): ...
    def right(): ...
    def set(): ...
    def setCell(): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    def signedAngleDeg(): ...
    def signedAngleRad(): ...
    def signed_angle_deg(): ...
    def signed_angle_rad(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def up(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xz = None
    y = None
    yz = None
    z = None
    def zero(): ...
class Vec4:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class Vec4D:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class Vec4F:
    ...
    def Ceil(self, /): ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def Floor(self, /): ...
    def Round(self, /): ...
    def addHash(): ...
    def addToCell(): ...
    def addW(self, object, /): ...
    def addX(self, object, /): ...
    def addY(self, object, /): ...
    def addZ(self, object, /): ...
    def add_hash(): ...
    def add_to_cell(): ...
    def add_w(self, object, /): ...
    def add_x(self, object, /): ...
    def add_y(self, object, /): ...
    def add_z(self, object, /): ...
    def almostEqual(): ...
    def almost_equal(): ...
    def assign(self, object, /): ...
    def compareTo(): ...
    def compare_to(): ...
    def componentwiseMult(self, object, /): ...
    def componentwise_mult(self, object, /): ...
    def dot(self, object, /): ...
    def fill(self, object, /): ...
    def fmax(self, object, /): ...
    def fmin(self, object, /): ...
    def getCell(self, object, /): ...
    def getClassType(): ...
    def getHash(): ...
    def getNumComponents(): ...
    def getW(self, /): ...
    def getX(self, /): ...
    def getXy(self, /): ...
    def getXyz(self, /): ...
    def getY(self, /): ...
    def getZ(self, /): ...
    def get_cell(self, object, /): ...
    def get_class_type(): ...
    def get_hash(): ...
    def get_num_components(): ...
    def get_w(self, /): ...
    def get_x(self, /): ...
    def get_xy(self, /): ...
    def get_xyz(self, /): ...
    def get_y(self, /): ...
    def get_z(self, /): ...
    def isNan(self, /): ...
    is_int:int = None
    def is_nan(self, /): ...
    def length(self, /): ...
    def lengthSquared(self, /): ...
    def length_squared(self, /): ...
    def normalize(self, /): ...
    def normalized(self, /): ...
    num_components:int = None
    def output(self, object, /): ...
    def project(self, object, /): ...
    def readDatagram(self, object, /): ...
    def readDatagramFixed(self, object, /): ...
    def read_datagram(self, object, /): ...
    def read_datagram_fixed(self, object, /): ...
    def set(): ...
    def setCell(): ...
    def setW(self, object, /): ...
    def setX(self, object, /): ...
    def setY(self, object, /): ...
    def setZ(self, object, /): ...
    def set_cell(): ...
    def set_w(self, object, /): ...
    def set_x(self, object, /): ...
    def set_y(self, object, /): ...
    def set_z(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unitW(): ...
    def unitX(): ...
    def unitY(): ...
    def unitZ(): ...
    def unit_w(): ...
    def unit_x(): ...
    def unit_y(): ...
    def unit_z(): ...
    def writeDatagram(self, object, /): ...
    def writeDatagramFixed(self, object, /): ...
    def write_datagram(self, object, /): ...
    def write_datagram_fixed(self, object, /): ...
    x = None
    xy = None
    xyz = None
    y = None
    z = None
    def zero(): ...
class VertexBufferContext:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    active = None
    def assign(self, object, /): ...
    def changedSize(self, object, /): ...
    def changedUsageHint(self, object, /): ...
    def changed_size(self, object, /): ...
    def changed_usage_hint(self, object, /): ...
    data_size_bytes = None
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def getActive(self, /): ...
    def getClassType(): ...
    def getData(self, /): ...
    def getDataSizeBytes(self, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getModified(self, /): ...
    def getNumFrames(self, /): ...
    def getNumInactiveFrames(self, /): ...
    def getResident(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_active(self, /): ...
    def get_class_type(): ...
    def get_data(self, /): ...
    def get_data_size_bytes(self, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_modified(self, /): ...
    def get_num_frames(self, /): ...
    def get_num_inactive_frames(self, /): ...
    def get_resident(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    modified = None
    object = None
    def output(self, object, /): ...
    resident = None
    def setLruSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def upcastToAdaptiveLruPage(self, /): ...
    def upcastToBufferContext(self, /): ...
    def upcastToSavedContext(self, /): ...
    def upcast_to_AdaptiveLruPage(self, /): ...
    def upcast_to_BufferContext(self, /): ...
    def upcast_to_SavedContext(self, /): ...
    def wasModified(self, object, /): ...
    def was_modified(self, object, /): ...
    def write(): ...
class VertexDataBlock:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def free(self, /): ...
    def getAllocator(self, /): ...
    def getClassType(): ...
    def getMaxSize(self, /): ...
    def getNextBlock(self, /): ...
    def getPage(self, /): ...
    def getRefCount(self, /): ...
    def getSize(self, /): ...
    def getStart(self, /): ...
    def get_allocator(self, /): ...
    def get_class_type(): ...
    def get_max_size(self, /): ...
    def get_next_block(self, /): ...
    def get_page(self, /): ...
    def get_ref_count(self, /): ...
    def get_size(self, /): ...
    def get_start(self, /): ...
    def isFree(self, /): ...
    def is_free(self, /): ...
    def output(self, object, /): ...
    def realloc(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToSimpleAllocatorBlock(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_SimpleAllocatorBlock(self, /): ...
class VertexDataBook:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def alloc(self, object, /): ...
    def countAllocatedSize(): ...
    def countTotalPageSize(): ...
    def count_allocated_size(): ...
    def count_total_page_size(): ...
    def getNumPages(self, /): ...
    def get_num_pages(self, /): ...
    def saveToDisk(self, /): ...
    def save_to_disk(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class VertexDataPage:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    RCCompressed:int = None
    RCDisk:int = None
    RCEndOfList:int = None
    RCResident:int = None
    RC_compressed:int = None
    RC_disk:int = None
    RC_end_of_list:int = None
    RC_resident:int = None
    def alloc(self, object, /): ...
    def assign(self, object, /): ...
    def dequeueLru(self, /): ...
    def dequeue_lru(self, /): ...
    def enqueueLru(self, object, /): ...
    def enqueue_lru(self, object, /): ...
    def evictLru(self, /): ...
    def evict_lru(self, /): ...
    def flushThreads(): ...
    def flush_threads(): ...
    def getBook(self, /): ...
    def getClassType(): ...
    def getContiguous(self, /): ...
    def getFirstBlock(self, /): ...
    def getGlobalLru(object, /): ...
    def getLru(self, /): ...
    def getLruSize(self, /): ...
    def getMaxSize(self, /): ...
    def getNumPendingReads(): ...
    def getNumPendingWrites(): ...
    def getNumThreads(): ...
    def getPendingLru(): ...
    def getPendingRamClass(self, /): ...
    def getRamClass(self, /): ...
    def getSaveFile(): ...
    def getTotalSize(self, /): ...
    def get_book(self, /): ...
    def get_class_type(): ...
    def get_contiguous(self, /): ...
    def get_first_block(self, /): ...
    def get_global_lru(object, /): ...
    def get_lru(self, /): ...
    def get_lru_size(self, /): ...
    def get_max_size(self, /): ...
    def get_num_pending_reads(): ...
    def get_num_pending_writes(): ...
    def get_num_threads(): ...
    def get_pending_lru(): ...
    def get_pending_ram_class(self, /): ...
    def get_ram_class(self, /): ...
    def get_save_file(): ...
    def get_total_size(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def markUsedLru(): ...
    def mark_used_lru(): ...
    def output(self, object, /): ...
    def requestResident(self, /): ...
    def request_resident(self, /): ...
    def saveToDisk(self, /): ...
    save_file = None
    def save_to_disk(self, /): ...
    def setLruSize(self, object, /): ...
    def setMaxSize(self, object, /): ...
    def set_lru_size(self, object, /): ...
    def set_max_size(self, object, /): ...
    def stopThreads(): ...
    def stop_threads(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToSimpleAllocator(self, /): ...
    def upcastToSimpleLruPage(self, /): ...
    def upcast_to_SimpleAllocator(self, /): ...
    def upcast_to_SimpleLruPage(self, /): ...
    def write(): ...
class VertexDataSaveFile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def alloc(): ...
    def getContiguous(self, /): ...
    def getFirstBlock(self, /): ...
    def getMaxSize(self, /): ...
    def getTotalFileSize(self, /): ...
    def getTotalSize(self, /): ...
    def getUsedFileSize(self, /): ...
    def get_contiguous(self, /): ...
    def get_first_block(self, /): ...
    def get_max_size(self, /): ...
    def get_total_file_size(self, /): ...
    def get_total_size(self, /): ...
    def get_used_file_size(self, /): ...
    def isEmpty(self, /): ...
    def isValid(self, /): ...
    def is_empty(self, /): ...
    def is_valid(self, /): ...
    def output(self, object, /): ...
    def setMaxSize(self, object, /): ...
    def set_max_size(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def write(self, object, /): ...
class VertexSlider:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getModified(): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getSlider(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_modified(): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_slider(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    name = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    slider = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class VertexTransform:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def accumulateMatrix(): ...
    def accumulate_matrix(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getGlobalModified(object, /): ...
    def getMatrix(self, object, /): ...
    def getModified(): ...
    def getNextModified(object, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_global_modified(object, /): ...
    def get_matrix(self, object, /): ...
    def get_modified(): ...
    def get_next_modified(object, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    modified = None
    def multMatrix(): ...
    def mult_matrix(): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def write(): ...
class VideoTexture:
    ...
    CMDefault:int = None
    CMDxt1:int = None
    CMDxt2:int = None
    CMDxt3:int = None
    CMDxt4:int = None
    CMDxt5:int = None
    CMEac:int = None
    CMEtc1:int = None
    CMEtc2:int = None
    CMFxt1:int = None
    CMOff:int = None
    CMOn:int = None
    CMPvr12bpp:int = None
    CMPvr14bpp:int = None
    CMRgtc:int = None
    CM_default:int = None
    CM_dxt1:int = None
    CM_dxt2:int = None
    CM_dxt3:int = None
    CM_dxt4:int = None
    CM_dxt5:int = None
    CM_eac:int = None
    CM_etc1:int = None
    CM_etc2:int = None
    CM_fxt1:int = None
    CM_off:int = None
    CM_on:int = None
    CM_pvr1_2bpp:int = None
    CM_pvr1_4bpp:int = None
    CM_rgtc:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FAlpha:int = None
    FBlue:int = None
    FColorIndex:int = None
    FDepthComponent:int = None
    FDepthComponent16:int = None
    FDepthComponent24:int = None
    FDepthComponent32:int = None
    FDepthStencil:int = None
    FGreen:int = None
    FLuminance:int = None
    FLuminanceAlpha:int = None
    FLuminanceAlphamask:int = None
    FR11G11B10:int = None
    FR16:int = None
    FR16i:int = None
    FR32:int = None
    FR32i:int = None
    FR8i:int = None
    FRed:int = None
    FRg:int = None
    FRg16:int = None
    FRg16i:int = None
    FRg32:int = None
    FRg32i:int = None
    FRg8i:int = None
    FRgb:int = None
    FRgb10A2:int = None
    FRgb12:int = None
    FRgb16:int = None
    FRgb16i:int = None
    FRgb32:int = None
    FRgb32i:int = None
    FRgb332:int = None
    FRgb5:int = None
    FRgb8:int = None
    FRgb8i:int = None
    FRgb9E5:int = None
    FRgba:int = None
    FRgba12:int = None
    FRgba16:int = None
    FRgba16i:int = None
    FRgba32:int = None
    FRgba32i:int = None
    FRgba4:int = None
    FRgba5:int = None
    FRgba8:int = None
    FRgba8i:int = None
    FRgbm:int = None
    FSluminance:int = None
    FSluminanceAlpha:int = None
    FSrgb:int = None
    FSrgbAlpha:int = None
    FTDefault:int = None
    FTInvalid:int = None
    FTLinear:int = None
    FTLinearMipmapLinear:int = None
    FTLinearMipmapNearest:int = None
    FTNearest:int = None
    FTNearestMipmapLinear:int = None
    FTNearestMipmapNearest:int = None
    FTShadow:int = None
    FT_default:int = None
    FT_invalid:int = None
    FT_linear:int = None
    FT_linear_mipmap_linear:int = None
    FT_linear_mipmap_nearest:int = None
    FT_nearest:int = None
    FT_nearest_mipmap_linear:int = None
    FT_nearest_mipmap_nearest:int = None
    FT_shadow:int = None
    F_alpha:int = None
    F_blue:int = None
    F_color_index:int = None
    F_depth_component:int = None
    F_depth_component16:int = None
    F_depth_component24:int = None
    F_depth_component32:int = None
    F_depth_stencil:int = None
    F_green:int = None
    F_luminance:int = None
    F_luminance_alpha:int = None
    F_luminance_alphamask:int = None
    F_r11_g11_b10:int = None
    F_r16:int = None
    F_r16i:int = None
    F_r32:int = None
    F_r32i:int = None
    F_r8i:int = None
    F_red:int = None
    F_rg:int = None
    F_rg16:int = None
    F_rg16i:int = None
    F_rg32:int = None
    F_rg32i:int = None
    F_rg8i:int = None
    F_rgb:int = None
    F_rgb10_a2:int = None
    F_rgb12:int = None
    F_rgb16:int = None
    F_rgb16i:int = None
    F_rgb32:int = None
    F_rgb32i:int = None
    F_rgb332:int = None
    F_rgb5:int = None
    F_rgb8:int = None
    F_rgb8i:int = None
    F_rgb9_e5:int = None
    F_rgba:int = None
    F_rgba12:int = None
    F_rgba16:int = None
    F_rgba16i:int = None
    F_rgba32:int = None
    F_rgba32i:int = None
    F_rgba4:int = None
    F_rgba5:int = None
    F_rgba8:int = None
    F_rgba8i:int = None
    F_rgbm:int = None
    F_sluminance:int = None
    F_sluminance_alpha:int = None
    F_srgb:int = None
    F_srgb_alpha:int = None
    QLBest:int = None
    QLDefault:int = None
    QLFastest:int = None
    QLNormal:int = None
    QL_best:int = None
    QL_default:int = None
    QL_fastest:int = None
    QL_normal:int = None
    TByte:int = None
    TFloat:int = None
    THalfFloat:int = None
    TInt:int = None
    TShort:int = None
    TT1dTexture:int = None
    TT1dTextureArray:int = None
    TT2dTexture:int = None
    TT2dTextureArray:int = None
    TT3dTexture:int = None
    TTBufferTexture:int = None
    TTCubeMap:int = None
    TTCubeMapArray:int = None
    TT_1d_texture:int = None
    TT_1d_texture_array:int = None
    TT_2d_texture:int = None
    TT_2d_texture_array:int = None
    TT_3d_texture:int = None
    TT_buffer_texture:int = None
    TT_cube_map:int = None
    TT_cube_map_array:int = None
    TUnsignedByte:int = None
    TUnsignedInt:int = None
    TUnsignedInt248:int = None
    TUnsignedShort:int = None
    T_byte:int = None
    T_float:int = None
    T_half_float:int = None
    T_int:int = None
    T_short:int = None
    T_unsigned_byte:int = None
    T_unsigned_int:int = None
    T_unsigned_int_24_8:int = None
    T_unsigned_short:int = None
    WMBorderColor:int = None
    WMClamp:int = None
    WMInvalid:int = None
    WMMirror:int = None
    WMMirrorOnce:int = None
    WMRepeat:int = None
    WM_border_color:int = None
    WM_clamp:int = None
    WM_invalid:int = None
    WM_mirror:int = None
    WM_mirror_once:int = None
    WM_repeat:int = None
    alpha_filename = None
    alpha_fullpath = None
    anisotropic_degree = None
    auto_texture_scale = None
    aux_data = None
    border_color = None
    cacheable = None
    def clear(self, /): ...
    def clearAlphaFilename(self, /): ...
    def clearAlphaFullpath(self, /): ...
    def clearAuxData(self, object, /): ...
    def clearClearColor(self, /): ...
    def clearFilename(self, /): ...
    def clearFullpath(self, /): ...
    def clearImage(self, /): ...
    def clearName(self, /): ...
    def clearRamImage(self, /): ...
    def clearRamMipmapImage(self, object, /): ...
    def clearRamMipmapImages(self, /): ...
    def clearSimpleRamImage(self, /): ...
    def clear_alpha_filename(self, /): ...
    def clear_alpha_fullpath(self, /): ...
    def clear_aux_data(self, object, /): ...
    def clear_clear_color(self, /): ...
    clear_color = None
    def clear_filename(self, /): ...
    def clear_fullpath(self, /): ...
    def clear_image(self, /): ...
    def clear_name(self, /): ...
    def clear_ram_image(self, /): ...
    def clear_ram_mipmap_image(self, object, /): ...
    def clear_ram_mipmap_images(self, /): ...
    def clear_simple_ram_image(self, /): ...
    component_type = None
    component_width = None
    def compressRamImage(): ...
    def compress_ram_image(): ...
    compression = None
    def considerRescale(): ...
    def consider_rescale(): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    default_sampler = None
    def downToPower2(object, /): ...
    def down_to_power_2(object, /): ...
    effective_anisotropic_degree = None
    effective_magfilter = None
    effective_minfilter = None
    effective_quality_level = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def estimateTextureMemory(self, /): ...
    def estimate_texture_memory(self, /): ...
    expected_num_mipmap_levels = None
    expected_ram_image_size = None
    expected_ram_page_size = None
    filename = None
    def fillin(): ...
    format = None
    def formatComponentType(object, /): ...
    def formatCompressionMode(object, /): ...
    def formatFormat(object, /): ...
    def formatQualityLevel(object, /): ...
    def formatTextureType(object, /): ...
    def format_component_type(object, /): ...
    def format_compression_mode(object, /): ...
    def format_format(object, /): ...
    def format_quality_level(object, /): ...
    def format_texture_type(object, /): ...
    frac = None
    frame = None
    frame_rate = None
    full_fframe = None
    full_frame = None
    fullpath = None
    def generateAlphaScaleMap(self, /): ...
    def generateNormalizationCubeMap(self, object, /): ...
    def generateRamMipmapImages(self, /): ...
    def generateSimpleRamImage(self, /): ...
    def generate_alpha_scale_map(self, /): ...
    def generate_normalization_cube_map(self, object, /): ...
    def generate_ram_mipmap_images(self, /): ...
    def generate_simple_ram_image(self, /): ...
    def getActive(self, object, /): ...
    def getAlphaFilename(self, /): ...
    def getAlphaFullpath(self, /): ...
    def getAnisotropicDegree(self, /): ...
    def getAutoTextureScale(self, /): ...
    def getAuxData(self, object, /): ...
    def getBamModified(self, /): ...
    def getBorderColor(self, /): ...
    def getClassType(): ...
    def getClearColor(self, /): ...
    def getClearData(self, /): ...
    def getComponentType(self, /): ...
    def getComponentWidth(self, /): ...
    def getCompression(self, /): ...
    def getDataSizeBytes(self, object, /): ...
    def getDefaultSampler(self, /): ...
    def getEffectiveAnisotropicDegree(self, /): ...
    def getEffectiveMagfilter(self, /): ...
    def getEffectiveMinfilter(self, /): ...
    def getEffectiveQualityLevel(self, /): ...
    def getExpectedMipmapNumPages(self, object, /): ...
    def getExpectedMipmapXSize(self, object, /): ...
    def getExpectedMipmapYSize(self, object, /): ...
    def getExpectedMipmapZSize(self, object, /): ...
    def getExpectedNumMipmapLevels(self, /): ...
    def getExpectedRamImageSize(self, /): ...
    def getExpectedRamMipmapImageSize(self, object, /): ...
    def getExpectedRamMipmapPageSize(self, object, /): ...
    def getExpectedRamMipmapViewSize(self, object, /): ...
    def getExpectedRamPageSize(self, /): ...
    def getFilename(self, /): ...
    def getFormat(self, /): ...
    def getFrac(self, /): ...
    def getFrame(self, /): ...
    def getFrameRate(self, /): ...
    def getFullFframe(self, /): ...
    def getFullFrame(self, /): ...
    def getFullpath(self, /): ...
    def getImageModified(self, /): ...
    def getKeepRamImage(self, /): ...
    def getLoadedFromImage(self, /): ...
    def getLoadedFromTxo(self, /): ...
    def getMagfilter(self, /): ...
    def getMatchFramebufferFormat(self, /): ...
    def getMinfilter(self, /): ...
    def getName(self, /): ...
    def getNextFrame(self, /): ...
    def getNumComponents(self, /): ...
    def getNumFrames(self, /): ...
    def getNumLoadableRamMipmapImages(self, /): ...
    def getNumPages(self, /): ...
    def getNumRamMipmapImages(self, /): ...
    def getNumViews(self, /): ...
    def getOrigFileXSize(self, /): ...
    def getOrigFileYSize(self, /): ...
    def getOrigFileZSize(self, /): ...
    def getPadXSize(self, /): ...
    def getPadYSize(self, /): ...
    def getPadZSize(self, /): ...
    def getPlayRate(self, /): ...
    def getPostLoadStoreCache(self, /): ...
    def getPropertiesModified(self, /): ...
    def getQualityLevel(self, /): ...
    def getRamImage(self, /): ...
    def getRamImageAs(self, object, /): ...
    def getRamImageCompression(self, /): ...
    def getRamImageSize(self, /): ...
    def getRamMipmapImage(self, object, /): ...
    def getRamMipmapImageSize(self, object, /): ...
    def getRamMipmapPageSize(self, object, /): ...
    def getRamMipmapViewSize(self, object, /): ...
    def getRamPageSize(self, /): ...
    def getRamViewSize(self, /): ...
    def getRefCount(self, /): ...
    def getRenderToTexture(self, /): ...
    def getResident(self, object, /): ...
    def getSimpleImageModified(self, /): ...
    def getSimpleRamImage(self, /): ...
    def getSimpleRamImageSize(self, /): ...
    def getSimpleXSize(self, /): ...
    def getSimpleYSize(self, /): ...
    def getTexScale(self, /): ...
    def getTextureType(self, /): ...
    def getTexturesPower2(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUncompressedRamImage(self, /): ...
    def getUsageHint(self, /): ...
    def getVideoHeight(self, /): ...
    def getVideoWidth(self, /): ...
    def getWrapU(self, /): ...
    def getWrapV(self, /): ...
    def getWrapW(self, /): ...
    def getXSize(self, /): ...
    def getYSize(self, /): ...
    def getZSize(self, /): ...
    def get_active(self, object, /): ...
    def get_alpha_filename(self, /): ...
    def get_alpha_fullpath(self, /): ...
    def get_anisotropic_degree(self, /): ...
    def get_auto_texture_scale(self, /): ...
    def get_aux_data(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_border_color(self, /): ...
    def get_class_type(): ...
    def get_clear_color(self, /): ...
    def get_clear_data(self, /): ...
    def get_component_type(self, /): ...
    def get_component_width(self, /): ...
    def get_compression(self, /): ...
    def get_data_size_bytes(self, object, /): ...
    def get_default_sampler(self, /): ...
    def get_effective_anisotropic_degree(self, /): ...
    def get_effective_magfilter(self, /): ...
    def get_effective_minfilter(self, /): ...
    def get_effective_quality_level(self, /): ...
    def get_expected_mipmap_num_pages(self, object, /): ...
    def get_expected_mipmap_x_size(self, object, /): ...
    def get_expected_mipmap_y_size(self, object, /): ...
    def get_expected_mipmap_z_size(self, object, /): ...
    def get_expected_num_mipmap_levels(self, /): ...
    def get_expected_ram_image_size(self, /): ...
    def get_expected_ram_mipmap_image_size(self, object, /): ...
    def get_expected_ram_mipmap_page_size(self, object, /): ...
    def get_expected_ram_mipmap_view_size(self, object, /): ...
    def get_expected_ram_page_size(self, /): ...
    def get_filename(self, /): ...
    def get_format(self, /): ...
    def get_frac(self, /): ...
    def get_frame(self, /): ...
    def get_frame_rate(self, /): ...
    def get_full_fframe(self, /): ...
    def get_full_frame(self, /): ...
    def get_fullpath(self, /): ...
    def get_image_modified(self, /): ...
    def get_keep_ram_image(self, /): ...
    def get_loaded_from_image(self, /): ...
    def get_loaded_from_txo(self, /): ...
    def get_magfilter(self, /): ...
    def get_match_framebuffer_format(self, /): ...
    def get_minfilter(self, /): ...
    def get_name(self, /): ...
    def get_next_frame(self, /): ...
    def get_num_components(self, /): ...
    def get_num_frames(self, /): ...
    def get_num_loadable_ram_mipmap_images(self, /): ...
    def get_num_pages(self, /): ...
    def get_num_ram_mipmap_images(self, /): ...
    def get_num_views(self, /): ...
    def get_orig_file_x_size(self, /): ...
    def get_orig_file_y_size(self, /): ...
    def get_orig_file_z_size(self, /): ...
    def get_pad_x_size(self, /): ...
    def get_pad_y_size(self, /): ...
    def get_pad_z_size(self, /): ...
    def get_play_rate(self, /): ...
    def get_post_load_store_cache(self, /): ...
    def get_properties_modified(self, /): ...
    def get_quality_level(self, /): ...
    def get_ram_image(self, /): ...
    def get_ram_image_as(self, object, /): ...
    def get_ram_image_compression(self, /): ...
    def get_ram_image_size(self, /): ...
    def get_ram_mipmap_image(self, object, /): ...
    def get_ram_mipmap_image_size(self, object, /): ...
    def get_ram_mipmap_page_size(self, object, /): ...
    def get_ram_mipmap_view_size(self, object, /): ...
    def get_ram_page_size(self, /): ...
    def get_ram_view_size(self, /): ...
    def get_ref_count(self, /): ...
    def get_render_to_texture(self, /): ...
    def get_resident(self, object, /): ...
    def get_simple_image_modified(self, /): ...
    def get_simple_ram_image(self, /): ...
    def get_simple_ram_image_size(self, /): ...
    def get_simple_x_size(self, /): ...
    def get_simple_y_size(self, /): ...
    def get_tex_scale(self, /): ...
    def get_texture_type(self, /): ...
    def get_textures_power_2(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_uncompressed_ram_image(self, /): ...
    def get_usage_hint(self, /): ...
    def get_video_height(self, /): ...
    def get_video_width(self, /): ...
    def get_wrap_u(self, /): ...
    def get_wrap_v(self, /): ...
    def get_wrap_w(self, /): ...
    def get_x_size(self, /): ...
    def get_y_size(self, /): ...
    def get_z_size(self, /): ...
    def hasAllRamMipmapImages(self, /): ...
    def hasAlphaFilename(self, /): ...
    def hasAlphaFullpath(self, /): ...
    def hasAutoTextureScale(self, /): ...
    def hasClearColor(self, /): ...
    def hasCompression(self, /): ...
    def hasFilename(self, /): ...
    def hasFullpath(self, /): ...
    def hasName(self, /): ...
    def hasRamImage(self, /): ...
    def hasRamMipmapImage(self, object, /): ...
    def hasSimpleRamImage(self, /): ...
    def hasTexturesPower2(): ...
    def hasUncompressedRamImage(self, /): ...
    def has_all_ram_mipmap_images(self, /): ...
    def has_alpha_filename(self, /): ...
    def has_alpha_fullpath(self, /): ...
    def has_auto_texture_scale(self, /): ...
    def has_clear_color(self, /): ...
    def has_compression(self, /): ...
    def has_filename(self, /): ...
    def has_fullpath(self, /): ...
    def has_name(self, /): ...
    def has_ram_image(self, /): ...
    def has_ram_mipmap_image(self, object, /): ...
    def has_simple_ram_image(self, /): ...
    def has_textures_power_2(): ...
    def has_uncompressed_ram_image(self, /): ...
    image_modified = None
    def isCacheable(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isPlaying(self, /): ...
    def isPrepared(self, object, /): ...
    def is_cacheable(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_playing(self, /): ...
    def is_prepared(self, object, /): ...
    keep_ram_image = None
    def load(): ...
    def loadRelated(self, object, /): ...
    def loadSubImage(): ...
    def load_related(self, object, /): ...
    def load_sub_image(): ...
    loaded_from_image = None
    loaded_from_txo = None
    def loop(): ...
    magfilter = None
    def makeCopy(self, /): ...
    def makeFromTxo(): ...
    def makeRamImage(self, /): ...
    def makeRamMipmapImage(self, object, /): ...
    def make_copy(self, /): ...
    def make_from_txo(): ...
    def make_ram_image(self, /): ...
    def make_ram_mipmap_image(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    match_framebuffer_format = None
    def mightHaveRamImage(self, /): ...
    def might_have_ram_image(self, /): ...
    minfilter = None
    def modifyRamImage(self, /): ...
    def modifyRamMipmapImage(self, object, /): ...
    def modifySimpleRamImage(self, /): ...
    def modify_ram_image(self, /): ...
    def modify_ram_mipmap_image(self, object, /): ...
    def modify_simple_ram_image(self, /): ...
    name = None
    def newSimpleRamImage(): ...
    def new_simple_ram_image(): ...
    next_frame = None
    num_components = None
    num_frames = None
    num_loadable_ram_mipmap_images = None
    num_pages = None
    num_ram_mipmap_images = None
    num_views = None
    orig_file_x_size = None
    orig_file_y_size = None
    orig_file_z_size = None
    def output(self, object, /): ...
    def peek(self, /): ...
    def pingpong(): ...
    def play(): ...
    play_rate = None
    playing = None
    def pose(self, object, /): ...
    post_load_store_cache = None
    def prepare(self, object, /): ...
    def prepareNow(): ...
    def prepare_now(): ...
    properties_modified = None
    quality_level = None
    ram_image_compression = None
    ram_image_size = None
    ram_page_size = None
    ram_view_size = None
    def read(): ...
    def readDds(): ...
    def readKtx(): ...
    def readTxo(): ...
    def read_dds(): ...
    def read_ktx(): ...
    def read_txo(): ...
    def ref(self, /): ...
    ref_count = None
    def release(self, object, /): ...
    def releaseAll(self, /): ...
    def release_all(self, /): ...
    def reload(self, /): ...
    render_to_texture = None
    def rescaleTexture(self, /): ...
    def rescale_texture(self, /): ...
    def setAlphaFilename(self, object, /): ...
    def setAlphaFullpath(self, object, /): ...
    def setAnisotropicDegree(self, object, /): ...
    def setAutoTextureScale(self, object, /): ...
    def setAuxData(): ...
    def setBorderColor(self, object, /): ...
    def setClearColor(self, object, /): ...
    def setComponentType(self, object, /): ...
    def setCompression(self, object, /): ...
    def setDefaultSampler(self, object, /): ...
    def setFilename(self, object, /): ...
    def setFormat(self, object, /): ...
    def setFullpath(self, object, /): ...
    def setKeepRamImage(self, object, /): ...
    def setLoadedFromImage(): ...
    def setLoadedFromTxo(): ...
    def setMagfilter(self, object, /): ...
    def setMatchFramebufferFormat(self, object, /): ...
    def setMinfilter(self, object, /): ...
    def setName(self, object, /): ...
    def setNumViews(self, object, /): ...
    def setOrigFileSize(): ...
    def setPadSize(): ...
    def setPlayRate(self, object, /): ...
    def setPostLoadStoreCache(self, object, /): ...
    def setQualityLevel(self, object, /): ...
    def setRamImage(): ...
    def setRamImageAs(): ...
    def setRamMipmapImage(): ...
    def setRamMipmapPointerFromInt(): ...
    def setRenderToTexture(self, object, /): ...
    def setSimpleRamImage(): ...
    def setSizePadded(): ...
    def setTexturesPower2(object, /): ...
    def setWrapU(self, object, /): ...
    def setWrapV(self, object, /): ...
    def setWrapW(self, object, /): ...
    def setXSize(self, object, /): ...
    def setYSize(self, object, /): ...
    def setZSize(self, object, /): ...
    def set_alpha_filename(self, object, /): ...
    def set_alpha_fullpath(self, object, /): ...
    def set_anisotropic_degree(self, object, /): ...
    def set_auto_texture_scale(self, object, /): ...
    def set_aux_data(): ...
    def set_border_color(self, object, /): ...
    def set_clear_color(self, object, /): ...
    def set_component_type(self, object, /): ...
    def set_compression(self, object, /): ...
    def set_default_sampler(self, object, /): ...
    def set_filename(self, object, /): ...
    def set_format(self, object, /): ...
    def set_fullpath(self, object, /): ...
    def set_keep_ram_image(self, object, /): ...
    def set_loaded_from_image(): ...
    def set_loaded_from_txo(): ...
    def set_magfilter(self, object, /): ...
    def set_match_framebuffer_format(self, object, /): ...
    def set_minfilter(self, object, /): ...
    def set_name(self, object, /): ...
    def set_num_views(self, object, /): ...
    def set_orig_file_size(): ...
    def set_pad_size(): ...
    def set_play_rate(self, object, /): ...
    def set_post_load_store_cache(self, object, /): ...
    def set_quality_level(self, object, /): ...
    def set_ram_image(): ...
    def set_ram_image_as(): ...
    def set_ram_mipmap_image(): ...
    def set_ram_mipmap_pointer_from_int(): ...
    def set_render_to_texture(self, object, /): ...
    def set_simple_ram_image(): ...
    def set_size_padded(): ...
    def set_textures_power_2(object, /): ...
    def set_wrap_u(self, object, /): ...
    def set_wrap_v(self, object, /): ...
    def set_wrap_w(self, object, /): ...
    def set_x_size(self, object, /): ...
    def set_y_size(self, object, /): ...
    def set_z_size(self, object, /): ...
    def setup1dTexture(): ...
    def setup2dTexture(): ...
    def setup2dTextureArray(): ...
    def setup3dTexture(): ...
    def setupBufferTexture(): ...
    def setupCubeMap(): ...
    def setupCubeMapArray(): ...
    def setupTexture(): ...
    def setup_1d_texture(): ...
    def setup_2d_texture(): ...
    def setup_2d_texture_array(): ...
    def setup_3d_texture(): ...
    def setup_buffer_texture(): ...
    def setup_cube_map(): ...
    def setup_cube_map_array(): ...
    def setup_texture(): ...
    simple_image_modified = None
    simple_ram_image = None
    simple_x_size = None
    simple_y_size = None
    def stop(self, /): ...
    def store(): ...
    def stringComponentType(object, /): ...
    def stringCompressionMode(object, /): ...
    def stringFormat(object, /): ...
    def stringQualityLevel(object, /): ...
    def stringTextureType(object, /): ...
    def string_component_type(object, /): ...
    def string_compression_mode(object, /): ...
    def string_format(object, /): ...
    def string_quality_level(object, /): ...
    def string_texture_type(object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    texture_type = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def uncompressRamImage(self, /): ...
    def uncompress_ram_image(self, /): ...
    def unref(self, /): ...
    def upToPower2(object, /): ...
    def up_to_power_2(object, /): ...
    def upcastToAnimInterface(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTexture(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_AnimInterface(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_Texture(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    usage_hint = None
    def usesMipmaps(self, /): ...
    def uses_mipmaps(self, /): ...
    video_height = None
    video_width = None
    def wasImageModified(self, object, /): ...
    def was_image_modified(self, object, /): ...
    wrap_u = None
    wrap_v = None
    wrap_w = None
    def write(): ...
    def writeTxo(): ...
    def write_txo(): ...
    x_size = None
    y_size = None
    z_size = None
class VirtualFile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def closeReadFile(self, object, /): ...
    def closeReadWriteFile(self, object, /): ...
    def closeWriteFile(self, object, /): ...
    def close_read_file(self, object, /): ...
    def close_read_write_file(self, object, /): ...
    def close_write_file(self, object, /): ...
    def copyFile(self, object, /): ...
    def copy_file(self, object, /): ...
    def deleteFile(self, /): ...
    def delete_file(self, /): ...
    def getClassType(): ...
    def getFileSize(): ...
    def getFileSystem(self, /): ...
    def getFilename(self, /): ...
    def getOriginalFilename(self, /): ...
    def getRefCount(self, /): ...
    def getSystemInfo(self, object, /): ...
    def getTimestamp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_size(): ...
    def get_file_system(self, /): ...
    def get_filename(self, /): ...
    def get_original_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_system_info(self, object, /): ...
    def get_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasFile(self, /): ...
    def has_file(self, /): ...
    def isDirectory(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegularFile(self, /): ...
    def isWritable(self, /): ...
    def is_directory(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_regular_file(self, /): ...
    def is_writable(self, /): ...
    def ls(): ...
    def lsAll(): ...
    def ls_all(): ...
    def openAppendFile(self, /): ...
    def openReadAppendFile(self, /): ...
    def openReadFile(self, object, /): ...
    def openReadWriteFile(self, object, /): ...
    def openWriteFile(): ...
    def open_append_file(self, /): ...
    def open_read_append_file(self, /): ...
    def open_read_file(self, object, /): ...
    def open_read_write_file(self, object, /): ...
    def open_write_file(): ...
    def output(self, object, /): ...
    def readFile(self, object, /): ...
    def read_file(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def renameFile(self, object, /): ...
    def rename_file(self, object, /): ...
    def scanDirectory(self, /): ...
    def scan_directory(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wasReadSuccessful(self, /): ...
    def was_read_successful(self, /): ...
    def writeFile(): ...
    def write_file(): ...
class VirtualFileComposite:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def closeReadFile(self, object, /): ...
    def closeReadWriteFile(self, object, /): ...
    def closeWriteFile(self, object, /): ...
    def close_read_file(self, object, /): ...
    def close_read_write_file(self, object, /): ...
    def close_write_file(self, object, /): ...
    def copyFile(self, object, /): ...
    def copy_file(self, object, /): ...
    def deleteFile(self, /): ...
    def delete_file(self, /): ...
    def getClassType(): ...
    def getFileSize(): ...
    def getFileSystem(self, /): ...
    def getFilename(self, /): ...
    def getOriginalFilename(self, /): ...
    def getRefCount(self, /): ...
    def getSystemInfo(self, object, /): ...
    def getTimestamp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_size(): ...
    def get_file_system(self, /): ...
    def get_filename(self, /): ...
    def get_original_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_system_info(self, object, /): ...
    def get_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasFile(self, /): ...
    def has_file(self, /): ...
    def isDirectory(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegularFile(self, /): ...
    def isWritable(self, /): ...
    def is_directory(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_regular_file(self, /): ...
    def is_writable(self, /): ...
    def ls(): ...
    def lsAll(): ...
    def ls_all(): ...
    def openAppendFile(self, /): ...
    def openReadAppendFile(self, /): ...
    def openReadFile(self, object, /): ...
    def openReadWriteFile(self, object, /): ...
    def openWriteFile(): ...
    def open_append_file(self, /): ...
    def open_read_append_file(self, /): ...
    def open_read_file(self, object, /): ...
    def open_read_write_file(self, object, /): ...
    def open_write_file(): ...
    def output(self, object, /): ...
    def readFile(self, object, /): ...
    def read_file(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def renameFile(self, object, /): ...
    def rename_file(self, object, /): ...
    def scanDirectory(self, /): ...
    def scan_directory(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wasReadSuccessful(self, /): ...
    def was_read_successful(self, /): ...
    def writeFile(): ...
    def write_file(): ...
class VirtualFileHTTP:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def closeReadFile(self, object, /): ...
    def closeReadWriteFile(self, object, /): ...
    def closeWriteFile(self, object, /): ...
    def close_read_file(self, object, /): ...
    def close_read_write_file(self, object, /): ...
    def close_write_file(self, object, /): ...
    def copyFile(self, object, /): ...
    def copy_file(self, object, /): ...
    def deleteFile(self, /): ...
    def delete_file(self, /): ...
    def getClassType(): ...
    def getFileSize(): ...
    def getFileSystem(self, /): ...
    def getFilename(self, /): ...
    def getOriginalFilename(self, /): ...
    def getRefCount(self, /): ...
    def getSystemInfo(self, object, /): ...
    def getTimestamp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_size(): ...
    def get_file_system(self, /): ...
    def get_filename(self, /): ...
    def get_original_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_system_info(self, object, /): ...
    def get_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasFile(self, /): ...
    def has_file(self, /): ...
    def isDirectory(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def isRegularFile(self, /): ...
    def isWritable(self, /): ...
    def is_directory(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def is_regular_file(self, /): ...
    def is_writable(self, /): ...
    def ls(): ...
    def lsAll(): ...
    def ls_all(): ...
    def openAppendFile(self, /): ...
    def openReadAppendFile(self, /): ...
    def openReadFile(self, object, /): ...
    def openReadWriteFile(self, object, /): ...
    def openWriteFile(): ...
    def open_append_file(self, /): ...
    def open_read_append_file(self, /): ...
    def open_read_file(self, object, /): ...
    def open_read_write_file(self, object, /): ...
    def open_write_file(): ...
    def output(self, object, /): ...
    def readFile(self, object, /): ...
    def read_file(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def renameFile(self, object, /): ...
    def rename_file(self, object, /): ...
    def scanDirectory(self, /): ...
    def scan_directory(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wasReadSuccessful(self, /): ...
    def was_read_successful(self, /): ...
    def writeFile(): ...
    def write_file(): ...
class VirtualFileList:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFile(self, object, /): ...
    def getFiles(self, /): ...
    def getNumFiles(self, /): ...
    def getRefCount(self, /): ...
    def get_class_type(): ...
    def get_file(self, object, /): ...
    def get_files(self, /): ...
    def get_num_files(self, /): ...
    def get_ref_count(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unref(self, /): ...
class VirtualFileMount:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFileSystem(self, /): ...
    def getMountFlags(self, /): ...
    def getMountPoint(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_system(self, /): ...
    def get_mount_flags(self, /): ...
    def get_mount_point(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class VirtualFileMountHTTP:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFileSystem(self, /): ...
    def getHttpClient(self, /): ...
    def getMountFlags(self, /): ...
    def getMountPoint(self, /): ...
    def getRefCount(self, /): ...
    def getRoot(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_system(self, /): ...
    def get_http_client(self, /): ...
    def get_mount_flags(self, /): ...
    def get_mount_point(self, /): ...
    def get_ref_count(self, /): ...
    def get_root(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def reloadVfsMountUrl(): ...
    def reload_vfs_mount_url(): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class VirtualFileMountMultifile:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFileSystem(self, /): ...
    def getMountFlags(self, /): ...
    def getMountPoint(self, /): ...
    def getMultifile(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_system(self, /): ...
    def get_mount_flags(self, /): ...
    def get_mount_point(self, /): ...
    def get_multifile(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class VirtualFileMountRamdisk:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFileSystem(self, /): ...
    def getMountFlags(self, /): ...
    def getMountPoint(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_system(self, /): ...
    def get_mount_flags(self, /): ...
    def get_mount_point(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class VirtualFileMountSystem:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getClassType(): ...
    def getFileSystem(self, /): ...
    def getMountFlags(self, /): ...
    def getMountPoint(self, /): ...
    def getPhysicalFilename(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_system(self, /): ...
    def get_mount_flags(self, /): ...
    def get_mount_point(self, /): ...
    def get_physical_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def write(self, object, /): ...
class VirtualFileSimple:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def closeReadFile(self, object, /): ...
    def closeReadWriteFile(self, object, /): ...
    def closeWriteFile(self, object, /): ...
    def close_read_file(self, object, /): ...
    def close_read_write_file(self, object, /): ...
    def close_write_file(self, object, /): ...
    def copyFile(self, object, /): ...
    def copy_file(self, object, /): ...
    def deleteFile(self, /): ...
    def delete_file(self, /): ...
    def getClassType(): ...
    def getFileSize(): ...
    def getFileSystem(self, /): ...
    def getFilename(self, /): ...
    def getMount(self, /): ...
    def getOriginalFilename(self, /): ...
    def getRefCount(self, /): ...
    def getSystemInfo(self, object, /): ...
    def getTimestamp(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_file_size(): ...
    def get_file_system(self, /): ...
    def get_filename(self, /): ...
    def get_mount(self, /): ...
    def get_original_filename(self, /): ...
    def get_ref_count(self, /): ...
    def get_system_info(self, object, /): ...
    def get_timestamp(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasFile(self, /): ...
    def has_file(self, /): ...
    def isDirectory(self, /): ...
    def isExactType(self, object, /): ...
    def isImplicitPzFile(self, /): ...
    def isOfType(self, object, /): ...
    def isRegularFile(self, /): ...
    def isWritable(self, /): ...
    def is_directory(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_implicit_pz_file(self, /): ...
    def is_of_type(self, object, /): ...
    def is_regular_file(self, /): ...
    def is_writable(self, /): ...
    def ls(): ...
    def lsAll(): ...
    def ls_all(): ...
    def openAppendFile(self, /): ...
    def openReadAppendFile(self, /): ...
    def openReadFile(self, object, /): ...
    def openReadWriteFile(self, object, /): ...
    def openWriteFile(): ...
    def open_append_file(self, /): ...
    def open_read_append_file(self, /): ...
    def open_read_file(self, object, /): ...
    def open_read_write_file(self, object, /): ...
    def open_write_file(): ...
    def output(self, object, /): ...
    def readFile(self, object, /): ...
    def read_file(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def renameFile(self, object, /): ...
    def rename_file(self, object, /): ...
    def scanDirectory(self, /): ...
    def scan_directory(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
    def wasReadSuccessful(self, /): ...
    def was_read_successful(self, /): ...
    def writeFile(): ...
    def write_file(): ...
class VirtualFileSystem:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MFReadOnly:int = None
    MF_read_only:int = None
    def chdir(self, object, /): ...
    def closeReadFile(object, /): ...
    def closeReadWriteFile(object, /): ...
    def closeWriteFile(object, /): ...
    def close_read_file(object, /): ...
    def close_read_write_file(object, /): ...
    def close_write_file(object, /): ...
    def copyFile(): ...
    def copy_file(): ...
    def createFile(self, object, /): ...
    def create_file(self, object, /): ...
    def deleteFile(self, object, /): ...
    def delete_file(self, object, /): ...
    def exists(self, object, /): ...
    def findAllFiles(): ...
    def findFile(): ...
    def find_all_files(): ...
    def find_file(): ...
    def getCwd(self, /): ...
    def getFile(): ...
    def getGlobalPtr(): ...
    def getMount(self, object, /): ...
    def getMounts(self, /): ...
    def getNumMounts(self, /): ...
    def get_cwd(self, /): ...
    def get_file(): ...
    def get_global_ptr(): ...
    def get_mount(self, object, /): ...
    def get_mounts(self, /): ...
    def get_num_mounts(self, /): ...
    def isDirectory(self, object, /): ...
    def isRegularFile(self, object, /): ...
    def is_directory(self, object, /): ...
    def is_regular_file(self, object, /): ...
    def ls(self, object, /): ...
    def lsAll(self, object, /): ...
    def ls_all(self, object, /): ...
    def makeDirectory(self, object, /): ...
    def makeDirectoryFull(self, object, /): ...
    def make_directory(self, object, /): ...
    def make_directory_full(self, object, /): ...
    def mount(): ...
    def mountLoop(): ...
    def mount_loop(): ...
    mounts = None
    def openAppendFile(self, object, /): ...
    def openReadAppendFile(self, object, /): ...
    def openReadFile(): ...
    def openReadWriteFile(): ...
    def openWriteFile(): ...
    def open_append_file(self, object, /): ...
    def open_read_append_file(self, object, /): ...
    def open_read_file(): ...
    def open_read_write_file(): ...
    def open_write_file(): ...
    def readFile(): ...
    def read_file(): ...
    def renameFile(): ...
    def rename_file(): ...
    def resolveFilename(): ...
    def resolve_filename(): ...
    def scanDirectory(self, object, /): ...
    def scan_directory(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def unmount(self, object, /): ...
    def unmountAll(self, /): ...
    def unmountPoint(self, object, /): ...
    def unmount_all(self, /): ...
    def unmount_point(self, object, /): ...
    def write(self, object, /): ...
    def writeFile(): ...
    def write_file(): ...
class VirtualMouse:
    ...
    class Children:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    FBCullCallback:int = None
    FBDrawMask:int = None
    FBEffects:int = None
    FBState:int = None
    FBTag:int = None
    FBTransform:int = None
    FB_cull_callback:int = None
    FB_draw_mask:int = None
    FB_effects:int = None
    FB_state:int = None
    FB_tag:int = None
    FB_transform:int = None
    class Parents:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    class Stashed:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
    UCChildren:int = None
    UCDrawMask:int = None
    UCParents:int = None
    UCState:int = None
    UCTransform:int = None
    UC_children:int = None
    UC_draw_mask:int = None
    UC_parents:int = None
    UC_state:int = None
    UC_transform:int = None
    def addChild(): ...
    def addStashed(): ...
    def add_child(): ...
    def add_stashed(): ...
    def adjustDrawMask(): ...
    def adjust_draw_mask(): ...
    all_camera_mask = None
    def asLight(self, /): ...
    def as_light(self, /): ...
    bounds_stale = None
    bounds_type = None
    children = None
    def clearAttrib(self, object, /): ...
    def clearBounds(self, /): ...
    def clearEffect(self, object, /): ...
    def clearEffects(): ...
    def clearName(self, /): ...
    def clearPythonTag(self, object, /): ...
    def clearState(): ...
    def clearTag(): ...
    def clearTransform(): ...
    def clearUnexpectedChange(self, object, /): ...
    def clear_attrib(self, object, /): ...
    def clear_bounds(self, /): ...
    def clear_effect(self, object, /): ...
    def clear_effects(): ...
    def clear_name(self, /): ...
    def clear_python_tag(self, object, /): ...
    def clear_state(): ...
    def clear_tag(): ...
    def clear_transform(): ...
    def clear_unexpected_change(self, object, /): ...
    def combineWith(self, object, /): ...
    def combine_with(self, object, /): ...
    def compareTags(self, object, /): ...
    def compare_tags(self, object, /): ...
    def copyAllProperties(self, object, /): ...
    def copyChildren(): ...
    def copySubgraph(): ...
    def copyTags(self, object, /): ...
    def copy_all_properties(self, object, /): ...
    def copy_children(): ...
    def copy_subgraph(): ...
    def copy_tags(self, object, /): ...
    def countNumDescendants(self, /): ...
    def count_num_descendants(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    draw_control_mask = None
    draw_show_mask = None
    effects = None
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    final = None
    def findChild(): ...
    def findParent(): ...
    def findStashed(): ...
    def find_child(): ...
    def find_parent(): ...
    def find_stashed(): ...
    def getAllCameraMask(): ...
    def getAttrib(self, object, /): ...
    def getBamModified(self, /): ...
    def getBounds(): ...
    def getBoundsType(self, /): ...
    def getChild(): ...
    def getChildSort(): ...
    def getChildren(self, /): ...
    def getClassType(): ...
    def getDrawControlMask(self, /): ...
    def getDrawShowMask(self, /): ...
    def getEffect(self, object, /): ...
    def getEffects(): ...
    def getFancyBits(): ...
    def getInternalBounds(): ...
    def getInternalVertices(): ...
    def getIntoCollideMask(self, /): ...
    def getLegalCollideMask(self, /): ...
    def getName(self, /): ...
    def getNestedVertices(): ...
    def getNetCollideMask(): ...
    def getNetDrawControlMask(self, /): ...
    def getNetDrawShowMask(self, /): ...
    def getNumChildren(): ...
    def getNumParents(): ...
    def getNumStashed(): ...
    def getOffClipPlanes(): ...
    def getOverallBit(): ...
    def getParent(): ...
    def getParents(self, /): ...
    def getPrevTransform(): ...
    def getPythonTag(self, object, /): ...
    def getPythonTagKeys(self, /): ...
    def getPythonTags(self, /): ...
    def getRefCount(self, /): ...
    def getStashed(): ...
    def getStashedSort(): ...
    def getState(): ...
    def getTag(): ...
    def getTagKeys(self, /): ...
    def getTransform(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def getUnexpectedChange(self, object, /): ...
    def get_all_camera_mask(): ...
    def get_attrib(self, object, /): ...
    def get_bam_modified(self, /): ...
    def get_bounds(): ...
    def get_bounds_type(self, /): ...
    def get_child(): ...
    def get_child_sort(): ...
    def get_children(self, /): ...
    def get_class_type(): ...
    def get_draw_control_mask(self, /): ...
    def get_draw_show_mask(self, /): ...
    def get_effect(self, object, /): ...
    def get_effects(): ...
    def get_fancy_bits(): ...
    def get_internal_bounds(): ...
    def get_internal_vertices(): ...
    def get_into_collide_mask(self, /): ...
    def get_legal_collide_mask(self, /): ...
    def get_name(self, /): ...
    def get_nested_vertices(): ...
    def get_net_collide_mask(): ...
    def get_net_draw_control_mask(self, /): ...
    def get_net_draw_show_mask(self, /): ...
    def get_num_children(): ...
    def get_num_parents(): ...
    def get_num_stashed(): ...
    def get_off_clip_planes(): ...
    def get_overall_bit(): ...
    def get_parent(): ...
    def get_parents(self, /): ...
    def get_prev_transform(): ...
    def get_python_tag(self, object, /): ...
    def get_python_tag_keys(self, /): ...
    def get_python_tags(self, /): ...
    def get_ref_count(self, /): ...
    def get_stashed(): ...
    def get_stashed_sort(): ...
    def get_state(): ...
    def get_tag(): ...
    def get_tag_keys(self, /): ...
    def get_transform(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def get_unexpected_change(self, object, /): ...
    def hasAttrib(self, object, /): ...
    def hasDirtyPrevTransform(self, /): ...
    def hasEffect(self, object, /): ...
    def hasName(self, /): ...
    def hasPythonTag(self, object, /): ...
    def hasTag(): ...
    def hasTags(self, /): ...
    def has_attrib(self, object, /): ...
    def has_dirty_prev_transform(self, /): ...
    def has_effect(self, object, /): ...
    def has_name(self, /): ...
    def has_python_tag(self, object, /): ...
    def has_tag(): ...
    def has_tags(self, /): ...
    internal_bounds = None
    internal_vertices = None
    into_collide_mask = None
    def isAmbientLight(self, /): ...
    def isBoundsStale(self, /): ...
    def isCollisionNode(self, /): ...
    def isExactType(self, object, /): ...
    def isFinal(): ...
    def isGeomNode(self, /): ...
    def isLodNode(self, /): ...
    def isOfType(self, object, /): ...
    def isOverallHidden(self, /): ...
    def isSceneRoot(self, /): ...
    def isUnderSceneRoot(self, /): ...
    def is_ambient_light(self, /): ...
    def is_bounds_stale(self, /): ...
    def is_collision_node(self, /): ...
    def is_exact_type(self, object, /): ...
    def is_final(): ...
    def is_geom_node(self, /): ...
    def is_lod_node(self, /): ...
    def is_of_type(self, object, /): ...
    def is_overall_hidden(self, /): ...
    def is_scene_root(self, /): ...
    def is_under_scene_root(self, /): ...
    legal_collide_mask = None
    def listTags(): ...
    def list_tags(): ...
    def ls(): ...
    def makeCopy(self, /): ...
    def make_copy(self, /): ...
    def markBamModified(self, /): ...
    def markBoundsStale(): ...
    def markInternalBoundsStale(): ...
    def mark_bam_modified(self, /): ...
    def mark_bounds_stale(): ...
    def mark_internal_bounds_stale(): ...
    name = None
    nested_vertices = None
    def output(self, object, /): ...
    overall_bit = None
    overall_hidden = None
    parents = None
    def prepareScene(): ...
    def prepare_scene(): ...
    def pressButton(self, object, /): ...
    def press_button(self, object, /): ...
    prev_transform = None
    python_tags = None
    def ref(self, /): ...
    ref_count = None
    def releaseButton(self, object, /): ...
    def release_button(self, object, /): ...
    def removeAllChildren(): ...
    def removeChild(): ...
    def removeStashed(): ...
    def remove_all_children(): ...
    def remove_child(): ...
    def remove_stashed(): ...
    def replaceChild(): ...
    def replaceNode(self, object, /): ...
    def replace_child(): ...
    def replace_node(self, object, /): ...
    def resetAllPrevTransform(): ...
    def resetPrevTransform(): ...
    def reset_all_prev_transform(): ...
    def reset_prev_transform(): ...
    def setAttrib(): ...
    def setBound(self, object, /): ...
    def setBounds(self, object, /): ...
    def setBoundsType(self, object, /): ...
    def setEffect(self, object, /): ...
    def setEffects(): ...
    def setFinal(self, object, /): ...
    def setIntoCollideMask(self, object, /): ...
    def setMouseOn(self, object, /): ...
    def setMousePos(): ...
    def setName(self, object, /): ...
    def setOverallHidden(self, object, /): ...
    def setPrevTransform(): ...
    def setPythonTag(): ...
    def setState(): ...
    def setTag(): ...
    def setTransform(): ...
    def setUnexpectedChange(self, object, /): ...
    def setWindowSize(): ...
    def set_attrib(): ...
    def set_bound(self, object, /): ...
    def set_bounds(self, object, /): ...
    def set_bounds_type(self, object, /): ...
    def set_effect(self, object, /): ...
    def set_effects(): ...
    def set_final(self, object, /): ...
    def set_into_collide_mask(self, object, /): ...
    def set_mouse_on(self, object, /): ...
    def set_mouse_pos(): ...
    def set_name(self, object, /): ...
    def set_overall_hidden(self, object, /): ...
    def set_prev_transform(): ...
    def set_python_tag(): ...
    def set_state(): ...
    def set_tag(): ...
    def set_transform(): ...
    def set_unexpected_change(self, object, /): ...
    def set_window_size(): ...
    def stashChild(): ...
    def stash_child(): ...
    stashed = None
    state = None
    def stealChildren(): ...
    def steal_children(): ...
    tags = None
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    transform = None
    type = None
    def unref(self, /): ...
    def unstashChild(): ...
    def unstash_child(): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
    def write(): ...
    def writeConnections(self, object, /): ...
    def writeInputs(self, object, /): ...
    def writeOutputs(self, object, /): ...
    def write_connections(self, object, /): ...
    def write_inputs(self, object, /): ...
    def write_outputs(self, object, /): ...
class VorbisAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class VorbisAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class WavAudio:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def clearName(self, /): ...
    def clear_name(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    filename = None
    def fillin(): ...
    def get(object, /): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getFilename(self, /): ...
    def getName(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_filename(self, /): ...
    def get_name(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def hasName(self, /): ...
    def has_name(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def make(object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    name = None
    def open(self, /): ...
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def setName(self, object, /): ...
    def set_name(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToNamable(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcastToTypedWritableReferenceCount(self, /): ...
    def upcast_to_Namable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
    def upcast_to_TypedWritableReferenceCount(self, /): ...
class WavAudioCursor:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def aborted(self, /): ...
    def audioChannels(self, /): ...
    def audioRate(self, /): ...
    def audio_channels(self, /): ...
    def audio_rate(self, /): ...
    def canSeek(self, /): ...
    def canSeekFast(self, /): ...
    def can_seek(self, /): ...
    def can_seek_fast(self, /): ...
    def decodeFromBamStream(): ...
    def decode_from_bam_stream(): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getRefCount(self, /): ...
    def getSource(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_ref_count(self, /): ...
    def get_source(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def length(self, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    def readSamples(): ...
    def read_samples(): ...
    def ready(self, /): ...
    def ref(self, /): ...
    ref_count = None
    def seek(self, object, /): ...
    def skipSamples(self, object, /): ...
    def skip_samples(self, object, /): ...
    def tell(self, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedWritable(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedWritable(self, /): ...
class WeakNodePath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def compareTo(self, object, /): ...
    def compare_to(self, object, /): ...
    def getKey(self, /): ...
    def getNodePath(self, /): ...
    def get_key(self, /): ...
    def get_node_path(self, /): ...
    def isEmpty(self, /): ...
    def is_empty(self, /): ...
    def node(self, /): ...
    def output(self, object, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wasDeleted(self, /): ...
    def was_deleted(self, /): ...
class WeakPointerToVoid:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def getHash(self, /): ...
    def get_hash(self, /): ...
    def isNull(self, /): ...
    def isValidPointer(self, /): ...
    def is_null(self, /): ...
    def is_valid_pointer(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def wasDeleted(self, /): ...
    def was_deleted(self, /): ...
class WindowHandle:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    class OSHandle:
        ...
        DtoolClassDict:dict = None
        def DtoolGetSuperBase(self, /): ...
        def getClassType(): ...
        def getIntHandle(self, /): ...
        def getRefCount(self, /): ...
        def getType(self, /): ...
        def getTypeIndex(self, /): ...
        def get_class_type(): ...
        def get_int_handle(self, /): ...
        def get_ref_count(self, /): ...
        def get_type(self, /): ...
        def get_type_index(self, /): ...
        def isExactType(self, object, /): ...
        def isOfType(self, object, /): ...
        def is_exact_type(self, object, /): ...
        def is_of_type(self, object, /): ...
        def output(self, object, /): ...
        def ref(self, /): ...
        ref_count = None
        def testRefCountIntegrity(self, /): ...
        def testRefCountNonzero(self, /): ...
        def test_ref_count_integrity(self, /): ...
        def test_ref_count_nonzero(self, /): ...
        this = None
        this_const = None
        this_metatype = None
        this_ownership = None
        type = None
        def unref(self, /): ...
        def upcastToReferenceCount(self, /): ...
        def upcastToTypedObject(self, /): ...
        def upcast_to_ReferenceCount(self, /): ...
        def upcast_to_TypedObject(self, /): ...
    def getClassType(): ...
    def getIntHandle(self, /): ...
    def getOsHandle(self, /): ...
    def getRefCount(self, /): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_class_type(): ...
    def get_int_handle(self, /): ...
    def get_os_handle(self, /): ...
    def get_ref_count(self, /): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    os_handle = None
    def output(self, object, /): ...
    def ref(self, /): ...
    ref_count = None
    def sendWindowsMessage(): ...
    def send_windows_message(): ...
    def setOsHandle(self, object, /): ...
    def set_os_handle(self, object, /): ...
    def testRefCountIntegrity(self, /): ...
    def testRefCountNonzero(self, /): ...
    def test_ref_count_integrity(self, /): ...
    def test_ref_count_nonzero(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
    def unref(self, /): ...
    def upcastToReferenceCount(self, /): ...
    def upcastToTypedObject(self, /): ...
    def upcast_to_ReferenceCount(self, /): ...
    def upcast_to_TypedObject(self, /): ...
class WindowProperties:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    MAbsolute:int = None
    MConfined:int = None
    MRelative:int = None
    M_absolute:int = None
    M_confined:int = None
    M_relative:int = None
    ZBottom:int = None
    ZNormal:int = None
    ZTop:int = None
    Z_bottom:int = None
    Z_normal:int = None
    Z_top:int = None
    def addProperties(self, object, /): ...
    def add_properties(self, object, /): ...
    def assign(self, object, /): ...
    def clear(self, /): ...
    def clearCursorFilename(self, /): ...
    def clearCursorHidden(self, /): ...
    def clearDefault(): ...
    def clearFixedSize(self, /): ...
    def clearForeground(self, /): ...
    def clearFullscreen(self, /): ...
    def clearIconFilename(self, /): ...
    def clearMinimized(self, /): ...
    def clearMouseMode(self, /): ...
    def clearOpen(self, /): ...
    def clearOrigin(self, /): ...
    def clearParentWindow(self, /): ...
    def clearRawMice(self, /): ...
    def clearSize(self, /): ...
    def clearTitle(self, /): ...
    def clearUndecorated(self, /): ...
    def clearZOrder(self, /): ...
    def clear_cursor_filename(self, /): ...
    def clear_cursor_hidden(self, /): ...
    def clear_default(): ...
    def clear_fixed_size(self, /): ...
    def clear_foreground(self, /): ...
    def clear_fullscreen(self, /): ...
    def clear_icon_filename(self, /): ...
    def clear_minimized(self, /): ...
    def clear_mouse_mode(self, /): ...
    def clear_open(self, /): ...
    def clear_origin(self, /): ...
    def clear_parent_window(self, /): ...
    def clear_raw_mice(self, /): ...
    def clear_size(self, /): ...
    def clear_title(self, /): ...
    def clear_undecorated(self, /): ...
    def clear_z_order(self, /): ...
    config_properties = None
    cursor_filename = None
    cursor_hidden = None
    default = None
    fixed_size = None
    foreground = None
    fullscreen = None
    def getConfigProperties(): ...
    def getCursorFilename(self, /): ...
    def getCursorHidden(self, /): ...
    def getDefault(): ...
    def getFixedSize(self, /): ...
    def getForeground(self, /): ...
    def getFullscreen(self, /): ...
    def getIconFilename(self, /): ...
    def getMinimized(self, /): ...
    def getMouseMode(self, /): ...
    def getOpen(self, /): ...
    def getOrigin(self, /): ...
    def getParentWindow(self, /): ...
    def getRawMice(self, /): ...
    def getSize(self, /): ...
    def getTitle(self, /): ...
    def getUndecorated(self, /): ...
    def getXOrigin(self, /): ...
    def getXSize(self, /): ...
    def getYOrigin(self, /): ...
    def getYSize(self, /): ...
    def getZOrder(self, /): ...
    def get_config_properties(): ...
    def get_cursor_filename(self, /): ...
    def get_cursor_hidden(self, /): ...
    def get_default(): ...
    def get_fixed_size(self, /): ...
    def get_foreground(self, /): ...
    def get_fullscreen(self, /): ...
    def get_icon_filename(self, /): ...
    def get_minimized(self, /): ...
    def get_mouse_mode(self, /): ...
    def get_open(self, /): ...
    def get_origin(self, /): ...
    def get_parent_window(self, /): ...
    def get_raw_mice(self, /): ...
    def get_size(self, /): ...
    def get_title(self, /): ...
    def get_undecorated(self, /): ...
    def get_x_origin(self, /): ...
    def get_x_size(self, /): ...
    def get_y_origin(self, /): ...
    def get_y_size(self, /): ...
    def get_z_order(self, /): ...
    def hasCursorFilename(self, /): ...
    def hasCursorHidden(self, /): ...
    def hasFixedSize(self, /): ...
    def hasForeground(self, /): ...
    def hasFullscreen(self, /): ...
    def hasIconFilename(self, /): ...
    def hasMinimized(self, /): ...
    def hasMouseMode(self, /): ...
    def hasOpen(self, /): ...
    def hasOrigin(self, /): ...
    def hasParentWindow(self, /): ...
    def hasRawMice(self, /): ...
    def hasSize(self, /): ...
    def hasTitle(self, /): ...
    def hasUndecorated(self, /): ...
    def hasZOrder(self, /): ...
    def has_cursor_filename(self, /): ...
    def has_cursor_hidden(self, /): ...
    def has_fixed_size(self, /): ...
    def has_foreground(self, /): ...
    def has_fullscreen(self, /): ...
    def has_icon_filename(self, /): ...
    def has_minimized(self, /): ...
    def has_mouse_mode(self, /): ...
    def has_open(self, /): ...
    def has_origin(self, /): ...
    def has_parent_window(self, /): ...
    def has_raw_mice(self, /): ...
    def has_size(self, /): ...
    def has_title(self, /): ...
    def has_undecorated(self, /): ...
    def has_z_order(self, /): ...
    icon_filename = None
    def isAnySpecified(self, /): ...
    def is_any_specified(self, /): ...
    minimized = None
    mouse_mode = None
    open = None
    origin = None
    def output(self, object, /): ...
    parent_window = None
    def setCursorFilename(self, object, /): ...
    def setCursorHidden(self, object, /): ...
    def setDefault(object, /): ...
    def setFixedSize(self, object, /): ...
    def setForeground(self, object, /): ...
    def setFullscreen(self, object, /): ...
    def setIconFilename(self, object, /): ...
    def setMinimized(self, object, /): ...
    def setMouseMode(self, object, /): ...
    def setOpen(self, object, /): ...
    def setOrigin(): ...
    def setParentWindow(): ...
    def setRawMice(self, object, /): ...
    def setSize(): ...
    def setTitle(self, object, /): ...
    def setUndecorated(self, object, /): ...
    def setZOrder(self, object, /): ...
    def set_cursor_filename(self, object, /): ...
    def set_cursor_hidden(self, object, /): ...
    def set_default(object, /): ...
    def set_fixed_size(self, object, /): ...
    def set_foreground(self, object, /): ...
    def set_fullscreen(self, object, /): ...
    def set_icon_filename(self, object, /): ...
    def set_minimized(self, object, /): ...
    def set_mouse_mode(self, object, /): ...
    def set_open(self, object, /): ...
    def set_origin(): ...
    def set_parent_window(): ...
    def set_raw_mice(self, object, /): ...
    def set_size(): ...
    def set_title(self, object, /): ...
    def set_undecorated(self, object, /): ...
    def set_z_order(self, object, /): ...
    def size(): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    title = None
    undecorated = None
    z_order = None
class WorkingNodePath:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    node_path = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    valid = None
class WritableConfigurable:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    def encodeToBamStream(): ...
    def encode_to_bam_stream(): ...
    def fillin(): ...
    def getBamModified(self, /): ...
    def getClassType(): ...
    def getType(self, /): ...
    def getTypeIndex(self, /): ...
    def get_bam_modified(self, /): ...
    def get_class_type(): ...
    def get_type(self, /): ...
    def get_type_index(self, /): ...
    def isExactType(self, object, /): ...
    def isOfType(self, object, /): ...
    def is_exact_type(self, object, /): ...
    def is_of_type(self, object, /): ...
    def markBamModified(self, /): ...
    def mark_bam_modified(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    type = None
class Xel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    b = None
    g = None
    def output(self, object, /): ...
    r = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
def autoBind(): ...
def auto_bind(): ...
class basic_ios_char:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def good(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
def checkAdler(self, object, /): ...
def checkCrc(self, object, /): ...
def check_adler(self, object, /): ...
def check_crc(self, object, /): ...
def composeMatrix(): ...
def compose_matrix(): ...
def compressFile(): ...
def compressStream(): ...
def compressString(): ...
def compress_file(): ...
def compress_stream(): ...
def compress_string(): ...
def copyStream(): ...
def copy_stream(): ...
def decodeSRGBFloat(self, object, /): ...
def decodeSRGBUchar(self, object, /): ...
def decode_sRGB_float(self, object, /): ...
def decode_sRGB_uchar(self, object, /): ...
def decomposeMatrix(): ...
def decomposeMatrixOldHpr(): ...
def decompose_matrix(): ...
def decompose_matrix_old_hpr(): ...
def decompressFile(): ...
def decompressStream(): ...
def decompressString(self, object, /): ...
def decompress_file(): ...
def decompress_stream(): ...
def decompress_string(self, object, /): ...
def decryptFile(): ...
def decryptStream(): ...
def decryptString(): ...
def decrypt_file(): ...
def decrypt_stream(): ...
def decrypt_string(): ...
def deg2Rad(self, object, /): ...
def deg_2_rad(self, object, /): ...
def encodeSRGBFloat(self, object, /): ...
def encodeSRGBUchar(self, object, /): ...
def encode_sRGB_float(self, object, /): ...
def encode_sRGB_uchar(self, object, /): ...
def encryptFile(): ...
def encryptStream(): ...
def encryptString(): ...
def encrypt_file(): ...
def encrypt_stream(): ...
def encrypt_string(): ...
def errorToText(self, object, /): ...
def error_to_text(self, object, /): ...
def formatColorSpace(self, object, /): ...
def formatCoordinateSystem(self, object, /): ...
def format_color_space(self, object, /): ...
def format_coordinate_system(self, object, /): ...
class fstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
def genericReadDatagram(): ...
def genericWriteDatagram(): ...
def generic_read_datagram(): ...
def generic_write_datagram(): ...
def getDefaultCoordinateSystem(self, /): ...
def getModelPath(self, /): ...
def getNetworkError(self, /): ...
def getPluginPath(self, /): ...
def getTIXMLDEFAULTENCODING(self, /): ...
def getTIXMLMAJORVERSION(self, /): ...
def getTIXMLMINORVERSION(self, /): ...
def getTIXMLPATCHVERSION(self, /): ...
def getWriteError(self, /): ...
def get_TIXML_DEFAULT_ENCODING(self, /): ...
def get_TIXML_MAJOR_VERSION(self, /): ...
def get_TIXML_MINOR_VERSION(self, /): ...
def get_TIXML_PATCH_VERSION(self, /): ...
def get_default_coordinate_system(self, /): ...
def get_model_path(self, /): ...
def get_network_error(self, /): ...
def get_plugin_path(self, /): ...
def get_write_error(self, /): ...
def handleSocketError(self, /): ...
def handle_socket_error(self, /): ...
def hashPrcVariables(self, object, /): ...
def hash_prc_variables(self, object, /): ...
def headsUp(): ...
def heads_up(): ...
class ifstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
def invert(self, object, /): ...
class ios:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def good(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class ios_base:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    beg:int = None
    cur:int = None
    end:int = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class iostream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
def isRightHanded(): ...
def is_right_handed(): ...
class istream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
def loadPrcFile(self, object, /): ...
def loadPrcFileData(): ...
def load_prc_file(self, object, /): ...
def load_prc_file_data(): ...
def lookAt(): ...
def look_at(): ...
class ofstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
def oldToNewHpr(self, object, /): ...
def old_to_new_hpr(self, object, /): ...
class ostream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
def parseColorSpaceString(self, object, /): ...
def parseCoordinateSystemString(self, object, /): ...
def parse_color_space_string(self, object, /): ...
def parse_coordinate_system_string(self, object, /): ...
def passwordHash(): ...
def password_hash(): ...
class pfstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekg(): ...
    def seekp(): ...
    def tellg(self, /): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcastToIstream(self, /): ...
    def upcastToOstream(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
    def upcast_to_istream(self, /): ...
    def upcast_to_ostream(self, /): ...
class pifstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def get(self, /): ...
    def good(self, /): ...
    def open(): ...
    def seekg(): ...
    def tellg(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
class pixel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    b = None
    g = None
    def output(self, object, /): ...
    r = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
class pofstream:
    ...
    Beg:int = None
    Cur:int = None
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    End:int = None
    def bad(self, /): ...
    beg:int = None
    def clear(self, /): ...
    def close(self, /): ...
    cur:int = None
    end:int = None
    def eof(self, /): ...
    def fail(self, /): ...
    def flush(self, /): ...
    def good(self, /): ...
    def open(): ...
    def put(self, object, /): ...
    def seekp(): ...
    def tellp(self, /): ...
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
    def upcastToBasicIosChar(self, /): ...
    def upcast_to_basic_ios_char(self, /): ...
def printXml(self, object, /): ...
def printXmlToFile(): ...
def print_xml(self, object, /): ...
def print_xml_to_file(): ...
def pyDecodeNodePathFromBamStream(self, object, /): ...
def pyDecodeNodePathFromBamStreamPersist(): ...
def pyDecodeTypedWritableFromBamStream(): ...
def pyDecodeTypedWritableFromBamStreamPersist(): ...
def py_decode_NodePath_from_bam_stream(self, object, /): ...
def py_decode_NodePath_from_bam_stream_persist(): ...
def py_decode_TypedWritable_from_bam_stream(): ...
def py_decode_TypedWritable_from_bam_stream_persist(): ...
def rad2Deg(self, object, /): ...
def rad_2_deg(self, object, /): ...
def readXmlStream(self, object, /): ...
def read_xml_stream(self, object, /): ...
def rotateTo(): ...
def rotate_to(): ...
def transpose(self, object, /): ...
def unloadPrcFile(self, object, /): ...
def unload_prc_file(self, object, /): ...
def writeXmlStream(): ...
def write_xml_stream(): ...
class xel:
    ...
    DtoolClassDict:dict = None
    def DtoolGetSuperBase(self, /): ...
    b = None
    g = None
    def output(self, object, /): ...
    r = None
    this = None
    this_const = None
    this_metatype = None
    this_ownership = None
